{
  "address": "0x411cB8F6b046DbC8751189F933Bf3D394027bd21",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToGPStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountCurrentlyStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountNeededToOpenPortal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areContractsSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consumables",
      "outputs": [
        {
          "internalType": "contract IConsumables",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gp",
      "outputs": [
        {
          "internalType": "contract IGP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "handleMessage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oldTrainingGrounds",
      "outputs": [
        {
          "internalType": "contract IOldTrainingGrounds",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_wndTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_saIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_saAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_consumableIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_consumableAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "processMessageFromChild",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootTunnel",
      "outputs": [
        {
          "internalType": "contract IRootTunnel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sacrificialAlter",
      "outputs": [
        {
          "internalType": "contract ISacrificialAlter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gpAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wndAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sacrificialAlterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consumablesAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_rootTunnelAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_oldTrainingGroundsAddress",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldPause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "stakeGP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gpAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_wndTokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_saIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_saAmounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_consumableIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_consumableAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "transferToL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unstakeGP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountNeededToOpenPortal",
          "type": "uint256"
        }
      ],
      "name": "updateStakeSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wnd",
      "outputs": [
        {
          "internalType": "contract IWnDRoot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcafe275dcd8650156a5930ae8dc0efab7a58bf4e1bf72e627ccf36d048b1f6af",
  "receipt": {
    "to": null,
    "from": "0xC7dEFA20Ec54917669f29e15D1ACB7c121b4780c",
    "contractAddress": "0x411cB8F6b046DbC8751189F933Bf3D394027bd21",
    "transactionIndex": 15,
    "gasUsed": "2762414",
    "logsBloom": "0x
    "blockHash": "0x45c3dd02c4cff61f4ead47fc1e63deaa50a7554fb520c698fc4a8e1bf3279b61",
    "transactionHash": "0xcafe275dcd8650156a5930ae8dc0efab7a58bf4e1bf72e627ccf36d048b1f6af",
    "logs": [],
    "blockNumber": 14722248,
    "cumulativeGasUsed": "5070449",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "709f04a4faafb074e5031cd59126da23",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToGPStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountCurrentlyStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountNeededToOpenPortal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areContractsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumables\",\"outputs\":[{\"internalType\":\"contract IConsumables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gp\",\"outputs\":[{\"internalType\":\"contract IGP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"handleMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oldTrainingGrounds\",\"outputs\":[{\"internalType\":\"contract IOldTrainingGrounds\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_wndTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_saIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_saAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_consumableIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_consumableAmounts\",\"type\":\"uint256[]\"}],\"name\":\"processMessageFromChild\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootTunnel\",\"outputs\":[{\"internalType\":\"contract IRootTunnel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sacrificialAlter\",\"outputs\":[{\"internalType\":\"contract ISacrificialAlter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wndAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sacrificialAlterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumablesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rootTunnelAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oldTrainingGroundsAddress\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeGP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gpAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_wndTokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_saIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_saAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_consumableIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_consumableAmounts\",\"type\":\"uint256[]\"}],\"name\":\"transferToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstakeGP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountNeededToOpenPortal\",\"type\":\"uint256\"}],\"name\":\"updateStakeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnd\",\"outputs\":[{\"internalType\":\"contract IWnDRoot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wnd/riftroot/RiftRoot.sol\":\"RiftRoot\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x19bc90c8301914433c5e9b74a4eaac8942f64ea79d509f445799459fa10695da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x52381f5750ecefd05d7d5ef3d5ee3aaf60082307adebb003a367ddfa7ca01a37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x998a349fd3c0ed252f0d2a8b8f2385911b11ae5d40f102a3f3f596d235368c68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4997774f1c7cd4f3596374621fc674b123a38e36e2ff1d17fbdc9d1111ed6a61\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x663079de534a3b3b4952558df1027a2698c793cc5032a21ad6767764e8de834f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"contracts/shared/AdminableUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./UtilitiesUpgradeable.sol\\\";\\n\\n// Do not add state to this contract.\\n//\\ncontract AdminableUpgradeable is UtilitiesUpgradeable {\\n\\n    mapping(address => bool) private admins;\\n\\n    function __Adminable_init() internal initializer {\\n        UtilitiesUpgradeable.__Utilities__init();\\n    }\\n\\n    function addAdmin(address _address) external onlyOwner {\\n        admins[_address] = true;\\n    }\\n\\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address _address) external onlyOwner {\\n        admins[_address] = false;\\n    }\\n\\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = false;\\n        }\\n    }\\n\\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\\n        if(_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function isAdmin(address _address) public view returns(bool) {\\n        return admins[_address];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(admins[msg.sender] || isOwner(), \\\"Not admin or owner\\\");\\n        _;\\n    }\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0xb9c7084cdb7d0cc6d4f3e7ce6e68e5f75c0a99bf311b1975ed27d8ff3088c7b6\",\"license\":\"MIT\"},\"contracts/shared/UtilitiesUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract UtilitiesUpgradeable is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n\\n    function __Utilities__init() internal initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        _pause();\\n    }\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"0 address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroLength(uint[] memory _array) {\\n        require(_array.length > 0, \\\"Empty array\\\");\\n        _;\\n    }\\n\\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\\n        require(_array1.length == _array2.length, \\\"Unequal lengths\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        /* solhint-disable avoid-tx-origin */\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    function isOwner() internal view returns(bool) {\\n        return owner() == msg.sender;\\n    }\\n}\",\"keccak256\":\"0x6d8894c4823d477c71487e9d325ab3d7a595723868621f522b664f717341769b\",\"license\":\"MIT\"},\"contracts/shared/randomizer/IRandomizer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizer {\\n\\n    // Sets the number of blocks that must pass between increment the commitId and seeding the random\\n    // Admin\\n    function setNumBlocksAfterIncrement(uint8 _numBlocksAfterIncrement) external;\\n\\n    // Increments the commit id.\\n    // Admin\\n    function incrementCommitId() external;\\n\\n    // Adding the random number needs to be done AFTER incrementing the commit id on a separate transaction. If\\n    // these are done together, there is a potential vulnerability to front load a commit when the bad actor\\n    // sees the value of the random number.\\n    function addRandomForCommit(uint256 _seed) external;\\n\\n    // Returns a request ID for a random number. This is unique.\\n    function requestRandomNumber() external returns(uint256);\\n\\n    // Returns the random number for the given request ID. Will revert\\n    // if the random is not ready.\\n    function revealRandomNumber(uint256 _requestId) external view returns(uint256);\\n\\n    // Returns if the random number for the given request ID is ready or not. Call\\n    // before calling revealRandomNumber.\\n    function isRandomReady(uint256 _requestId) external view returns(bool);\\n}\",\"keccak256\":\"0xb545e2e826fca3665f3c5471d597284704e84fd49dca0f29e9258735f7cffe85\",\"license\":\"MIT\"},\"contracts/wnd/riftroot/IOldTrainingGrounds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOldTrainingGrounds {\\n    function ownsToken(uint256 tokenId) external view returns (bool);\\n}\",\"keccak256\":\"0x0a50962988acd33bf30a67e50a95acc604efebd5377c98048e8a96b81cdc9945\",\"license\":\"MIT\"},\"contracts/wnd/riftroot/IRiftRoot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRiftRoot {\\n\\n}\",\"keccak256\":\"0x80d644b2d579cc213f2ee5d62204e26b43f9a44ae6450157aa80298af1423ce4\",\"license\":\"MIT\"},\"contracts/wnd/riftroot/RiftRoot.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./RiftRootGP.sol\\\";\\n\\ncontract RiftRoot is Initializable, RiftRootGP {\\n\\n    function initialize() external initializer {\\n        RiftRootGP.__RiftRootGP_init();\\n    }\\n\\n    // Sends from L1 -> L2. Tokens in L1 are held in this contract.\\n    function transferToL2(\\n        uint256 _gpAmount,\\n        uint256[] calldata _wndTokenIds,\\n        uint256[] calldata _saIds,\\n        uint256[] calldata _saAmounts,\\n        uint256[] memory _consumableIds,\\n        uint256[] memory _consumableAmounts)\\n    external\\n    onlyEOA\\n    whenNotPaused\\n    contractsAreSet\\n    {\\n        require(_saIds.length == _saAmounts.length, \\\"Bad SA lengths\\\");\\n        require(_consumableIds.length == _consumableAmounts.length, \\\"Bad lengths\\\");\\n        require(_wndTokenIds.length <= 10, \\\"too many NFTs to transfer\\\");\\n\\n        require(amountCurrentlyStaked >= amountNeededToOpenPortal, \\\"Not enough GP staked\\\");\\n\\n        bytes memory message = _getMessageForChild(_gpAmount, _wndTokenIds, _saIds, _saAmounts, _consumableIds, _consumableAmounts);\\n\\n        rootTunnel.sendMessageToChild(message);\\n    }\\n\\n    function _getMessageForChild(\\n        uint256 _gpAmount,\\n        uint256[] memory _wndTokenIds,\\n        uint256[] memory _saIds,\\n        uint256[] memory _saAmounts,\\n        uint256[] memory _consumableIds,\\n        uint256[] memory _consumableAmounts)\\n        internal returns(bytes memory)\\n    {\\n        if(_gpAmount > 0) {\\n            gp.burn(msg.sender, _gpAmount);\\n        }\\n\\n        WizardDragon[] memory _traits = new WizardDragon[](_wndTokenIds.length);\\n        // Transfer WnD\\n        for(uint256 i = 0; i < _wndTokenIds.length; i++) {\\n            uint256 _id = _wndTokenIds[i];\\n            require(_id != 0, \\\"Bad Wnd ID\\\");\\n\\n            _traits[i] = wnd.getTokenTraits(_id);\\n\\n            if(wnd.ownerOf(_id) == address(oldTrainingGrounds) && oldTrainingGrounds.ownsToken(_id)) {\\n                wnd.transferFrom(address(oldTrainingGrounds), address(this), _id);\\n            } else {\\n                // Will throw if not in their wallet.\\n                wnd.safeTransferFrom(msg.sender, address(this), _id);\\n            }\\n        }\\n\\n        if(_saIds.length > 0) {\\n            // No admin safe transfer on L1 sacrificial alter\\n            sacrificialAlter.safeBatchTransferFrom(msg.sender, address(this), _saIds, _saAmounts, \\\"\\\");\\n        }\\n\\n        if(_consumableIds.length > 0) {\\n            consumables.adminSafeBatchTransferFrom(msg.sender, address(this), _consumableIds, _consumableAmounts);\\n        }\\n\\n        bytes memory message = abi.encode(msg.sender, _gpAmount, _wndTokenIds, _traits, _saIds, _saAmounts, _consumableIds, _consumableAmounts);\\n\\n        return message;\\n    }\\n\\n    function handleMessage(bytes calldata _data) external override onlyAdminOrOwner {\\n        (address _to,\\n        uint256 _gpAmount,\\n        uint256[] memory _wndTokenIds,\\n        uint256[] memory _saIds,\\n        uint256[] memory _saAmounts,\\n        uint256[] memory _consumableIds,\\n        uint256[] memory _consumableAmounts) = abi.decode(\\n            _data,\\n            (address, uint256, uint256[], uint256[], uint256[], uint256[], uint256[])\\n        );\\n\\n        processMessageFromChild(_to, _gpAmount, _wndTokenIds, _saIds, _saAmounts, _consumableIds, _consumableAmounts);\\n    }\\n\\n    function processMessageFromChild(\\n        address _to,\\n        uint256 _gpAmount,\\n        uint256[] memory _wndTokenIds,\\n        uint256[] memory _saIds,\\n        uint256[] memory _saAmounts,\\n        uint256[] memory _consumableIds,\\n        uint256[] memory _consumableAmounts)\\n        public\\n        onlyAdminOrOwner\\n    {\\n        require(_saIds.length == _saAmounts.length, \\\"Bad SA Amounts\\\");\\n        require(_consumableIds.length == _consumableAmounts.length, \\\"Bad SA Amounts\\\");\\n\\n        if(_gpAmount > 0) {\\n            gp.mint(_to, _gpAmount);\\n        }\\n\\n        // 721s can only be minted on L1. If this is a valid token,\\n        // it should be in this contract already.\\n        for(uint256 i = 0; i < _wndTokenIds.length; i++) {\\n            uint256 _tokenId = _wndTokenIds[i];\\n            require(_tokenId != 0, \\\"Bad token id\\\");\\n            wnd.safeTransferFrom(address(this), _to, _tokenId);\\n        }\\n\\n        if(_saIds.length > 0) {\\n            address[] memory _addresses = new address[](_saIds.length);\\n            for(uint256 i = 0; i < _saIds.length; i++) {\\n                _addresses[i] = address(this);\\n            }\\n\\n            uint256[] memory _balances = sacrificialAlter.balanceOfBatch(_addresses, _saIds);\\n\\n            for(uint256 i = 0; i < _saIds.length; i++) {\\n                uint256 _currentBalance = _balances[i];\\n                // They are requesting more than is held by this contract.\\n                //\\n                if(_currentBalance < _saAmounts[i]) {\\n                    sacrificialAlter.mint(_saIds[i], uint16(_saAmounts[i] - _currentBalance), address(this));\\n                }\\n            }\\n\\n            // No admin safe transfer on L1 sacrificial alter\\n            sacrificialAlter.safeBatchTransferFrom(address(this), _to, _saIds, _saAmounts, \\\"\\\");\\n        }\\n\\n        if(_consumableIds.length > 0) {\\n            address[] memory _addresses = new address[](_consumableIds.length);\\n            for(uint256 i = 0; i < _consumableIds.length; i++) {\\n                _addresses[i] = address(this);\\n            }\\n\\n            uint256[] memory _balances = consumables.balanceOfBatch(_addresses, _consumableIds);\\n\\n            for(uint256 i = 0; i < _consumableIds.length; i++) {\\n                uint256 _currentBalance = _balances[i];\\n                // They are requesting more than is held by this contract.\\n                //\\n                if(_currentBalance < _consumableAmounts[i]) {\\n                    consumables.mint(_consumableIds[i], uint16(_consumableAmounts[i] - _currentBalance), address(this));\\n                }\\n            }\\n\\n            consumables.adminSafeBatchTransferFrom(address(this), _to, _consumableIds, _consumableAmounts);\\n        }\\n    }\\n}\",\"keccak256\":\"0x9f37ddf6b81d515a09459123c8da1e5f92647fbb0c8bd65ef99e4439270e80d1\",\"license\":\"MIT\"},\"contracts/wnd/riftroot/RiftRootContracts.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./RiftRootState.sol\\\";\\n\\nabstract contract RiftRootContracts is Initializable, RiftRootState {\\n\\n    function __RiftRootContracts_init() internal initializer {\\n        RiftRootState.__RiftRootState_init();\\n    }\\n\\n    function setContracts(\\n        address _gpAddress,\\n        address _wndAddress,\\n        address _sacrificialAlterAddress,\\n        address _consumablesAddress,\\n        address _rootTunnelAddress,\\n        address _oldTrainingGroundsAddress)\\n    external onlyAdminOrOwner\\n    {\\n        gp = IGP(_gpAddress);\\n        wnd = IWnDRoot(_wndAddress);\\n        sacrificialAlter = ISacrificialAlter(_sacrificialAlterAddress);\\n        consumables = IConsumables(_consumablesAddress);\\n        rootTunnel = IRootTunnel(_rootTunnelAddress);\\n        oldTrainingGrounds = IOldTrainingGrounds(_oldTrainingGroundsAddress);\\n    }\\n\\n    modifier contractsAreSet() {\\n        require(areContractsSet(), \\\"RiftRoot: Contracts aren't set\\\");\\n\\n        _;\\n    }\\n\\n    function areContractsSet() public view returns(bool) {\\n        return address(gp) != address(0)\\n            && address(wnd) != address(0)\\n            && address(sacrificialAlter) != address(0)\\n            && address(rootTunnel) != address(0)\\n            && address(oldTrainingGrounds) != address(0)\\n            && address(consumables) != address(0);\\n    }\\n}\",\"keccak256\":\"0x863cd78434b7247a5413c2613c65026cd52afe228648c42efa9307afa6612d06\",\"license\":\"MIT\"},\"contracts/wnd/riftroot/RiftRootGP.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./RiftRootContracts.sol\\\";\\n\\nabstract contract RiftRootGP is Initializable, RiftRootContracts {\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    function __RiftRootGP_init() internal initializer {\\n        RiftRootContracts.__RiftRootContracts_init();\\n    }\\n\\n    function updateStakeSettings(uint256 _amountNeededToOpenPortal) external onlyAdminOrOwner {\\n        amountNeededToOpenPortal = _amountNeededToOpenPortal;\\n    }\\n\\n    function stakeGP(uint256 _amount) external {\\n        require(_amount > 0, \\\"Must stake some GP.\\\");\\n        amountCurrentlyStaked += _amount;\\n        addressToGPStaked[msg.sender] += _amount;\\n\\n        if(!addressesStaked.contains(msg.sender)) {\\n            addressesStaked.add(msg.sender);\\n        }\\n\\n        bool _wasTransferred = gp.transferFrom(msg.sender, address(this), _amount);\\n        require(_wasTransferred, \\\"GP not transferred\\\");\\n    }\\n\\n    function unstakeGP(uint256 _amount) external {\\n        uint256 _amountStaked = addressToGPStaked[msg.sender];\\n        require(_amountStaked >= _amount, \\\"Too much GP to unstake\\\");\\n\\n        amountCurrentlyStaked -= _amount;\\n        addressToGPStaked[msg.sender] -= _amount;\\n\\n        if(addressToGPStaked[msg.sender] == 0) {\\n            addressesStaked.remove(msg.sender);\\n        }\\n\\n        bool _wasTransferred = gp.transfer(msg.sender, _amount);\\n        require(_wasTransferred, \\\"GP not transferred\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x9b8677f7b740b8bfd1be7b4278bcbde3c59038e26c115c926131135a3baea7ae\",\"license\":\"MIT\"},\"contracts/wnd/riftroot/RiftRootState.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\n\\nimport \\\"../../shared/randomizer/IRandomizer.sol\\\";\\nimport \\\"../../shared/AdminableUpgradeable.sol\\\";\\nimport \\\"../tokens/gp/IGP.sol\\\";\\nimport \\\"../tokens/wnd/IWnD.sol\\\";\\nimport \\\"../tokens/sacrificialalter/ISacrificialAlter.sol\\\";\\nimport \\\"../tokens/consumables/IConsumables.sol\\\";\\nimport \\\"../tunnels/IMessageHandler.sol\\\";\\nimport \\\"../tunnels/IRootTunnel.sol\\\";\\nimport \\\"./IRiftRoot.sol\\\";\\nimport \\\"./IOldTrainingGrounds.sol\\\";\\n\\nabstract contract RiftRootState is Initializable, IRiftRoot, IMessageHandler, ERC721HolderUpgradeable, ERC1155HolderUpgradeable, AdminableUpgradeable {\\n\\n    IGP public gp;\\n    IWnDRoot public wnd;\\n    ISacrificialAlter public sacrificialAlter;\\n    IConsumables public consumables;\\n    IRootTunnel public rootTunnel;\\n    IOldTrainingGrounds public oldTrainingGrounds;\\n\\n    EnumerableSetUpgradeable.AddressSet internal addressesStaked;\\n    mapping(address => uint256) public addressToGPStaked;\\n    uint256 public amountNeededToOpenPortal;\\n    uint256 public amountCurrentlyStaked;\\n\\n    function __RiftRootState_init() internal initializer {\\n        AdminableUpgradeable.__Adminable_init();\\n        ERC721HolderUpgradeable.__ERC721Holder_init();\\n        ERC1155HolderUpgradeable.__ERC1155Holder_init();\\n\\n        amountNeededToOpenPortal = 42_000_000 ether;\\n    }\\n}\",\"keccak256\":\"0xce8dbb512b2fc9b046550e94d44f197aafee5718e30a3beba58705357db942a6\",\"license\":\"MIT\"},\"contracts/wnd/tokens/consumables/IConsumables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IConsumables is IERC1155Upgradeable {\\n    function mint(uint256 typeId, uint256 qty, address recipient) external;\\n    function burn(uint256 typeId, uint256 qty, address burnFrom) external;\\n    function adminSafeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount) external;\\n    function adminSafeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts) external;\\n}\",\"keccak256\":\"0xf2f0b559a0da8dc3842b6473dee404a81626dac03fcfd9d1c405864fdedc8f87\",\"license\":\"MIT LICENSE\"},\"contracts/wnd/tokens/gp/IGP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IGP is IERC20Upgradeable {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n}\",\"keccak256\":\"0xfe59aa2665b8a7443d0e2a36065ec665bcd4d0b368476dd892a6d679e1de44d7\",\"license\":\"MIT\"},\"contracts/wnd/tokens/sacrificialalter/ISacrificialAlter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface ISacrificialAlter is IERC1155Upgradeable {\\n    function mint(uint256 typeId, uint16 qty, address recipient) external;\\n    function burn(uint256 typeId, uint16 qty, address burnFrom) external;\\n    function adminSafeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount) external;\\n    function adminSafeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts) external;\\n}\",\"keccak256\":\"0x69eeea47d2dbbae9d62cd1776fba4f08d1ea0f7e9aede4b8ee588e8bbe9c40c9\",\"license\":\"MIT\"},\"contracts/wnd/tokens/wnd/IWnD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\\ninterface IWnDRoot {\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function getTokenTraits(uint256 _tokenId) external returns(WizardDragon memory);\\n    function ownerOf(uint256 _tokenId) external returns(address);\\n    function approve(address _to, uint256 _tokenId) external;\\n}\\n\\ninterface IWnD is IERC721EnumerableUpgradeable {\\n    function mint(address _to, uint256 _tokenId, WizardDragon calldata _traits) external;\\n    function burn(uint256 _tokenId) external;\\n    function isWizard(uint256 _tokenId) external view returns(bool);\\n    function getTokenTraits(uint256 _tokenId) external view returns(WizardDragon memory);\\n    function exists(uint256 _tokenId) external view returns(bool);\\n    function adminTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\\nstruct WizardDragon {\\n    bool isWizard;\\n    uint8 body;\\n    uint8 head;\\n    uint8 spell;\\n    uint8 eyes;\\n    uint8 neck;\\n    uint8 mouth;\\n    uint8 wand;\\n    uint8 tail;\\n    uint8 rankIndex;\\n}\",\"keccak256\":\"0xd2b1e55a748db0f2b8d325ade1825479f655ed36e08ef977ffc1484cd9a403fa\",\"license\":\"MIT\"},\"contracts/wnd/tunnels/IMessageHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMessageHandler {\\n\\n    // Handles the given message from the other bridge\\n    // Admin only.\\n    function handleMessage(bytes calldata _data) external;\\n}\",\"keccak256\":\"0xe7a4cfb59e190eca5f34499b3d82195cee7382466022820895dff06ec8eec93e\",\"license\":\"MIT\"},\"contracts/wnd/tunnels/IRootTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRootTunnel {\\n\\n    // Sends the bytes to the child (L2).\\n    // Admin only.\\n    function sendMessageToChild(bytes calldata _data) external;\\n}\",\"keccak256\":\"0xca12e5f44a4b695e579a030a89a5a9142e8995c30abe2668f7e972af39f4c05e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613105806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c80638129fc1c1161010f578063bc197c81116100a2578063f23a6e6111610071578063f23a6e6114610467578063f2fde38b14610486578063fd501c6d14610499578063ff47b9f5146104ad57600080fd5b8063bc197c811461040d578063bedb86fb1461042c578063cc9b4ccd1461043f578063d46b93301461045357600080fd5b806390528e11116100de57806390528e11146103c95780639c54df64146103dd578063b831c56e146103f0578063b8a812e6146103fa57600080fd5b80638129fc1c1461039e5780638a902f8b146103a65780638cdcc4b4146103b05780638da5cb5b146103b857600080fd5b8063377e11e011610187578063715018a611610156578063715018a61461035c5780637e2eb016146103645780638025ee281461037757806380a597071461038a57600080fd5b8063377e11e014610317578063541825a01461032a5780635c975abb1461033d578063704802751461034957600080fd5b80631b3a57d0116101c35780631b3a57d014610298578063210184b4146102ab5780632463a55a146102d757806324d7806c146102ea57600080fd5b806301ffc9a7146101f55780630b0bbf691461021d578063150b7a021461024c5780631785f53c14610283575b600080fd5b6102086102033660046123cb565b6104c0565b60405190151581526020015b60405180910390f35b61023e61022b36600461241a565b61019a6020526000908152604090205481565b604051908152602001610214565b61026a61025a366004612515565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610214565b61029661029136600461241a565b6104f7565b005b6102966102a6366004612580565b61054c565b610196546102bf906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b6102966102e5366004612599565b610590565b6102086102f836600461241a565b6001600160a01b0316600090815261015f602052604090205460ff1690565b610296610325366004612666565b610643565b610296610338366004612735565b6106e5565b61012d5460ff16610208565b61029661035736600461241a565b610e4e565b610296610e9d565b610296610372366004612820565b610ed3565b610296610385366004612891565b610f4d565b610193546102bf906001600160a01b031681565b610296611258565b61023e61019b5481565b6102086112d2565b60fb546001600160a01b03166102bf565b610195546102bf906001600160a01b031681565b6102966103eb366004612666565b61135c565b61023e61019c5481565b610296610408366004612580565b6113f9565b61026a61041b36600461297b565b63bc197c8160e01b95945050505050565b61029661043a366004612a36565b61156b565b610197546102bf906001600160a01b031681565b610192546102bf906001600160a01b031681565b61026a610475366004612a53565b63f23a6e6160e01b95945050505050565b61029661049436600461241a565b6115bf565b610194546102bf906001600160a01b031681565b6102966104bb366004612580565b611657565b60006001600160e01b03198216630271189760e51b14806104f157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60fb546001600160a01b0316331461052a5760405162461bcd60e51b815260040161052190612abb565b60405180910390fd5b6001600160a01b0316600090815261015f60205260409020805460ff19169055565b33600090815261015f602052604090205460ff168061056e575061056e6117db565b61058a5760405162461bcd60e51b815260040161052190612af0565b61019b55565b33600090815261015f602052604090205460ff16806105b257506105b26117db565b6105ce5760405162461bcd60e51b815260040161052190612af0565b61019280546001600160a01b03199081166001600160a01b03988916179091556101938054821696881696909617909555610194805486169487169490941790935561019580548516928616929092179091556101968054841691851691909117905561019780549092169216919091179055565b60fb546001600160a01b0316331461066d5760405162461bcd60e51b815260040161052190612abb565b60005b818110156106e057600061015f600085858581811061069157610691612b1c565b90506020020160208101906106a6919061241a565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806106d881612b48565b915050610670565b505050565b33600090815261015f602052604090205460ff168061070757506107076117db565b6107235760405162461bcd60e51b815260040161052190612af0565b82518451146107655760405162461bcd60e51b815260206004820152600e60248201526d42616420534120416d6f756e747360901b6044820152606401610521565b80518251146107a75760405162461bcd60e51b815260206004820152600e60248201526d42616420534120416d6f756e747360901b6044820152606401610521565b851561081557610192546040516340c10f1960e01b81526001600160a01b03898116600483015260248201899052909116906340c10f1990604401600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050505b60005b85518110156108fa57600086828151811061083557610835612b1c565b60200260200101519050806000141561087f5760405162461bcd60e51b815260206004820152600c60248201526b109859081d1bdad95b881a5960a21b6044820152606401610521565b61019354604051632142170760e11b81526001600160a01b03909116906342842e0e906108b49030908d908690600401612b63565b600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050505080806108f290612b48565b915050610818565b50835115610ba057600084516001600160401b0381111561091d5761091d612437565b604051908082528060200260200182016040528015610946578160200160208202803683370190505b50905060005b8551811015610992573082828151811061096857610968612b1c565b6001600160a01b03909216602092830291909101909101528061098a81612b48565b91505061094c565b50610194546040516313849cfd60e21b81526000916001600160a01b031690634e1273f4906109c79085908a90600401612bc2565b60006040518083038186803b1580156109df57600080fd5b505afa1580156109f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a1b9190810190612c22565b905060005b8651811015610b33576000828281518110610a3d57610a3d612b1c565b60200260200101519050868281518110610a5957610a59612b1c565b6020026020010151811015610b20576101945488516001600160a01b03909116906351416019908a9085908110610a9257610a92612b1c565b6020026020010151838a8681518110610aad57610aad612b1c565b6020026020010151610abf9190612cb2565b6040516001600160e01b031960e085901b168152600481019290925261ffff166024820152306044820152606401600060405180830381600087803b158015610b0757600080fd5b505af1158015610b1b573d6000803e3d6000fd5b505050505b5080610b2b81612b48565b915050610a20565b5061019454604051631759616b60e11b81526001600160a01b0390911690632eb2c2d690610b6b9030908d908b908b90600401612cc9565b600060405180830381600087803b158015610b8557600080fd5b505af1158015610b99573d6000803e3d6000fd5b5050505050505b815115610e4557600082516001600160401b03811115610bc257610bc2612437565b604051908082528060200260200182016040528015610beb578160200160208202803683370190505b50905060005b8351811015610c375730828281518110610c0d57610c0d612b1c565b6001600160a01b039092166020928302919091019091015280610c2f81612b48565b915050610bf1565b50610195546040516313849cfd60e21b81526000916001600160a01b031690634e1273f490610c6c9085908890600401612bc2565b60006040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cc09190810190612c22565b905060005b8451811015610dd8576000828281518110610ce257610ce2612b1c565b60200260200101519050848281518110610cfe57610cfe612b1c565b6020026020010151811015610dc5576101955486516001600160a01b039091169063e7d3fe6b90889085908110610d3757610d37612b1c565b602002602001015183888681518110610d5257610d52612b1c565b6020026020010151610d649190612cb2565b6040516001600160e01b031960e085901b168152600481019290925261ffff166024820152306044820152606401600060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b505050505b5080610dd081612b48565b915050610cc5565b5061019554604051632bda09e960e21b81526001600160a01b039091169063af6827a490610e109030908d9089908990600401612d24565b600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b5050505050505b50505050505050565b60fb546001600160a01b03163314610e785760405162461bcd60e51b815260040161052190612abb565b6001600160a01b0316600090815261015f60205260409020805460ff19166001179055565b60fb546001600160a01b03163314610ec75760405162461bcd60e51b815260040161052190612abb565b610ed160006117ff565b565b33600090815261015f602052604090205460ff1680610ef55750610ef56117db565b610f115760405162461bcd60e51b815260040161052190612af0565b6000808080808080610f25888a018a612735565b9650965096509650965096509650610f42878787878787876106e5565b505050505050505050565b333214610f8b5760405162461bcd60e51b815260206004820152600c60248201526b4e6f20636f6e74726163747360a01b6044820152606401610521565b61012d5460ff1615610fd25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610521565b610fda6112d2565b6110265760405162461bcd60e51b815260206004820152601e60248201527f52696674526f6f743a20436f6e747261637473206172656e27742073657400006044820152606401610521565b8483146110665760405162461bcd60e51b815260206004820152600e60248201526d426164205341206c656e6774687360901b6044820152606401610521565b80518251146110a55760405162461bcd60e51b815260206004820152600b60248201526a426164206c656e6774687360a81b6044820152606401610521565b600a8711156110f65760405162461bcd60e51b815260206004820152601960248201527f746f6f206d616e79204e46547320746f207472616e73666572000000000000006044820152606401610521565b61019b5461019c5410156111435760405162461bcd60e51b8152602060048201526014602482015273139bdd08195b9bdd59da0811d4081cdd185ad95960621b6044820152606401610521565b60006111e88a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152508a92508991506118519050565b610196546040516309813cdd60e31b81529192506001600160a01b031690634c09e6e89061121a908490600401612d62565b600060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b5050505050505050505050505050565b600054610100900460ff166112735760005460ff1615611277565b303b155b6112935760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff161580156112b5576000805461ffff19166101011790555b6112bd611d88565b80156112cf576000805461ff00191690555b50565b610192546000906001600160a01b0316158015906112fb5750610193546001600160a01b031615155b80156113125750610194546001600160a01b031615155b80156113295750610196546001600160a01b031615155b80156113405750610197546001600160a01b031615155b80156113575750610195546001600160a01b031615155b905090565b60fb546001600160a01b031633146113865760405162461bcd60e51b815260040161052190612abb565b60005b818110156106e057600161015f60008585858181106113aa576113aa612b1c565b90506020020160208101906113bf919061241a565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806113f181612b48565b915050611389565b6000811161143f5760405162461bcd60e51b815260206004820152601360248201527226bab9ba1039ba30b5b29039b7b6b29023a81760691b6044820152606401610521565b8061019c60008282546114529190612e05565b909155505033600090815261019a602052604081208054839290611477908490612e05565b90915550611489905061019833611ded565b61149b5761149961019833611e12565b505b610192546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd906114d190339030908790600401612b63565b602060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115239190612e28565b9050806115675760405162461bcd60e51b815260206004820152601260248201527111d4081b9bdd081d1c985b9cd9995c9c995960721b6044820152606401610521565b5050565b33600090815261015f602052604090205460ff168061158d575061158d6117db565b6115a95760405162461bcd60e51b815260040161052190612af0565b80156115b7576112cf611e27565b6112cf611ec1565b60fb546001600160a01b031633146115e95760405162461bcd60e51b815260040161052190612abb565b6001600160a01b03811661164e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610521565b6112cf816117ff565b33600090815261019a6020526040902054818110156116b15760405162461bcd60e51b8152602060048201526016602482015275546f6f206d75636820475020746f20756e7374616b6560501b6044820152606401610521565b8161019c60008282546116c49190612cb2565b909155505033600090815261019a6020526040812080548492906116e9908490612cb2565b909155505033600090815261019a60205260409020546117115761170f61019833611f3d565b505b6101925460405163a9059cbb60e01b8152336004820152602481018490526000916001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561175f57600080fd5b505af1158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190612e28565b9050806106e05760405162461bcd60e51b815260206004820152601260248201527111d4081b9bdd081d1c985b9cd9995c9c995960721b6044820152606401610521565b6000336117f060fb546001600160a01b031690565b6001600160a01b031614905090565b60fb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606086156118bf5761019254604051632770a7eb60e21b8152336004820152602481018990526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156118a657600080fd5b505af11580156118ba573d6000803e3d6000fd5b505050505b600086516001600160401b038111156118da576118da612437565b60405190808252806020026020018201604052801561195957816020015b604080516101408101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082015282526000199092019101816118f85790505b50905060005b8751811015611c6757600088828151811061197c5761197c612b1c565b6020026020010151905080600014156119c45760405162461bcd60e51b815260206004820152600a6024820152691098590815db9908125160b21b6044820152606401610521565b610193546040516394e5684760e01b8152600481018390526001600160a01b03909116906394e568479060240161014060405180830381600087803b158015611a0c57600080fd5b505af1158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190612e56565b838381518110611a5657611a56612b1c565b602090810291909101015261019754610193546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381600087803b158015611ab057600080fd5b505af1158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae89190612f1e565b6001600160a01b0316148015611b7657506101975460405163f04d65fd60e01b8152600481018390526001600160a01b039091169063f04d65fd9060240160206040518083038186803b158015611b3e57600080fd5b505afa158015611b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b769190612e28565b15611bec5761019354610197546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92611bb59291169030908690600401612b63565b600060405180830381600087803b158015611bcf57600080fd5b505af1158015611be3573d6000803e3d6000fd5b50505050611c54565b61019354604051632142170760e11b81526001600160a01b03909116906342842e0e90611c2190339030908690600401612b63565b600060405180830381600087803b158015611c3b57600080fd5b505af1158015611c4f573d6000803e3d6000fd5b505050505b5080611c5f81612b48565b91505061195f565b50855115611cd95761019454604051631759616b60e11b81526001600160a01b0390911690632eb2c2d690611ca690339030908b908b90600401612cc9565b600060405180830381600087803b158015611cc057600080fd5b505af1158015611cd4573d6000803e3d6000fd5b505050505b835115611d4a5761019554604051632bda09e960e21b81526001600160a01b039091169063af6827a490611d17903390309089908990600401612d24565b600060405180830381600087803b158015611d3157600080fd5b505af1158015611d45573d6000803e3d6000fd5b505050505b6000338989848a8a8a8a604051602001611d6b989796959493929190612f3b565b60408051808303601f190181529190529998505050505050505050565b600054610100900460ff16611da35760005460ff1615611da7565b303b155b611dc35760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff16158015611de5576000805461ffff19166101011790555b6112bd611f52565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000611e0b836001600160a01b038416611fb7565b61012d5460ff1615611e6e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610521565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ea43390565b6040516001600160a01b03909116815260200160405180910390a1565b61012d5460ff16611f0b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610521565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611ea4565b6000611e0b836001600160a01b038416612006565b600054610100900460ff16611f6d5760005460ff1615611f71565b303b155b611f8d5760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff16158015611faf576000805461ffff19166101011790555b6112bd6120f9565b6000818152600183016020526040812054611ffe575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104f1565b5060006104f1565b600081815260018301602052604081205480156120ef57600061202a600183612cb2565b855490915060009061203e90600190612cb2565b90508181146120a357600086600001828154811061205e5761205e612b1c565b906000526020600020015490508087600001848154811061208157612081612b1c565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120b4576120b461306e565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104f1565b60009150506104f1565b600054610100900460ff166121145760005460ff1615612118565b303b155b6121345760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff16158015612156576000805461ffff19166101011790555b61215e612192565b6121666121f7565b61216e612226565b6a22bdd88fed9efc6a00000061019b5580156112cf576000805461ff001916905550565b600054610100900460ff166121ad5760005460ff16156121b1565b303b155b6121cd5760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff161580156121ef576000805461ffff19166101011790555b6112bd61225d565b600054610100900460ff1661221e5760405162461bcd60e51b815260040161052190613084565b610ed16122d2565b600054610100900460ff1661224d5760405162461bcd60e51b815260040161052190613084565b6122556122d2565b61221e6122d2565b600054610100900460ff166122785760005460ff161561227c565b303b155b6122985760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff161580156122ba576000805461ffff19166101011790555b6122c26122f9565b6122ca612330565b6112bd611e27565b600054610100900460ff16610ed15760405162461bcd60e51b815260040161052190613084565b600054610100900460ff166123205760405162461bcd60e51b815260040161052190613084565b6123286122d2565b610ed1612367565b600054610100900460ff166123575760405162461bcd60e51b815260040161052190613084565b61235f6122d2565b610ed1612397565b600054610100900460ff1661238e5760405162461bcd60e51b815260040161052190613084565b610ed1336117ff565b600054610100900460ff166123be5760405162461bcd60e51b815260040161052190613084565b61012d805460ff19169055565b6000602082840312156123dd57600080fd5b81356001600160e01b031981168114611e0b57600080fd5b6001600160a01b03811681146112cf57600080fd5b8035612415816123f5565b919050565b60006020828403121561242c57600080fd5b8135611e0b816123f5565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561247057612470612437565b60405290565b604051601f8201601f191681016001600160401b038111828210171561249e5761249e612437565b604052919050565b600082601f8301126124b757600080fd5b81356001600160401b038111156124d0576124d0612437565b6124e3601f8201601f1916602001612476565b8181528460208386010111156124f857600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561252b57600080fd5b8435612536816123f5565b93506020850135612546816123f5565b92506040850135915060608501356001600160401b0381111561256857600080fd5b612574878288016124a6565b91505092959194509250565b60006020828403121561259257600080fd5b5035919050565b60008060008060008060c087890312156125b257600080fd5b86356125bd816123f5565b955060208701356125cd816123f5565b945060408701356125dd816123f5565b935060608701356125ed816123f5565b925060808701356125fd816123f5565b915060a087013561260d816123f5565b809150509295509295509295565b60008083601f84011261262d57600080fd5b5081356001600160401b0381111561264457600080fd5b6020830191508360208260051b850101111561265f57600080fd5b9250929050565b6000806020838503121561267957600080fd5b82356001600160401b0381111561268f57600080fd5b61269b8582860161261b565b90969095509350505050565b60006001600160401b038211156126c0576126c0612437565b5060051b60200190565b600082601f8301126126db57600080fd5b813560206126f06126eb836126a7565b612476565b82815260059290921b8401810191818101908684111561270f57600080fd5b8286015b8481101561272a5780358352918301918301612713565b509695505050505050565b600080600080600080600060e0888a03121561275057600080fd5b6127598861240a565b96506020880135955060408801356001600160401b038082111561277c57600080fd5b6127888b838c016126ca565b965060608a013591508082111561279e57600080fd5b6127aa8b838c016126ca565b955060808a01359150808211156127c057600080fd5b6127cc8b838c016126ca565b945060a08a01359150808211156127e257600080fd5b6127ee8b838c016126ca565b935060c08a013591508082111561280457600080fd5b506128118a828b016126ca565b91505092959891949750929550565b6000806020838503121561283357600080fd5b82356001600160401b038082111561284a57600080fd5b818501915085601f83011261285e57600080fd5b81358181111561286d57600080fd5b86602082850101111561287f57600080fd5b60209290920196919550909350505050565b600080600080600080600080600060c08a8c0312156128af57600080fd5b8935985060208a01356001600160401b03808211156128cd57600080fd5b6128d98d838e0161261b565b909a50985060408c01359150808211156128f257600080fd5b6128fe8d838e0161261b565b909850965060608c013591508082111561291757600080fd5b6129238d838e0161261b565b909650945060808c013591508082111561293c57600080fd5b6129488d838e016126ca565b935060a08c013591508082111561295e57600080fd5b5061296b8c828d016126ca565b9150509295985092959850929598565b600080600080600060a0868803121561299357600080fd5b853561299e816123f5565b945060208601356129ae816123f5565b935060408601356001600160401b03808211156129ca57600080fd5b6129d689838a016126ca565b945060608801359150808211156129ec57600080fd5b6129f889838a016126ca565b93506080880135915080821115612a0e57600080fd5b50612a1b888289016124a6565b9150509295509295909350565b80151581146112cf57600080fd5b600060208284031215612a4857600080fd5b8135611e0b81612a28565b600080600080600060a08688031215612a6b57600080fd5b8535612a76816123f5565b94506020860135612a86816123f5565b9350604086013592506060860135915060808601356001600160401b03811115612aaf57600080fd5b612a1b888289016124a6565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612b5c57612b5c612b32565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600081518084526020808501945080840160005b83811015612bb757815187529582019590820190600101612b9b565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b82811015612c045781516001600160a01b031684529284019290840190600101612bdf565b50505083810382850152612c188186612b87565b9695505050505050565b60006020808385031215612c3557600080fd5b82516001600160401b03811115612c4b57600080fd5b8301601f81018513612c5c57600080fd5b8051612c6a6126eb826126a7565b81815260059190911b82018301908381019087831115612c8957600080fd5b928401925b82841015612ca757835182529284019290840190612c8e565b979650505050505050565b600082821015612cc457612cc4612b32565b500390565b6001600160a01b0385811682528416602082015260a060408201819052600090612cf590830185612b87565b8281036060840152612d078185612b87565b838103608090940193909352505060008152602001949350505050565b6001600160a01b03858116825284166020820152608060408201819052600090612d5090830185612b87565b8281036060840152612ca78185612b87565b600060208083528351808285015260005b81811015612d8f57858101830151858201604001528201612d73565b81811115612da1576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115612e1857612e18612b32565b500190565b805161241581612a28565b600060208284031215612e3a57600080fd5b8151611e0b81612a28565b805160ff8116811461241557600080fd5b60006101408284031215612e6957600080fd5b612e7161244d565b612e7a83612e1d565b8152612e8860208401612e45565b6020820152612e9960408401612e45565b6040820152612eaa60608401612e45565b6060820152612ebb60808401612e45565b6080820152612ecc60a08401612e45565b60a0820152612edd60c08401612e45565b60c0820152612eee60e08401612e45565b60e0820152610100612f01818501612e45565b90820152610120612f13848201612e45565b908201529392505050565b600060208284031215612f3057600080fd5b8151611e0b816123f5565b600061010060018060a01b038b16835260208a8185015260408281860152612f658386018c612b87565b8581036060878101919091528b51808352848d019285019060005b8181101561300a5784518051151584528781015160ff90811689860152878201518116888601528582015181168686015260808083015182169086015260a08083015182169086015260c08083015182169086015260e0808301518216908601528982015181168a8601526101209182015116908401529386019361014090920191600101612f80565b5050878103608089015261301e818d612b87565b9550505050505082810360a08401526130378187612b87565b905082810360c084015261304b8186612b87565b905082810360e084015261305f8185612b87565b9b9a5050505050505050505050565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122053b6fa76f6b1a1cacb7c6379ee234c5f6d5002fe17ceacfeb25bce241b01458e64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c80638129fc1c1161010f578063bc197c81116100a2578063f23a6e6111610071578063f23a6e6114610467578063f2fde38b14610486578063fd501c6d14610499578063ff47b9f5146104ad57600080fd5b8063bc197c811461040d578063bedb86fb1461042c578063cc9b4ccd1461043f578063d46b93301461045357600080fd5b806390528e11116100de57806390528e11146103c95780639c54df64146103dd578063b831c56e146103f0578063b8a812e6146103fa57600080fd5b80638129fc1c1461039e5780638a902f8b146103a65780638cdcc4b4146103b05780638da5cb5b146103b857600080fd5b8063377e11e011610187578063715018a611610156578063715018a61461035c5780637e2eb016146103645780638025ee281461037757806380a597071461038a57600080fd5b8063377e11e014610317578063541825a01461032a5780635c975abb1461033d578063704802751461034957600080fd5b80631b3a57d0116101c35780631b3a57d014610298578063210184b4146102ab5780632463a55a146102d757806324d7806c146102ea57600080fd5b806301ffc9a7146101f55780630b0bbf691461021d578063150b7a021461024c5780631785f53c14610283575b600080fd5b6102086102033660046123cb565b6104c0565b60405190151581526020015b60405180910390f35b61023e61022b36600461241a565b61019a6020526000908152604090205481565b604051908152602001610214565b61026a61025a366004612515565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610214565b61029661029136600461241a565b6104f7565b005b6102966102a6366004612580565b61054c565b610196546102bf906001600160a01b031681565b6040516001600160a01b039091168152602001610214565b6102966102e5366004612599565b610590565b6102086102f836600461241a565b6001600160a01b0316600090815261015f602052604090205460ff1690565b610296610325366004612666565b610643565b610296610338366004612735565b6106e5565b61012d5460ff16610208565b61029661035736600461241a565b610e4e565b610296610e9d565b610296610372366004612820565b610ed3565b610296610385366004612891565b610f4d565b610193546102bf906001600160a01b031681565b610296611258565b61023e61019b5481565b6102086112d2565b60fb546001600160a01b03166102bf565b610195546102bf906001600160a01b031681565b6102966103eb366004612666565b61135c565b61023e61019c5481565b610296610408366004612580565b6113f9565b61026a61041b36600461297b565b63bc197c8160e01b95945050505050565b61029661043a366004612a36565b61156b565b610197546102bf906001600160a01b031681565b610192546102bf906001600160a01b031681565b61026a610475366004612a53565b63f23a6e6160e01b95945050505050565b61029661049436600461241a565b6115bf565b610194546102bf906001600160a01b031681565b6102966104bb366004612580565b611657565b60006001600160e01b03198216630271189760e51b14806104f157506301ffc9a760e01b6001600160e01b03198316145b92915050565b60fb546001600160a01b0316331461052a5760405162461bcd60e51b815260040161052190612abb565b60405180910390fd5b6001600160a01b0316600090815261015f60205260409020805460ff19169055565b33600090815261015f602052604090205460ff168061056e575061056e6117db565b61058a5760405162461bcd60e51b815260040161052190612af0565b61019b55565b33600090815261015f602052604090205460ff16806105b257506105b26117db565b6105ce5760405162461bcd60e51b815260040161052190612af0565b61019280546001600160a01b03199081166001600160a01b03988916179091556101938054821696881696909617909555610194805486169487169490941790935561019580548516928616929092179091556101968054841691851691909117905561019780549092169216919091179055565b60fb546001600160a01b0316331461066d5760405162461bcd60e51b815260040161052190612abb565b60005b818110156106e057600061015f600085858581811061069157610691612b1c565b90506020020160208101906106a6919061241a565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806106d881612b48565b915050610670565b505050565b33600090815261015f602052604090205460ff168061070757506107076117db565b6107235760405162461bcd60e51b815260040161052190612af0565b82518451146107655760405162461bcd60e51b815260206004820152600e60248201526d42616420534120416d6f756e747360901b6044820152606401610521565b80518251146107a75760405162461bcd60e51b815260206004820152600e60248201526d42616420534120416d6f756e747360901b6044820152606401610521565b851561081557610192546040516340c10f1960e01b81526001600160a01b03898116600483015260248201899052909116906340c10f1990604401600060405180830381600087803b1580156107fc57600080fd5b505af1158015610810573d6000803e3d6000fd5b505050505b60005b85518110156108fa57600086828151811061083557610835612b1c565b60200260200101519050806000141561087f5760405162461bcd60e51b815260206004820152600c60248201526b109859081d1bdad95b881a5960a21b6044820152606401610521565b61019354604051632142170760e11b81526001600160a01b03909116906342842e0e906108b49030908d908690600401612b63565b600060405180830381600087803b1580156108ce57600080fd5b505af11580156108e2573d6000803e3d6000fd5b505050505080806108f290612b48565b915050610818565b50835115610ba057600084516001600160401b0381111561091d5761091d612437565b604051908082528060200260200182016040528015610946578160200160208202803683370190505b50905060005b8551811015610992573082828151811061096857610968612b1c565b6001600160a01b03909216602092830291909101909101528061098a81612b48565b91505061094c565b50610194546040516313849cfd60e21b81526000916001600160a01b031690634e1273f4906109c79085908a90600401612bc2565b60006040518083038186803b1580156109df57600080fd5b505afa1580156109f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a1b9190810190612c22565b905060005b8651811015610b33576000828281518110610a3d57610a3d612b1c565b60200260200101519050868281518110610a5957610a59612b1c565b6020026020010151811015610b20576101945488516001600160a01b03909116906351416019908a9085908110610a9257610a92612b1c565b6020026020010151838a8681518110610aad57610aad612b1c565b6020026020010151610abf9190612cb2565b6040516001600160e01b031960e085901b168152600481019290925261ffff166024820152306044820152606401600060405180830381600087803b158015610b0757600080fd5b505af1158015610b1b573d6000803e3d6000fd5b505050505b5080610b2b81612b48565b915050610a20565b5061019454604051631759616b60e11b81526001600160a01b0390911690632eb2c2d690610b6b9030908d908b908b90600401612cc9565b600060405180830381600087803b158015610b8557600080fd5b505af1158015610b99573d6000803e3d6000fd5b5050505050505b815115610e4557600082516001600160401b03811115610bc257610bc2612437565b604051908082528060200260200182016040528015610beb578160200160208202803683370190505b50905060005b8351811015610c375730828281518110610c0d57610c0d612b1c565b6001600160a01b039092166020928302919091019091015280610c2f81612b48565b915050610bf1565b50610195546040516313849cfd60e21b81526000916001600160a01b031690634e1273f490610c6c9085908890600401612bc2565b60006040518083038186803b158015610c8457600080fd5b505afa158015610c98573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cc09190810190612c22565b905060005b8451811015610dd8576000828281518110610ce257610ce2612b1c565b60200260200101519050848281518110610cfe57610cfe612b1c565b6020026020010151811015610dc5576101955486516001600160a01b039091169063e7d3fe6b90889085908110610d3757610d37612b1c565b602002602001015183888681518110610d5257610d52612b1c565b6020026020010151610d649190612cb2565b6040516001600160e01b031960e085901b168152600481019290925261ffff166024820152306044820152606401600060405180830381600087803b158015610dac57600080fd5b505af1158015610dc0573d6000803e3d6000fd5b505050505b5080610dd081612b48565b915050610cc5565b5061019554604051632bda09e960e21b81526001600160a01b039091169063af6827a490610e109030908d9089908990600401612d24565b600060405180830381600087803b158015610e2a57600080fd5b505af1158015610e3e573d6000803e3d6000fd5b5050505050505b50505050505050565b60fb546001600160a01b03163314610e785760405162461bcd60e51b815260040161052190612abb565b6001600160a01b0316600090815261015f60205260409020805460ff19166001179055565b60fb546001600160a01b03163314610ec75760405162461bcd60e51b815260040161052190612abb565b610ed160006117ff565b565b33600090815261015f602052604090205460ff1680610ef55750610ef56117db565b610f115760405162461bcd60e51b815260040161052190612af0565b6000808080808080610f25888a018a612735565b9650965096509650965096509650610f42878787878787876106e5565b505050505050505050565b333214610f8b5760405162461bcd60e51b815260206004820152600c60248201526b4e6f20636f6e74726163747360a01b6044820152606401610521565b61012d5460ff1615610fd25760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610521565b610fda6112d2565b6110265760405162461bcd60e51b815260206004820152601e60248201527f52696674526f6f743a20436f6e747261637473206172656e27742073657400006044820152606401610521565b8483146110665760405162461bcd60e51b815260206004820152600e60248201526d426164205341206c656e6774687360901b6044820152606401610521565b80518251146110a55760405162461bcd60e51b815260206004820152600b60248201526a426164206c656e6774687360a81b6044820152606401610521565b600a8711156110f65760405162461bcd60e51b815260206004820152601960248201527f746f6f206d616e79204e46547320746f207472616e73666572000000000000006044820152606401610521565b61019b5461019c5410156111435760405162461bcd60e51b8152602060048201526014602482015273139bdd08195b9bdd59da0811d4081cdd185ad95960621b6044820152606401610521565b60006111e88a8a8a8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808e0282810182019093528d82529093508d92508c91829185019084908082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152508a92508991506118519050565b610196546040516309813cdd60e31b81529192506001600160a01b031690634c09e6e89061121a908490600401612d62565b600060405180830381600087803b15801561123457600080fd5b505af1158015611248573d6000803e3d6000fd5b5050505050505050505050505050565b600054610100900460ff166112735760005460ff1615611277565b303b155b6112935760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff161580156112b5576000805461ffff19166101011790555b6112bd611d88565b80156112cf576000805461ff00191690555b50565b610192546000906001600160a01b0316158015906112fb5750610193546001600160a01b031615155b80156113125750610194546001600160a01b031615155b80156113295750610196546001600160a01b031615155b80156113405750610197546001600160a01b031615155b80156113575750610195546001600160a01b031615155b905090565b60fb546001600160a01b031633146113865760405162461bcd60e51b815260040161052190612abb565b60005b818110156106e057600161015f60008585858181106113aa576113aa612b1c565b90506020020160208101906113bf919061241a565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806113f181612b48565b915050611389565b6000811161143f5760405162461bcd60e51b815260206004820152601360248201527226bab9ba1039ba30b5b29039b7b6b29023a81760691b6044820152606401610521565b8061019c60008282546114529190612e05565b909155505033600090815261019a602052604081208054839290611477908490612e05565b90915550611489905061019833611ded565b61149b5761149961019833611e12565b505b610192546040516323b872dd60e01b81526000916001600160a01b0316906323b872dd906114d190339030908790600401612b63565b602060405180830381600087803b1580156114eb57600080fd5b505af11580156114ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115239190612e28565b9050806115675760405162461bcd60e51b815260206004820152601260248201527111d4081b9bdd081d1c985b9cd9995c9c995960721b6044820152606401610521565b5050565b33600090815261015f602052604090205460ff168061158d575061158d6117db565b6115a95760405162461bcd60e51b815260040161052190612af0565b80156115b7576112cf611e27565b6112cf611ec1565b60fb546001600160a01b031633146115e95760405162461bcd60e51b815260040161052190612abb565b6001600160a01b03811661164e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610521565b6112cf816117ff565b33600090815261019a6020526040902054818110156116b15760405162461bcd60e51b8152602060048201526016602482015275546f6f206d75636820475020746f20756e7374616b6560501b6044820152606401610521565b8161019c60008282546116c49190612cb2565b909155505033600090815261019a6020526040812080548492906116e9908490612cb2565b909155505033600090815261019a60205260409020546117115761170f61019833611f3d565b505b6101925460405163a9059cbb60e01b8152336004820152602481018490526000916001600160a01b03169063a9059cbb90604401602060405180830381600087803b15801561175f57600080fd5b505af1158015611773573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117979190612e28565b9050806106e05760405162461bcd60e51b815260206004820152601260248201527111d4081b9bdd081d1c985b9cd9995c9c995960721b6044820152606401610521565b6000336117f060fb546001600160a01b031690565b6001600160a01b031614905090565b60fb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b606086156118bf5761019254604051632770a7eb60e21b8152336004820152602481018990526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b1580156118a657600080fd5b505af11580156118ba573d6000803e3d6000fd5b505050505b600086516001600160401b038111156118da576118da612437565b60405190808252806020026020018201604052801561195957816020015b604080516101408101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082015282526000199092019101816118f85790505b50905060005b8751811015611c6757600088828151811061197c5761197c612b1c565b6020026020010151905080600014156119c45760405162461bcd60e51b815260206004820152600a6024820152691098590815db9908125160b21b6044820152606401610521565b610193546040516394e5684760e01b8152600481018390526001600160a01b03909116906394e568479060240161014060405180830381600087803b158015611a0c57600080fd5b505af1158015611a20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a449190612e56565b838381518110611a5657611a56612b1c565b602090810291909101015261019754610193546040516331a9108f60e11b8152600481018490526001600160a01b039283169290911690636352211e90602401602060405180830381600087803b158015611ab057600080fd5b505af1158015611ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ae89190612f1e565b6001600160a01b0316148015611b7657506101975460405163f04d65fd60e01b8152600481018390526001600160a01b039091169063f04d65fd9060240160206040518083038186803b158015611b3e57600080fd5b505afa158015611b52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b769190612e28565b15611bec5761019354610197546040516323b872dd60e01b81526001600160a01b03928316926323b872dd92611bb59291169030908690600401612b63565b600060405180830381600087803b158015611bcf57600080fd5b505af1158015611be3573d6000803e3d6000fd5b50505050611c54565b61019354604051632142170760e11b81526001600160a01b03909116906342842e0e90611c2190339030908690600401612b63565b600060405180830381600087803b158015611c3b57600080fd5b505af1158015611c4f573d6000803e3d6000fd5b505050505b5080611c5f81612b48565b91505061195f565b50855115611cd95761019454604051631759616b60e11b81526001600160a01b0390911690632eb2c2d690611ca690339030908b908b90600401612cc9565b600060405180830381600087803b158015611cc057600080fd5b505af1158015611cd4573d6000803e3d6000fd5b505050505b835115611d4a5761019554604051632bda09e960e21b81526001600160a01b039091169063af6827a490611d17903390309089908990600401612d24565b600060405180830381600087803b158015611d3157600080fd5b505af1158015611d45573d6000803e3d6000fd5b505050505b6000338989848a8a8a8a604051602001611d6b989796959493929190612f3b565b60408051808303601f190181529190529998505050505050505050565b600054610100900460ff16611da35760005460ff1615611da7565b303b155b611dc35760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff16158015611de5576000805461ffff19166101011790555b6112bd611f52565b6001600160a01b038116600090815260018301602052604081205415155b9392505050565b6000611e0b836001600160a01b038416611fb7565b61012d5460ff1615611e6e5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610521565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611ea43390565b6040516001600160a01b03909116815260200160405180910390a1565b61012d5460ff16611f0b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610521565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611ea4565b6000611e0b836001600160a01b038416612006565b600054610100900460ff16611f6d5760005460ff1615611f71565b303b155b611f8d5760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff16158015611faf576000805461ffff19166101011790555b6112bd6120f9565b6000818152600183016020526040812054611ffe575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104f1565b5060006104f1565b600081815260018301602052604081205480156120ef57600061202a600183612cb2565b855490915060009061203e90600190612cb2565b90508181146120a357600086600001828154811061205e5761205e612b1c565b906000526020600020015490508087600001848154811061208157612081612b1c565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806120b4576120b461306e565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104f1565b60009150506104f1565b600054610100900460ff166121145760005460ff1615612118565b303b155b6121345760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff16158015612156576000805461ffff19166101011790555b61215e612192565b6121666121f7565b61216e612226565b6a22bdd88fed9efc6a00000061019b5580156112cf576000805461ff001916905550565b600054610100900460ff166121ad5760005460ff16156121b1565b303b155b6121cd5760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff161580156121ef576000805461ffff19166101011790555b6112bd61225d565b600054610100900460ff1661221e5760405162461bcd60e51b815260040161052190613084565b610ed16122d2565b600054610100900460ff1661224d5760405162461bcd60e51b815260040161052190613084565b6122556122d2565b61221e6122d2565b600054610100900460ff166122785760005460ff161561227c565b303b155b6122985760405162461bcd60e51b815260040161052190612db7565b600054610100900460ff161580156122ba576000805461ffff19166101011790555b6122c26122f9565b6122ca612330565b6112bd611e27565b600054610100900460ff16610ed15760405162461bcd60e51b815260040161052190613084565b600054610100900460ff166123205760405162461bcd60e51b815260040161052190613084565b6123286122d2565b610ed1612367565b600054610100900460ff166123575760405162461bcd60e51b815260040161052190613084565b61235f6122d2565b610ed1612397565b600054610100900460ff1661238e5760405162461bcd60e51b815260040161052190613084565b610ed1336117ff565b600054610100900460ff166123be5760405162461bcd60e51b815260040161052190613084565b61012d805460ff19169055565b6000602082840312156123dd57600080fd5b81356001600160e01b031981168114611e0b57600080fd5b6001600160a01b03811681146112cf57600080fd5b8035612415816123f5565b919050565b60006020828403121561242c57600080fd5b8135611e0b816123f5565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561247057612470612437565b60405290565b604051601f8201601f191681016001600160401b038111828210171561249e5761249e612437565b604052919050565b600082601f8301126124b757600080fd5b81356001600160401b038111156124d0576124d0612437565b6124e3601f8201601f1916602001612476565b8181528460208386010111156124f857600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561252b57600080fd5b8435612536816123f5565b93506020850135612546816123f5565b92506040850135915060608501356001600160401b0381111561256857600080fd5b612574878288016124a6565b91505092959194509250565b60006020828403121561259257600080fd5b5035919050565b60008060008060008060c087890312156125b257600080fd5b86356125bd816123f5565b955060208701356125cd816123f5565b945060408701356125dd816123f5565b935060608701356125ed816123f5565b925060808701356125fd816123f5565b915060a087013561260d816123f5565b809150509295509295509295565b60008083601f84011261262d57600080fd5b5081356001600160401b0381111561264457600080fd5b6020830191508360208260051b850101111561265f57600080fd5b9250929050565b6000806020838503121561267957600080fd5b82356001600160401b0381111561268f57600080fd5b61269b8582860161261b565b90969095509350505050565b60006001600160401b038211156126c0576126c0612437565b5060051b60200190565b600082601f8301126126db57600080fd5b813560206126f06126eb836126a7565b612476565b82815260059290921b8401810191818101908684111561270f57600080fd5b8286015b8481101561272a5780358352918301918301612713565b509695505050505050565b600080600080600080600060e0888a03121561275057600080fd5b6127598861240a565b96506020880135955060408801356001600160401b038082111561277c57600080fd5b6127888b838c016126ca565b965060608a013591508082111561279e57600080fd5b6127aa8b838c016126ca565b955060808a01359150808211156127c057600080fd5b6127cc8b838c016126ca565b945060a08a01359150808211156127e257600080fd5b6127ee8b838c016126ca565b935060c08a013591508082111561280457600080fd5b506128118a828b016126ca565b91505092959891949750929550565b6000806020838503121561283357600080fd5b82356001600160401b038082111561284a57600080fd5b818501915085601f83011261285e57600080fd5b81358181111561286d57600080fd5b86602082850101111561287f57600080fd5b60209290920196919550909350505050565b600080600080600080600080600060c08a8c0312156128af57600080fd5b8935985060208a01356001600160401b03808211156128cd57600080fd5b6128d98d838e0161261b565b909a50985060408c01359150808211156128f257600080fd5b6128fe8d838e0161261b565b909850965060608c013591508082111561291757600080fd5b6129238d838e0161261b565b909650945060808c013591508082111561293c57600080fd5b6129488d838e016126ca565b935060a08c013591508082111561295e57600080fd5b5061296b8c828d016126ca565b9150509295985092959850929598565b600080600080600060a0868803121561299357600080fd5b853561299e816123f5565b945060208601356129ae816123f5565b935060408601356001600160401b03808211156129ca57600080fd5b6129d689838a016126ca565b945060608801359150808211156129ec57600080fd5b6129f889838a016126ca565b93506080880135915080821115612a0e57600080fd5b50612a1b888289016124a6565b9150509295509295909350565b80151581146112cf57600080fd5b600060208284031215612a4857600080fd5b8135611e0b81612a28565b600080600080600060a08688031215612a6b57600080fd5b8535612a76816123f5565b94506020860135612a86816123f5565b9350604086013592506060860135915060808601356001600160401b03811115612aaf57600080fd5b612a1b888289016124a6565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612b5c57612b5c612b32565b5060010190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600081518084526020808501945080840160005b83811015612bb757815187529582019590820190600101612b9b565b509495945050505050565b604080825283519082018190526000906020906060840190828701845b82811015612c045781516001600160a01b031684529284019290840190600101612bdf565b50505083810382850152612c188186612b87565b9695505050505050565b60006020808385031215612c3557600080fd5b82516001600160401b03811115612c4b57600080fd5b8301601f81018513612c5c57600080fd5b8051612c6a6126eb826126a7565b81815260059190911b82018301908381019087831115612c8957600080fd5b928401925b82841015612ca757835182529284019290840190612c8e565b979650505050505050565b600082821015612cc457612cc4612b32565b500390565b6001600160a01b0385811682528416602082015260a060408201819052600090612cf590830185612b87565b8281036060840152612d078185612b87565b838103608090940193909352505060008152602001949350505050565b6001600160a01b03858116825284166020820152608060408201819052600090612d5090830185612b87565b8281036060840152612ca78185612b87565b600060208083528351808285015260005b81811015612d8f57858101830151858201604001528201612d73565b81811115612da1576000604083870101525b50601f01601f1916929092016040019392505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60008219821115612e1857612e18612b32565b500190565b805161241581612a28565b600060208284031215612e3a57600080fd5b8151611e0b81612a28565b805160ff8116811461241557600080fd5b60006101408284031215612e6957600080fd5b612e7161244d565b612e7a83612e1d565b8152612e8860208401612e45565b6020820152612e9960408401612e45565b6040820152612eaa60608401612e45565b6060820152612ebb60808401612e45565b6080820152612ecc60a08401612e45565b60a0820152612edd60c08401612e45565b60c0820152612eee60e08401612e45565b60e0820152610100612f01818501612e45565b90820152610120612f13848201612e45565b908201529392505050565b600060208284031215612f3057600080fd5b8151611e0b816123f5565b600061010060018060a01b038b16835260208a8185015260408281860152612f658386018c612b87565b8581036060878101919091528b51808352848d019285019060005b8181101561300a5784518051151584528781015160ff90811689860152878201518116888601528582015181168686015260808083015182169086015260a08083015182169086015260c08083015182169086015260e0808301518216908601528982015181168a8601526101209182015116908401529386019361014090920191600101612f80565b5050878103608089015261301e818d612b87565b9550505050505082810360a08401526130378187612b87565b905082810360c084015261304b8186612b87565b905082810360e084015261305f8185612b87565b9b9a5050505050505050505050565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea264697066735822122053b6fa76f6b1a1cacb7c6379ee234c5f6d5002fe17ceacfeb25bce241b01458e64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2787,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2790,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6549,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7087,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4405,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4346,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6838,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2665,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 2779,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2875,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "_paused",
        "offset": 0,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 2966,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12019,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "admins",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12179,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 18571,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "gp",
        "offset": 0,
        "slot": "402",
        "type": "t_contract(IGP)19210"
      },
      {
        "astId": 18574,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "wnd",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IWnDRoot)20426"
      },
      {
        "astId": 18577,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "sacrificialAlter",
        "offset": 0,
        "slot": "404",
        "type": "t_contract(ISacrificialAlter)19258"
      },
      {
        "astId": 18580,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "consumables",
        "offset": 0,
        "slot": "405",
        "type": "t_contract(IConsumables)19050"
      },
      {
        "astId": 18583,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "rootTunnel",
        "offset": 0,
        "slot": "406",
        "type": "t_contract(IRootTunnel)24320"
      },
      {
        "astId": 18586,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "oldTrainingGrounds",
        "offset": 0,
        "slot": "407",
        "type": "t_contract(IOldTrainingGrounds)17580"
      },
      {
        "astId": 18589,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "addressesStaked",
        "offset": 0,
        "slot": "408",
        "type": "t_struct(AddressSet)7412_storage"
      },
      {
        "astId": 18593,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "addressToGPStaked",
        "offset": 0,
        "slot": "410",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 18595,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "amountNeededToOpenPortal",
        "offset": 0,
        "slot": "411",
        "type": "t_uint256"
      },
      {
        "astId": 18597,
        "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
        "label": "amountCurrentlyStaked",
        "offset": 0,
        "slot": "412",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConsumables)19050": {
        "encoding": "inplace",
        "label": "contract IConsumables",
        "numberOfBytes": "20"
      },
      "t_contract(IGP)19210": {
        "encoding": "inplace",
        "label": "contract IGP",
        "numberOfBytes": "20"
      },
      "t_contract(IOldTrainingGrounds)17580": {
        "encoding": "inplace",
        "label": "contract IOldTrainingGrounds",
        "numberOfBytes": "20"
      },
      "t_contract(IRootTunnel)24320": {
        "encoding": "inplace",
        "label": "contract IRootTunnel",
        "numberOfBytes": "20"
      },
      "t_contract(ISacrificialAlter)19258": {
        "encoding": "inplace",
        "label": "contract ISacrificialAlter",
        "numberOfBytes": "20"
      },
      "t_contract(IWnDRoot)20426": {
        "encoding": "inplace",
        "label": "contract IWnDRoot",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)7412_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 7411,
            "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7111_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7111_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 7106,
            "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7110,
            "contract": "contracts/wnd/riftroot/RiftRoot.sol:RiftRoot",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}