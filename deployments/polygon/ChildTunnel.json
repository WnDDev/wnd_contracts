{
  "address": "0xE1B5A572eE3B9C348189bCe0D98Aa2F7bcb9F00b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxChild",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxChild",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxRootTunnel",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "messageHandler",
      "outputs": [
        {
          "internalType": "contract IMessageHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stateId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "rootMessageSender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "processMessageFromRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "sendMessageToRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fxRootTunnel",
          "type": "address"
        }
      ],
      "name": "setFxRootTunnel",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_messageHandlerAddress",
          "type": "address"
        }
      ],
      "name": "setMessageHandler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldPause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ed4425e7c110a54282c12eef8c426fc5a2ee40b867fb28571475a8c1eb35195",
  "receipt": {
    "to": null,
    "from": "0xC7dEFA20Ec54917669f29e15D1ACB7c121b4780c",
    "contractAddress": "0xE1B5A572eE3B9C348189bCe0D98Aa2F7bcb9F00b",
    "transactionIndex": 47,
    "gasUsed": "919553",
    "logsBloom": "0x
    "blockHash": "0x136233d0e29cc6dc42eb1f14f10d6cfd5598b678961a6b49c4304ab2a473efdb",
    "transactionHash": "0x4ed4425e7c110a54282c12eef8c426fc5a2ee40b867fb28571475a8c1eb35195",
    "logs": [
      {
        "transactionIndex": 47,
        "blockNumber": 27902267,
        "transactionHash": "0x4ed4425e7c110a54282c12eef8c426fc5a2ee40b867fb28571475a8c1eb35195",
        "address": "0xE1B5A572eE3B9C348189bCe0D98Aa2F7bcb9F00b",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c"
        ],
        "data": "0x",
        "logIndex": 180,
        "blockHash": "0x136233d0e29cc6dc42eb1f14f10d6cfd5598b678961a6b49c4304ab2a473efdb"
      },
      {
        "transactionIndex": 47,
        "blockNumber": 27902267,
        "transactionHash": "0x4ed4425e7c110a54282c12eef8c426fc5a2ee40b867fb28571475a8c1eb35195",
        "address": "0xE1B5A572eE3B9C348189bCe0D98Aa2F7bcb9F00b",
        "topics": [
          "0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258"
        ],
        "data": "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c",
        "logIndex": 181,
        "blockHash": "0x136233d0e29cc6dc42eb1f14f10d6cfd5598b678961a6b49c4304ab2a473efdb"
      },
      {
        "transactionIndex": 47,
        "blockNumber": 27902267,
        "transactionHash": "0x4ed4425e7c110a54282c12eef8c426fc5a2ee40b867fb28571475a8c1eb35195",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c",
          "0x000000000000000000000000e77bbfd8ed65720f187efdd109e38d75eaca7385"
        ],
        "data": "0x000000000000000000000000000000000000000000000000009302c9412ce1ec00000000000000000000000000000000000000000000008c33e3a6782030bd770000000000000000000000000000000000000000000004ed070af478c179128500000000000000000000000000000000000000000000008c3350a3aedf03db8b0000000000000000000000000000000000000000000004ed079df74202a5f471",
        "logIndex": 182,
        "blockHash": "0x136233d0e29cc6dc42eb1f14f10d6cfd5598b678961a6b49c4304ab2a473efdb"
      }
    ],
    "blockNumber": 27902267,
    "cumulativeGasUsed": "7654534",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8397259c983751DAf40400790063935a11afa28a"
  ],
  "numDeployments": 1,
  "solcInputHash": "b27224762b700ac3dafd5126496854c7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxChild\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxChild\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxRootTunnel\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageHandler\",\"outputs\":[{\"internalType\":\"contract IMessageHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"rootMessageSender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"processMessageFromRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"sendMessageToRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fxRootTunnel\",\"type\":\"address\"}],\"name\":\"setFxRootTunnel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_messageHandlerAddress\",\"type\":\"address\"}],\"name\":\"setMessageHandler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wnd/tunnels/ChildTunnel.sol\":\"ChildTunnel\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// IFxMessageProcessor represents interface to process message\\ninterface IFxMessageProcessor {\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external;\\n}\\n\\n/**\\n* @notice Mock child tunnel contract to receive and send message from L2\\n*/\\nabstract contract FxBaseChildTunnel is IFxMessageProcessor{\\n    // MessageTunnel on L1 will get data from this event\\n    event MessageSent(bytes message);\\n\\n    // fx child\\n    address public fxChild;\\n\\n    // fx root tunnel\\n    address public fxRootTunnel;\\n\\n    constructor(address _fxChild) {\\n        fxChild = _fxChild;\\n    }\\n\\n    // Sender must be fxRootTunnel in case of ERC20 tunnel\\n    modifier validateSender(address sender) {\\n        require(sender == fxRootTunnel, \\\"FxBaseChildTunnel: INVALID_SENDER_FROM_ROOT\\\");\\n        _;\\n    }\\n\\n    // set fxRootTunnel if not set already\\n    function setFxRootTunnel(address _fxRootTunnel) external {\\n        require(fxRootTunnel == address(0x0), \\\"FxBaseChildTunnel: ROOT_TUNNEL_ALREADY_SET\\\");\\n        fxRootTunnel = _fxRootTunnel;\\n    }\\n\\n    function processMessageFromRoot(uint256 stateId, address rootMessageSender, bytes calldata data) external override {\\n        require(msg.sender == fxChild, \\\"FxBaseChildTunnel: INVALID_SENDER\\\");\\n        _processMessageFromRoot(stateId, rootMessageSender, data);\\n    }\\n\\n    /**\\n     * @notice Emit message that can be received on Root Tunnel\\n     * @dev Call the internal function when need to emit message\\n     * @param message bytes message that will be sent to Root Tunnel\\n     * some message examples -\\n     *   abi.encode(tokenId);\\n     *   abi.encode(tokenId, tokenMetadata);\\n     *   abi.encode(messageType, messageData);\\n     */\\n    function _sendMessageToRoot(bytes memory message) internal {\\n        emit MessageSent(message);\\n    }\\n\\n    /**\\n     * @notice Process message received from Root Tunnel\\n     * @dev function needs to be implemented to handle message as per requirement\\n     * This is called by onStateReceive function.\\n     * Since it is called via a system call, any event will not be emitted during its execution.\\n     * @param stateId unique state id\\n     * @param sender root message sender\\n     * @param message bytes message that was sent from Root Tunnel\\n     */\\n    function _processMessageFromRoot(uint256 stateId, address sender, bytes memory message) virtual internal;\\n}\\n\",\"keccak256\":\"0xf5b498e3d85967e8bedcfa7f10078d6018b6168eb56926d1b18a526e68e1c467\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/shared/Adminable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Utilities.sol\\\";\\n\\ncontract Adminable is Utilities {\\n\\n    mapping(address => bool) private admins;\\n\\n    function addAdmin(address _address) external onlyOwner {\\n        require(_address.code.length > 0, \\\"must be a contract\\\");\\n        admins[_address] = true;\\n    }\\n\\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\\n        uint256 len = _addresses.length;\\n        for(uint256 i = 0; i < len; i++) {\\n            require(_addresses[i].code.length > 0, \\\"must be a contract\\\");\\n            admins[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address _address) external onlyOwner {\\n        admins[_address] = false;\\n    }\\n\\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\\n        uint256 len = _addresses.length;\\n        for(uint256 i = 0; i < len; i++) {\\n            admins[_addresses[i]] = false;\\n        }\\n    }\\n\\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\\n        if(_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function isAdmin(address _address) public view returns(bool) {\\n        return admins[_address];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(admins[msg.sender] || isOwner(), \\\"Not admin or owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x113937a5d75f06ee09118e69b30ad952bb59a26fef8d25d41f0f406c261581cc\",\"license\":\"MIT\"},\"contracts/shared/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract Utilities is Ownable, Pausable {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"0 address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroLength(uint[] memory _array) {\\n        require(_array.length > 0, \\\"Empty array\\\");\\n        _;\\n    }\\n\\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\\n        require(_array1.length == _array2.length, \\\"Unequal lengths\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        /* solhint-disable avoid-tx-origin */\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    function isOwner() internal view returns(bool) {\\n        return owner() == msg.sender;\\n    }\\n}\",\"keccak256\":\"0x74fc1f86dde49f4d0e288196970b6aedc51cb71c5f8b774f66db2d336eac670b\",\"license\":\"MIT\"},\"contracts/wnd/tunnels/ChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@maticnetwork/fx-portal/contracts/tunnel/FxBaseChildTunnel.sol\\\";\\n\\nimport \\\"../../shared/Adminable.sol\\\";\\nimport \\\"./IMessageHandler.sol\\\";\\nimport \\\"./IChildTunnel.sol\\\";\\n\\ncontract ChildTunnel is IChildTunnel, FxBaseChildTunnel, Adminable {\\n\\n    IMessageHandler public messageHandler;\\n\\n    constructor(\\n        address _fxChild\\n    ) FxBaseChildTunnel(_fxChild) {\\n        _pause();\\n    }\\n\\n    function setMessageHandler(address _messageHandlerAddress) external onlyAdminOrOwner {\\n        require(_messageHandlerAddress != address(0), \\\"invalid message handler\\\");\\n        messageHandler = IMessageHandler(_messageHandlerAddress);\\n    }\\n\\n    function sendMessageToRoot(bytes calldata _message) external override onlyAdminOrOwner {\\n        require(address(messageHandler) != address(0), \\\"Message handler not set\\\");\\n        _sendMessageToRoot(_message);\\n    }\\n\\n    // Purposefully exclude the first argument as it is not needed.\\n    function _processMessageFromRoot(\\n        uint256,\\n        address sender,\\n        bytes memory data\\n    ) internal override validateSender(sender) {\\n        messageHandler.handleMessage(data);\\n    }\\n}\",\"keccak256\":\"0xd3ab9e24aca6866dd3394d63cef3dd1d1025e7583993854e1c10613ecf83ac2e\",\"license\":\"MIT\"},\"contracts/wnd/tunnels/IChildTunnel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IChildTunnel {\\n\\n    // Sends the bytes to the root (L1).\\n    // Admin only.\\n    function sendMessageToRoot(bytes calldata _data) external;\\n}\",\"keccak256\":\"0x914df3294d4301ef567cc573dac0114b91d5510c314876adb420ef9c513a994d\",\"license\":\"MIT\"},\"contracts/wnd/tunnels/IMessageHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IMessageHandler {\\n\\n    // Handles the given message from the other bridge\\n    // Admin only.\\n    function handleMessage(bytes calldata _data) external;\\n}\",\"keccak256\":\"0xe7a4cfb59e190eca5f34499b3d82195cee7382466022820895dff06ec8eec93e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a25780639a113ee2116100715780639a113ee21461022e5780639a7c4b71146102415780639c54df6414610254578063bedb86fb14610267578063f2fde38b1461027a57600080fd5b8063715018a6146101ef5780637f1e9cb0146101f7578063888370941461020a5780638da5cb5b1461021d57600080fd5b8063377e11e0116100de578063377e11e0146101a4578063450d11f0146101b75780635c975abb146101ca57806370480275146101dc57600080fd5b80630a83ab91146101105780630fe36ccf146101255780631785f53c1461015557806324d7806c14610168575b600080fd5b61012361011e366004610be6565b61028d565b005b600454610138906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b610123610163366004610be6565b61034b565b610194610176366004610be6565b6001600160a01b031660009081526003602052604090205460ff1690565b604051901515815260200161014c565b6101236101b2366004610c08565b610396565b600054610138906001600160a01b031681565b600254600160a01b900460ff16610194565b6101236101ea366004610be6565b610439565b6101236104d6565b600154610138906001600160a01b031681565b610123610218366004610be6565b61050c565b6002546001600160a01b0316610138565b61012361023c366004610cc6565b61059a565b61012361024f366004610d08565b610672565b610123610262366004610c08565b610717565b610123610275366004610d62565b610829565b610123610288366004610be6565b61087f565b3360009081526003602052604090205460ff16806102ae57506102ae610917565b6102d35760405162461bcd60e51b81526004016102ca90610d84565b60405180910390fd5b6001600160a01b0381166103295760405162461bcd60e51b815260206004820152601760248201527f696e76616c6964206d6573736167652068616e646c657200000000000000000060448201526064016102ca565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b031633146103755760405162461bcd60e51b81526004016102ca90610db0565b6001600160a01b03166000908152600360205260409020805460ff19169055565b6002546001600160a01b031633146103c05760405162461bcd60e51b81526004016102ca90610db0565b8060005b81811015610433576000600360008686858181106103e4576103e4610de5565b90506020020160208101906103f99190610be6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061042b81610dfb565b9150506103c4565b50505050565b6002546001600160a01b031633146104635760405162461bcd60e51b81526004016102ca90610db0565b6000816001600160a01b03163b116104b25760405162461bcd60e51b81526020600482015260126024820152711b5d5cdd08189948184818dbdb9d1c9858dd60721b60448201526064016102ca565b6001600160a01b03166000908152600360205260409020805460ff19166001179055565b6002546001600160a01b031633146105005760405162461bcd60e51b81526004016102ca90610db0565b61050a600061093b565b565b6001546001600160a01b0316156105785760405162461bcd60e51b815260206004820152602a60248201527f4678426173654368696c6454756e6e656c3a20524f4f545f54554e4e454c5f4160448201526913149150511657d4d15560b21b60648201526084016102ca565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526003602052604090205460ff16806105bb57506105bb610917565b6105d75760405162461bcd60e51b81526004016102ca90610d84565b6004546001600160a01b031661062f5760405162461bcd60e51b815260206004820152601760248201527f4d6573736167652068616e646c6572206e6f742073657400000000000000000060448201526064016102ca565b61066e82828080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061098d92505050565b5050565b6000546001600160a01b031633146106d65760405162461bcd60e51b815260206004820152602160248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e44456044820152602960f91b60648201526084016102ca565b610433848484848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506109c792505050565b6002546001600160a01b031633146107415760405162461bcd60e51b81526004016102ca90610db0565b8060005b8181101561043357600084848381811061076157610761610de5565b90506020020160208101906107769190610be6565b6001600160a01b03163b116107c25760405162461bcd60e51b81526020600482015260126024820152711b5d5cdd08189948184818dbdb9d1c9858dd60721b60448201526064016102ca565b6001600360008686858181106107da576107da610de5565b90506020020160208101906107ef9190610be6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061082181610dfb565b915050610745565b3360009081526003602052604090205460ff168061084a575061084a610917565b6108665760405162461bcd60e51b81526004016102ca90610d84565b801561087757610874610aa1565b50565b610874610b46565b6002546001600160a01b031633146108a95760405162461bcd60e51b81526004016102ca90610db0565b6001600160a01b03811661090e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ca565b6108748161093b565b60003361092c6002546001600160a01b031690565b6001600160a01b031614905090565b600280546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b7f8c5261668696ce22758910d05bab8f186d6eb247ceac2af2e82c7dc17669b036816040516109bc9190610e24565b60405180910390a150565b60015482906001600160a01b03808316911614610a3a5760405162461bcd60e51b815260206004820152602b60248201527f4678426173654368696c6454756e6e656c3a20494e56414c49445f53454e444560448201526a1497d19493d357d493d3d560aa1b60648201526084016102ca565b60048054604051633f17580b60e11b81526001600160a01b0390911691637e2eb01691610a6991869101610e24565b600060405180830381600087803b158015610a8357600080fd5b505af1158015610a97573d6000803e3d6000fd5b5050505050505050565b600254600160a01b900460ff1615610aee5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102ca565b6002805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610b293390565b6040516001600160a01b03909116815260200160405180910390a1565b600254600160a01b900460ff16610b965760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102ca565b6002805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33610b29565b80356001600160a01b0381168114610be157600080fd5b919050565b600060208284031215610bf857600080fd5b610c0182610bca565b9392505050565b60008060208385031215610c1b57600080fd5b823567ffffffffffffffff80821115610c3357600080fd5b818501915085601f830112610c4757600080fd5b813581811115610c5657600080fd5b8660208260051b8501011115610c6b57600080fd5b60209290920196919550909350505050565b60008083601f840112610c8f57600080fd5b50813567ffffffffffffffff811115610ca757600080fd5b602083019150836020828501011115610cbf57600080fd5b9250929050565b60008060208385031215610cd957600080fd5b823567ffffffffffffffff811115610cf057600080fd5b610cfc85828601610c7d565b90969095509350505050565b60008060008060608587031215610d1e57600080fd5b84359350610d2e60208601610bca565b9250604085013567ffffffffffffffff811115610d4a57600080fd5b610d5687828801610c7d565b95989497509550505050565b600060208284031215610d7457600080fd5b81358015158114610c0157600080fd5b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000600019821415610e1d57634e487b7160e01b600052601160045260246000fd5b5060010190565b600060208083528351808285015260005b81811015610e5157858101830151858201604001528201610e35565b81811115610e63576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220717d4f7fc17d0a8bc330b9509113e645e36da6f7bdb0f36566a7fd3846975ca464736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2194,
        "contract": "contracts/wnd/tunnels/ChildTunnel.sol:ChildTunnel",
        "label": "fxChild",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2196,
        "contract": "contracts/wnd/tunnels/ChildTunnel.sol:ChildTunnel",
        "label": "fxRootTunnel",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 7707,
        "contract": "contracts/wnd/tunnels/ChildTunnel.sol:ChildTunnel",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7822,
        "contract": "contracts/wnd/tunnels/ChildTunnel.sol:ChildTunnel",
        "label": "_paused",
        "offset": 20,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 11835,
        "contract": "contracts/wnd/tunnels/ChildTunnel.sol:ChildTunnel",
        "label": "admins",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 24116,
        "contract": "contracts/wnd/tunnels/ChildTunnel.sol:ChildTunnel",
        "label": "messageHandler",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IMessageHandler)24215"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IMessageHandler)24215": {
        "encoding": "inplace",
        "label": "contract IMessageHandler",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}