{
  "address": "0x890d2106Ba6d55064a50f54345a58ECe1B4c6e2f",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_savedTokenId",
          "type": "uint256"
        }
      ],
      "name": "ChestStolen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "WizardStakingFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "WizardStakingStart",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_oldOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "WizardStolen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "WizardUnstakingFinish",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "WizardUnstakingStart",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areContractsSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chanceWizardStolen",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "finishStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "finishUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gp",
      "outputs": [
        {
          "internalType": "contract IGP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minTimeStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract IRandomizerCL",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "requestIdForTokenId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sacrificialAlter",
      "outputs": [
        {
          "internalType": "contract ISacrificialAlter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_worldAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sacrificialAlterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gpAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trainingProficiencyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trainingGameAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomizerAddress",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldPause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_wizardStakingCost",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_chanceWizardStolen",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_minTimeStaked",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_treasureChestId",
          "type": "uint256"
        }
      ],
      "name": "setStakingSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "startStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "startUnstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToTimeStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trainingGame",
      "outputs": [
        {
          "internalType": "contract ITrainingGame",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trainingProficiency",
      "outputs": [
        {
          "internalType": "contract ITrainingProficiency",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasureChestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "doTransfer",
          "type": "bool"
        }
      ],
      "name": "unstake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wizardStakingCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "world",
      "outputs": [
        {
          "internalType": "contract IWorld",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x677791e1bdaee574a5a3300516bb9a5ce035cc152acf6d7b860e5b65109958a5",
  "receipt": {
    "to": null,
    "from": "0xC7dEFA20Ec54917669f29e15D1ACB7c121b4780c",
    "contractAddress": "0x890d2106Ba6d55064a50f54345a58ECe1B4c6e2f",
    "transactionIndex": 87,
    "gasUsed": "2098258",
    "logsBloom": "0x
    "blockHash": "0x1ed5c398c2d9fd51ef8609329a64fffaae4b191ebb92c28e7aa95ea6db36d6cd",
    "transactionHash": "0x677791e1bdaee574a5a3300516bb9a5ce035cc152acf6d7b860e5b65109958a5",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 27920212,
        "transactionHash": "0x677791e1bdaee574a5a3300516bb9a5ce035cc152acf6d7b860e5b65109958a5",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c",
          "0x0000000000000000000000004f856f79f54592a48c8a1a1fafa1b0a3ac053f99"
        ],
        "data": "0x000000000000000000000000000000000000000000000000028df9262b94941600000000000000000000000000000000000000000000008bdfef9519bebf999e0000000000000000000000000000000000000000000072e7558de4e1fedc245f00000000000000000000000000000000000000000000008bdd619bf3932b05880000000000000000000000000000000000000000000072e7581bde082a70b875",
        "logIndex": 314,
        "blockHash": "0x1ed5c398c2d9fd51ef8609329a64fffaae4b191ebb92c28e7aa95ea6db36d6cd"
      }
    ],
    "blockNumber": 27920212,
    "cumulativeGasUsed": "14372428",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "414ef7e56515ad590a03e594319d7362",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_savedTokenId\",\"type\":\"uint256\"}],\"name\":\"ChestStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"WizardStakingFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"WizardStakingStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"WizardStolen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"WizardUnstakingFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"WizardUnstakingStart\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areContractsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chanceWizardStolen\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"finishStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"finishUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gp\",\"outputs\":[{\"internalType\":\"contract IGP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTimeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract IRandomizerCL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"requestIdForTokenId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sacrificialAlter\",\"outputs\":[{\"internalType\":\"contract ISacrificialAlter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sacrificialAlterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trainingProficiencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trainingGameAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizerAddress\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wizardStakingCost\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_chanceWizardStolen\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_minTimeStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasureChestId\",\"type\":\"uint256\"}],\"name\":\"setStakingSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"startStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"startUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToTimeStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingGame\",\"outputs\":[{\"internalType\":\"contract ITrainingGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingProficiency\",\"outputs\":[{\"internalType\":\"contract ITrainingProficiency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasureChestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"doTransfer\",\"type\":\"bool\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wizardStakingCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"world\",\"outputs\":[{\"internalType\":\"contract IWorld\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wnd/traininggrounds/TrainingGrounds.sol\":\"TrainingGrounds\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4997774f1c7cd4f3596374621fc674b123a38e36e2ff1d17fbdc9d1111ed6a61\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/shared/AdminableUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./UtilitiesUpgradeable.sol\\\";\\n\\n// Do not add state to this contract.\\n//\\ncontract AdminableUpgradeable is UtilitiesUpgradeable {\\n\\n    mapping(address => bool) private admins;\\n\\n    function __Adminable_init() internal initializer {\\n        UtilitiesUpgradeable.__Utilities__init();\\n    }\\n\\n    function addAdmin(address _address) external onlyOwner {\\n        admins[_address] = true;\\n    }\\n\\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address _address) external onlyOwner {\\n        admins[_address] = false;\\n    }\\n\\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = false;\\n        }\\n    }\\n\\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\\n        if(_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function isAdmin(address _address) public view returns(bool) {\\n        return admins[_address];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(admins[msg.sender] || isOwner(), \\\"Not admin or owner\\\");\\n        _;\\n    }\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0xb9c7084cdb7d0cc6d4f3e7ce6e68e5f75c0a99bf311b1975ed27d8ff3088c7b6\",\"license\":\"MIT\"},\"contracts/shared/UtilitiesUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract UtilitiesUpgradeable is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n\\n    function __Utilities__init() internal initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        _pause();\\n    }\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"0 address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroLength(uint[] memory _array) {\\n        require(_array.length > 0, \\\"Empty array\\\");\\n        _;\\n    }\\n\\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\\n        require(_array1.length == _array2.length, \\\"Unequal lengths\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        /* solhint-disable avoid-tx-origin */\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    function isOwner() internal view returns(bool) {\\n        return owner() == msg.sender;\\n    }\\n}\",\"keccak256\":\"0x6d8894c4823d477c71487e9d325ab3d7a595723868621f522b664f717341769b\",\"license\":\"MIT\"},\"contracts/shared/randomizercl/IRandomizerCL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizerCL {\\n    // Returns a request ID for the random number. This should be kept and mapped to whatever the contract\\n    // is tracking randoms for.\\n    // Admin only.\\n    function getRandomNumber() external returns(bytes32);\\n\\n    // Returns the random for the given request ID.\\n    // Will revert if the random is not ready.\\n    function randomForRequestID(bytes32 _requestID) external view returns(uint256);\\n\\n    // Returns if the request ID has been fulfilled yet.\\n    function isRequestIDFulfilled(bytes32 _requestID) external view returns(bool);\\n}\",\"keccak256\":\"0x0543974321e677f332060f68731869f3904fb63c2a430945905ce639a441aca7\",\"license\":\"MIT\"},\"contracts/wnd/shared/IDragonStakable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDragonStakable {\\n    function stake(uint256 _tokenId, address _owner) external;\\n    // doTransfer handles whether or not the NFT should change wallet owners\\n    // Set to false when 'moving locations' without having to transfer the NFT twice.\\n    function unstake(uint256 _tokenId, bool doTransfer) external;\\n}\",\"keccak256\":\"0xdae4f4ec350a6ad2a2ca839503128107d7ef3316f4c5d92c26d0cd1cfac544e0\",\"license\":\"MIT\"},\"contracts/wnd/shared/IWizardStakable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWizardStakable {\\n    function startStake(uint256 _tokenId, address _owner) external;\\n    function finishStake(uint256 _tokenId) external;\\n\\n    function startUnstake(uint256 _tokenId) external;\\n    function finishUnstake(uint256 _tokenId) external;\\n}\",\"keccak256\":\"0xf4968bebca820fecb932d92581785172e2c60b1f124fbc02ad929b6ef4fe250e\",\"license\":\"MIT\"},\"contracts/wnd/tokens/gp/IGP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IGP is IERC20Upgradeable {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n}\",\"keccak256\":\"0xfe59aa2665b8a7443d0e2a36065ec665bcd4d0b368476dd892a6d679e1de44d7\",\"license\":\"MIT\"},\"contracts/wnd/tokens/sacrificialalter/ISacrificialAlter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface ISacrificialAlter is IERC1155Upgradeable {\\n    function mint(uint256 typeId, uint16 qty, address recipient) external;\\n    function burn(uint256 typeId, uint16 qty, address burnFrom) external;\\n    function adminSafeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount) external;\\n    function adminSafeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts) external;\\n}\",\"keccak256\":\"0x69eeea47d2dbbae9d62cd1776fba4f08d1ea0f7e9aede4b8ee588e8bbe9c40c9\",\"license\":\"MIT\"},\"contracts/wnd/tokens/wnd/IWnD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\\ninterface IWnDRoot {\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function getTokenTraits(uint256 _tokenId) external returns(WizardDragon memory);\\n    function ownerOf(uint256 _tokenId) external returns(address);\\n    function approve(address _to, uint256 _tokenId) external;\\n}\\n\\ninterface IWnD is IERC721EnumerableUpgradeable {\\n    function mint(address _to, uint256 _tokenId, WizardDragon calldata _traits) external;\\n    function burn(uint256 _tokenId) external;\\n    function isWizard(uint256 _tokenId) external view returns(bool);\\n    function getTokenTraits(uint256 _tokenId) external view returns(WizardDragon memory);\\n    function exists(uint256 _tokenId) external view returns(bool);\\n    function adminTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\\nstruct WizardDragon {\\n    bool isWizard;\\n    uint8 body;\\n    uint8 head;\\n    uint8 spell;\\n    uint8 eyes;\\n    uint8 neck;\\n    uint8 mouth;\\n    uint8 wand;\\n    uint8 tail;\\n    uint8 rankIndex;\\n}\",\"keccak256\":\"0xd2b1e55a748db0f2b8d325ade1825479f655ed36e08ef977ffc1484cd9a403fa\",\"license\":\"MIT\"},\"contracts/wnd/traininggame/ITrainingGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITrainingGame {\\n\\n    // Trains the given wizard. Must be staked at the training grounds.\\n    function train(uint256 _tokenId, bool equipWizard) external;\\n\\n    // Trains the given wizards. Must be staked at the training grounds.\\n    function trainBatch(TrainingInfo[] calldata _tokensToTrain) external;\\n\\n    // Reveals the reward for the given token id.\\n    function revealTrainingReward(uint256 _tokenId) external;\\n\\n\\n    // Reveals the rewards for the given token ids.\\n    function revealTrainingRewardBatch(uint256[] calldata _tokenIds) external;\\n\\n    // Indicates if the given wizard can play the game.\\n    function canWizardPlay(uint256 _tokenId) external view returns(bool);\\n\\n    // Returns the timestamp the wizard can next play the game. May be in the past.\\n    function timeWizardCanPlayNext(uint256 _tokenId) external view returns(uint256);\\n\\n    // Returns if a wizard is currently training.\\n    function isWizardTraining(uint256 _tokenId) external view returns(bool);\\n\\n    // Resets the stats of the Wizard\\n    function resetWizard(uint256 _tokenId) external;\\n}\\n\\nstruct TrainingInfo {\\n    uint256 tokenId;\\n    bool isEquipped;\\n}\",\"keccak256\":\"0x98ff3bcfd981d0bbb8f9183d8af3b59d7ed1482a57f856118911709c79393492\",\"license\":\"MIT\"},\"contracts/wnd/traininggrounds/ITrainingGrounds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../shared/IWizardStakable.sol\\\";\\nimport \\\"../shared/IDragonStakable.sol\\\";\\n\\ninterface ITrainingGrounds is IWizardStakable, IDragonStakable {\\n\\n}\",\"keccak256\":\"0x86dce2512455a86d45374c938d5f0e40eacf9e44cc193746b4b73af824d0cfd6\",\"license\":\"MIT\"},\"contracts/wnd/traininggrounds/TrainingGrounds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ITrainingGrounds.sol\\\";\\nimport \\\"./TrainingGroundsDragonStakable.sol\\\";\\nimport \\\"./TrainingGroundsWizardStakable.sol\\\";\\n\\ncontract TrainingGrounds is Initializable, TrainingGroundsDragonStakable, TrainingGroundsWizardStakable {\\n\\n    function initialize() external initializer {\\n        TrainingGroundsDragonStakable.__TrainingGroundsDragonStakable_init();\\n        TrainingGroundsWizardStakable.__TrainingGroundsWizardStakable_init();\\n    }\\n}\",\"keccak256\":\"0xf2370dd07124af963bc58decb006ae4fbf403fd2c48f2592bb4c9d071a0f10d1\",\"license\":\"MIT\"},\"contracts/wnd/traininggrounds/TrainingGroundsContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ITrainingGrounds.sol\\\";\\nimport \\\"./TrainingGroundsState.sol\\\";\\nimport \\\"../../shared/randomizercl/IRandomizerCL.sol\\\";\\nimport \\\"../world/IWorld.sol\\\";\\nimport \\\"../tokens/sacrificialalter/ISacrificialAlter.sol\\\";\\nimport \\\"../tokens/gp/IGP.sol\\\";\\nimport \\\"../trainingproficiency/ITrainingProficiency.sol\\\";\\nimport \\\"../traininggame/ITrainingGame.sol\\\";\\n\\nabstract contract TrainingGroundsContracts is Initializable, ITrainingGrounds, TrainingGroundsState {\\n\\n    function __TrainingGroundsContracts_init() internal initializer {\\n        TrainingGroundsState.__TrainingGroundsState_init();\\n    }\\n\\n    function setContracts(address _worldAddress, address _sacrificialAlterAddress, address _gpAddress, address _trainingProficiencyAddress, address _trainingGameAddress, address _randomizerAddress) external onlyAdminOrOwner {\\n        require(_worldAddress != address(0)\\n            && _gpAddress != address(0)\\n            && _trainingProficiencyAddress != address(0)\\n            && _trainingGameAddress != address(0)\\n            && _randomizerAddress != address(0)\\n            && _sacrificialAlterAddress != address(0), \\\"Bad address.\\\");\\n\\n        world = IWorld(_worldAddress);\\n        sacrificialAlter = ISacrificialAlter(_sacrificialAlterAddress);\\n        gp = IGP(_gpAddress);\\n        trainingProficiency = ITrainingProficiency(_trainingProficiencyAddress);\\n        trainingGame = ITrainingGame(_trainingGameAddress);\\n        randomizer = IRandomizerCL(_randomizerAddress);\\n    }\\n\\n    modifier contractsAreSet() {\\n        require(areContractsSet(), \\\"TrainingGrounds: Contracts not set\\\");\\n\\n        _;\\n    }\\n\\n    function areContractsSet() public view returns(bool) {\\n        return address(world) != address(0)\\n            && address(gp) != address(0)\\n            && address(trainingProficiency) != address(0)\\n            && address(trainingGame) != address(0)\\n            && address(randomizer) != address(0)\\n            && address(sacrificialAlter) != address(0);\\n    }\\n}\",\"keccak256\":\"0x00bfdd1a6bce4c94a786922effd481600f07223cef33d6d65ac3ea7d9a35f750\",\"license\":\"MIT\"},\"contracts/wnd/traininggrounds/TrainingGroundsDragonStakable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./TrainingGroundsContracts.sol\\\";\\nimport \\\"../world/IWorld.sol\\\";\\n\\nabstract contract TrainingGroundsDragonStakable is Initializable, TrainingGroundsContracts {\\n\\n    function __TrainingGroundsDragonStakable_init() internal initializer {\\n        TrainingGroundsContracts.__TrainingGroundsContracts_init();\\n    }\\n\\n    function stake(uint256 _tokenId, address _owner) external override onlyAdminOrOwner contractsAreSet {\\n        // Nothing needed except for adding the dragon to the world at the right location.\\n        // This will also transfer the token.\\n        world.addDragonToWorld(_tokenId, _owner, Location.TRAINING_GROUNDS);\\n    }\\n\\n    function unstake(uint256 _tokenId, bool doTransfer) external override onlyAdminOrOwner contractsAreSet {\\n        // Nothing needed except for removing the dragon from the world and transferring it to the existing owner.\\n        // Adding the if statement in case future features are added that would change state regardless\\n        // of if a dragon is changing locations or going back to owner's wallet\\n        if(doTransfer) {\\n            address _owner = world.ownerOfTokenId(_tokenId);\\n            world.removeDragonFromWorld(_tokenId, _owner);\\n        }\\n    }\\n}\",\"keccak256\":\"0xddfb1e5ffa85f15f1fe82ae02ab215a7aa6730545bad92f638fecf4aa2cd10cb\",\"license\":\"MIT\"},\"contracts/wnd/traininggrounds/TrainingGroundsState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"../../shared/AdminableUpgradeable.sol\\\";\\nimport \\\"../tokens/wnd/IWnD.sol\\\";\\nimport \\\"../tokens/gp/IGP.sol\\\";\\nimport \\\"../tokens/sacrificialalter/ISacrificialAlter.sol\\\";\\nimport \\\"../world/IWorld.sol\\\";\\nimport \\\"../trainingproficiency/ITrainingProficiency.sol\\\";\\nimport \\\"../traininggame/ITrainingGame.sol\\\";\\nimport \\\"../../shared/randomizercl/IRandomizerCL.sol\\\";\\n\\ncontract TrainingGroundsState is Initializable, AdminableUpgradeable {\\n\\n    event WizardStakingStart(address indexed _owner, uint256 indexed _tokenId, bytes32 indexed _requestId);\\n    event WizardStakingFinish(address indexed _owner, uint256 indexed _tokenId);\\n\\n    event WizardUnstakingStart(address indexed _owner, uint256 indexed _tokenId, bytes32 indexed _requestId);\\n    event WizardUnstakingFinish(address indexed _owner, uint256 indexed _tokenId);\\n\\n    event WizardStolen(address indexed _oldOwner, address indexed _newOwner, uint256 indexed _tokenId);\\n    event ChestStolen(address indexed _oldOwner, address indexed _newOwner, uint256 indexed _savedTokenId);\\n\\n    mapping(uint256 => uint256) public tokenIdToTimeStaked;\\n    uint256 public wizardStakingCost;\\n    // The chance of being stolen out of 100\\n    uint8 public chanceWizardStolen;\\n    uint256 public minTimeStaked;\\n    uint256 public treasureChestId;\\n    IWorld public world;\\n    ISacrificialAlter public sacrificialAlter;\\n    IGP public gp;\\n    ITrainingProficiency public trainingProficiency;\\n    ITrainingGame public trainingGame;\\n    IRandomizerCL public randomizer;\\n\\n    // Holds the commit ids for random numbers when staking or unstaking.\\n    mapping(uint256 => bytes32) internal tokenIdToRequestId;\\n\\n    function __TrainingGroundsState_init() internal initializer {\\n        AdminableUpgradeable.__Adminable_init();\\n\\n        wizardStakingCost = 8000 ether;\\n        chanceWizardStolen = 10;\\n        minTimeStaked = 2 days;\\n        treasureChestId = 5;\\n    }\\n}\",\"keccak256\":\"0x6a76a53c84982009908641317a7e8e2519ca9d0b6de7aca42ab80e9d4c83c8f1\",\"license\":\"MIT\"},\"contracts/wnd/traininggrounds/TrainingGroundsWizardStakable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./TrainingGroundsContracts.sol\\\";\\nimport \\\"../world/IWorld.sol\\\";\\n\\nabstract contract TrainingGroundsWizardStakable is TrainingGroundsContracts {\\n\\n    function __TrainingGroundsWizardStakable_init() internal initializer {\\n        TrainingGroundsContracts.__TrainingGroundsContracts_init();\\n    }\\n\\n    function setStakingSettings(uint256 _wizardStakingCost, uint8 _chanceWizardStolen, uint256 _minTimeStaked, uint256 _treasureChestId) external onlyAdminOrOwner {\\n        require(_chanceWizardStolen <= 100, \\\"Bad stolen chance\\\");\\n        wizardStakingCost = _wizardStakingCost;\\n        chanceWizardStolen = _chanceWizardStolen;\\n        treasureChestId = _treasureChestId;\\n        minTimeStaked = _minTimeStaked;\\n    }\\n\\n    function startStake(uint256 _tokenId, address _owner) external override onlyAdminOrOwner contractsAreSet {\\n        _startStakingOrUnstaking(_tokenId, _owner, true);\\n    }\\n\\n    function finishStake(uint256 _tokenId) public override onlyAdminOrOwner contractsAreSet {\\n        _finishStakingOrUnstaking(_tokenId, true);\\n    }\\n\\n    function startUnstake(uint256 _tokenId) external override onlyAdminOrOwner contractsAreSet {\\n        uint256 _timeStaked = tokenIdToTimeStaked[_tokenId];\\n        require(block.timestamp > _timeStaked + minTimeStaked, \\\"Stake longer\\\");\\n\\n        require(!trainingGame.isWizardTraining(_tokenId), \\\"Can't unstake while training\\\");\\n\\n        address _currentOwner = world.ownerOfTokenId(_tokenId);\\n\\n        _startStakingOrUnstaking(_tokenId, _currentOwner, false);\\n    }\\n\\n    function finishUnstake(uint256 _tokenId) external override onlyAdminOrOwner contractsAreSet {\\n        _finishStakingOrUnstaking(_tokenId, false);\\n    }\\n\\n    function requestIdForTokenId(uint256 _tokenId) public view returns(bytes32) {\\n        return tokenIdToRequestId[_tokenId];\\n    }\\n\\n    function _startStakingOrUnstaking(uint256 _tokenId, address _owner, bool _isStaking) private {\\n        if(_tokenId > 15000) {\\n            require(gp.balanceOf(_owner) >= wizardStakingCost, \\\"Not enough GP\\\");\\n            // Burn the fee.\\n            gp.burn(_owner, wizardStakingCost);\\n        }\\n\\n        if(_isStaking) {\\n            // This will transfer the wizard to the world contract\\n            world.addWizardToWorld(_tokenId, _owner, Location.TRAINING_GROUNDS_ENTERING);\\n        } else {\\n            world.changeLocationOfWizard(_tokenId, Location.TRAINING_GROUNDS_LEAVING);\\n        }\\n\\n\\n        if(_canWizardGetStolen(_tokenId)) {\\n            bytes32 _requestId = randomizer.getRandomNumber();\\n            tokenIdToRequestId[_tokenId] = _requestId;\\n\\n            if(_isStaking) {\\n                emit WizardStakingStart(_owner, _tokenId, _requestId);\\n            } else {\\n                emit WizardUnstakingStart(_owner, _tokenId, _requestId);\\n            }\\n        } else {\\n            // Wizard can't be stolen, so there is no point in waiting for a random number.\\n            _finalizeStakingOrUnstaking(_owner, _tokenId, _isStaking);\\n        }\\n    }\\n\\n    // function testFinishStaking() public {\\n    //     uint256 _randomness = 30651181323863600757805402065249228182939696318774945618241995789939011552006;\\n\\n    //     uint256 _result = _randomness % 100;\\n    //     uint8 _wizardProf = 0;\\n    //     uint8 _maxRemoval = _wizardProf > 8 ? 8 : _wizardProf;\\n\\n    //     uint256 _chanceWizardStolen = chanceWizardStolen - _maxRemoval;\\n    //     if(world.totalNumberOfDragons() != 0 && _result < _chanceWizardStolen) {\\n    //         // Got stolen. Get bent.\\n    //         // The dragons number is fluctuating so using the same seed should be okay.\\n    //         address _dragonOwner = world.getRandomDragonOwner(_randomness, Location.TRAINING_GROUNDS);\\n\\n    //         bool _hasChest = false;\\n\\n    //         // Just look at the top bit for the 50/50 odds of stealing the chest\\n    //         if(_hasChest && _randomness >> 255 == 1) {\\n    //             // sacrificialAlter.adminSafeTransferFrom(_tokenOwner, _dragonOwner, treasureChestId, 1);\\n    //             // emit ChestStolen(_tokenOwner, _dragonOwner, _tokenId);\\n\\n    //             _finalizeStakingOrUnstaking(_tokenOwner, _tokenId, _isStaking);\\n    //         } else {\\n    //             world.removeWizardFromWorld(_tokenId, _dragonOwner);\\n    //             // emit WizardStolen(_tokenOwner, _dragonOwner, _tokenId);\\n    //         }\\n    //     } else {\\n    //         _finalizeStakingOrUnstaking(_tokenOwner, _tokenId, _isStaking);\\n    //     }\\n    // }\\n\\n    function _finishStakingOrUnstaking(uint256 _tokenId, bool _isStaking) private {\\n        bytes32 _requestId = requestIdForTokenId(_tokenId);\\n        require(randomizer.isRequestIDFulfilled(_requestId), \\\"Not ready\\\");\\n        delete tokenIdToRequestId[_tokenId];\\n\\n        address _tokenOwner = world.ownerOfTokenId(_tokenId);\\n\\n        uint256 _randomness = randomizer.randomForRequestID(_requestId);\\n\\n        uint256 _result = _randomness % 100;\\n        uint8 _wizardProf = trainingProficiency.proficiencyForWizard(_tokenId);\\n        uint8 _maxRemoval = _wizardProf > 8 ? 8 : _wizardProf;\\n\\n        uint256 _chanceWizardStolen = chanceWizardStolen - _maxRemoval;\\n        if(world.totalNumberOfDragons() != 0 && _result < _chanceWizardStolen) {\\n            // Got stolen. Get bent.\\n            // The dragons number is fluctuating so using the same seed should be okay.\\n            address _dragonOwner = world.getRandomDragonOwner(_randomness, Location.TRAINING_GROUNDS);\\n\\n            bool _hasChest = sacrificialAlter.balanceOf(_tokenOwner, treasureChestId) > 0;\\n\\n            // Just look at the top bit for the 50/50 odds of stealing the chest\\n            if(_hasChest && _randomness >> 255 == 1) {\\n                sacrificialAlter.adminSafeTransferFrom(_tokenOwner, _dragonOwner, treasureChestId, 1);\\n                emit ChestStolen(_tokenOwner, _dragonOwner, _tokenId);\\n\\n                _finalizeStakingOrUnstaking(_tokenOwner, _tokenId, _isStaking);\\n            } else {\\n                world.removeWizardFromWorld(_tokenId, _dragonOwner);\\n                emit WizardStolen(_tokenOwner, _dragonOwner, _tokenId);\\n            }\\n        } else {\\n            _finalizeStakingOrUnstaking(_tokenOwner, _tokenId, _isStaking);\\n        }\\n    }\\n\\n    function _finalizeStakingOrUnstaking(address _owner, uint256 _tokenId, bool _isStaking) private {\\n        if(_isStaking) {\\n            tokenIdToTimeStaked[_tokenId] = block.timestamp;\\n            world.changeLocationOfWizard(_tokenId, Location.TRAINING_GROUNDS);\\n            emit WizardStakingFinish(_owner, _tokenId);\\n        } else {\\n            delete tokenIdToTimeStaked[_tokenId];\\n            world.removeWizardFromWorld(_tokenId, _owner);\\n            emit WizardUnstakingFinish(_owner, _tokenId);\\n        }\\n    }\\n\\n    function _canWizardGetStolen(uint256 _tokenId) private view returns(bool) {\\n        return chanceWizardStolen != 0\\n            && world.totalNumberOfDragons() != 0\\n            && _tokenId > 15000;\\n    }\\n}\",\"keccak256\":\"0xa4100b4002edca2d8f7cc3adb8dd123c1c20de1997cabb7eb4089cc34b136a37\",\"license\":\"MIT\"},\"contracts/wnd/trainingproficiency/ITrainingProficiency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITrainingProficiency {\\n\\n    // Returns the proficiency for the given Wizard.\\n    function proficiencyForWizard(uint256 _tokenId) external view returns(uint8);\\n\\n    // Increases the proficiency of the given wizard by 1.\\n    // Only admin.\\n    function increaseProficiencyForWizard(uint256 _tokenId) external;\\n    // Resets the proficiency of the given wizard.\\n    // Only admin.\\n    function resetProficiencyForWizard(uint256 _tokenId) external;\\n}\",\"keccak256\":\"0x9f92fd6efc02720c267e68ac94d4484420697f8ef44ad4a11a461b6ef8cfde89\",\"license\":\"MIT\"},\"contracts/wnd/world/IWorld.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWorldReadOnly {\\n    // Returns the total number of wizards staked somewhere in the world. Does not include in route wizards.\\n    function totalNumberOfWizards() external view returns(uint256);\\n\\n    // Returns the total number of dragons staked somewhere in the world.\\n    function totalNumberOfDragons() external view returns(uint256);\\n\\n    // Returns the location of the token. If it returns NONEXISTENT, the token is not staked in the world.\\n    function locationOfToken(uint256 _tokenId) external view returns(Location);\\n\\n    // Returns if the token exists in the world. This also means the world contract holds the token.\\n    function isTokenInWorld(uint256 _tokenId) external view returns(bool);\\n\\n    function getStakeableDragonLocations() external view returns(Location[] memory);\\n\\n    function numberOfDragonsStakedAtRank(uint256 _rank) external view returns(uint256);\\n\\n    // Returns the number of dragons that are staked at the given location and rank.\\n    function numberOfDragonsStakedAtLocationAtRank(Location _location, uint256 _rank) external view returns(uint256);\\n\\n    // Returns the number of wizards that are staked at the given location.\\n    function numberOfWizardsStakedAtLocation(Location _location) external view returns(uint256);\\n\\n    // Returns the dragon ID that is at the given location at the given index. Will revert if invalid index.\\n    function dragonAtLocationAtRankAtIndex(Location _location, uint256 _rank, uint256 _index) external view returns(uint256);\\n\\n    // Returns the wizard ID that is at the given location at the given index. Will revert if invalid index.\\n    function wizardAtLocationAtIndex(Location _location, uint256 _index) external view returns(uint256);\\n\\n    // Returns all dragons at the given location for the given owner. Avoid using in a contract-to-contract call.\\n    function getDragonsAtLocationForOwner(Location _location, address _owner) external view returns(uint256[] memory);\\n\\n    // Returns all dragons at the given location for the given owner. Avoid using in a contract-to-contract call.\\n    function getWizardsAtLocationForOwner(Location _location, address _owner) external view returns(uint256[] memory);\\n\\n    // The owner of the given token.\\n    function ownerOfTokenId(uint256 _tokenId) external view returns(address);\\n\\n    // Returns if the passed in address is the owner of the token id.\\n    function isOwnerOfTokenId(uint256 _tokenId, address _owner) external view returns(bool);\\n\\n    // Returns a random dragon owner based on the given seed.\\n    // Dragons that are staked at the given location have an increased odds of being selected.\\n    // If _locationOfEvent is set to NONEXISTENT, all dragons staked in the world will have the same odds.\\n    // If this function returns 0, there was not a random dragon staked.\\n    function getRandomDragonOwner(uint256 _randomSeed, Location _locationOfEvent) external view returns(address);\\n}\\n\\ninterface IWorldEditable {\\n\\n    // Begins staking the given wizard at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function startStakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Finishes the stake for the given wizard ID. Must be called after the random has been seeded.\\n    function finishStakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Unstakes the given wizard from the given location.\\n    // May revert for various reasons.\\n    function startUnstakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Finishes the unstake process for the given wizard id. Must be called after the random has been seeded.\\n    function finishUnstakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Stakes the given dragon at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function stakeDragons(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Unstakes the given dragon at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function unstakeDragons(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // When calling, should already have ensured this is a wizard and is not in the world already.\\n    // Transfers the 721 to the world contract.\\n    // Admin only.\\n    function addWizardToWorld(uint256 _tokenId, address _owner, Location _location) external;\\n\\n    // When calling, should already have ensured this is a wizard and is not in the world already.\\n    // Transfers the 721 to the world contract.\\n    // Admin only.\\n    function addDragonToWorld(uint256 _tokenId, address _owner, Location _location) external;\\n\\n    // Game logic should already validate that this is an option.\\n    // Transfers the 721 to the _owner.\\n    // Admin only.\\n    function removeWizardFromWorld(uint256 _tokenId, address _owner) external;\\n\\n    // Game logic should already validate that this is an option.\\n    // Transfers the 721 to the _owner.\\n    // Admin only.\\n    function removeDragonFromWorld(uint256 _tokenId, address _owner) external;\\n\\n    // When calling, game logic should already validate who owns the token, if they have permission, and that\\n    // the destination location makes sense.\\n    // Only callable by admin/owner.\\n    function changeLocationOfWizard(uint256 _tokenId, Location _location) external;\\n\\n    function setStakeableDragonLocations(Location[] calldata _locations) external;\\n}\\n\\ninterface IWorld is IWorldEditable, IWorldReadOnly {\\n\\n}\\n\\nenum Location {\\n    NONEXISTENT,\\n    RIFT,\\n    TRAINING_GROUNDS_ENTERING,\\n    TRAINING_GROUNDS,\\n    TRAINING_GROUNDS_LEAVING\\n}\",\"keccak256\":\"0x12e6461ca64e6f68e85202709870e24156b39e34a1a2d7023883b3de30823e0a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612500806100206000396000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c8063715018a61161010f5780639ebea88c116100a2578063f10fb58411610071578063f10fb5841461042f578063f2fde38b14610442578063fac2122014610455578063fd501c6d1461047557600080fd5b80639ebea88c146103ed578063b532797f14610400578063bedb86fb14610409578063d46b93301461041c57600080fd5b80638cdcc4b4116100de5780638cdcc4b4146103ae5780638da5cb5b146103b65780639c2fa04b146103c75780639c54df64146103da57600080fd5b8063715018a6146103785780637acb7757146103805780638129fc1c146103935780638a61b0271461039b57600080fd5b806334dfb268116101875780636d27ff61116101565780636d27ff611461032c578063704802751461033f57806370d8dec914610352578063711f8ed61461036557600080fd5b806334dfb268146102e8578063377e11e0146102fb578063573bde661461030e5780635c975abb1461032157600080fd5b806324d7806c116101c357806324d7806c14610259578063263ed2851461029557806327623fa7146102b457806330b67baa146102bd57600080fd5b80630cf89beb146101f55780631785f53c1461021157806322a629c9146102265780632463a55a14610246575b600080fd5b6101fe60ce5481565b6040519081526020015b60405180910390f35b61022461021f366004612019565b610488565b005b6101fe61023436600461203d565b60ca6020526000908152604090205481565b610224610254366004612056565b6104dc565b610285610267366004612019565b6001600160a01b031660009081526097602052604090205460ff1690565b6040519015158152602001610208565b60cc546102a29060ff1681565b60405160ff9091168152602001610208565b6101fe60cd5481565b60cf546102d0906001600160a01b031681565b6040516001600160a01b039091168152602001610208565b6102246102f636600461203d565b610633565b6102246103093660046120d8565b610846565b60d3546102d0906001600160a01b031681565b60655460ff16610285565b61022461033a36600461203d565b6108e2565b61022461034d366004612019565b610951565b61022461036036600461215c565b61099f565b60d2546102d0906001600160a01b031681565b610224610a4a565b61022461038e366004612199565b610a80565b610224610b4c565b6102246103a9366004612199565b610bcd565b610285610c3e565b6033546001600160a01b03166102d0565b6102246103d536600461203d565b610cc2565b6102246103e83660046120d8565b610d2e565b6102246103fb3660046121d7565b610dca565b6101fe60cb5481565b6102246104173660046121fc565b610f1b565b60d1546102d0906001600160a01b031681565b60d4546102d0906001600160a01b031681565b610224610450366004612019565b610f6e565b6101fe61046336600461203d565b600090815260d5602052604090205490565b60d0546102d0906001600160a01b031681565b6033546001600160a01b031633146104bb5760405162461bcd60e51b81526004016104b290612219565b60405180910390fd5b6001600160a01b03166000908152609760205260409020805460ff19169055565b3360009081526097602052604090205460ff16806104fd57506104fd611006565b6105195760405162461bcd60e51b81526004016104b29061224e565b6001600160a01b0386161580159061053957506001600160a01b03841615155b801561054d57506001600160a01b03831615155b801561056157506001600160a01b03821615155b801561057557506001600160a01b03811615155b801561058957506001600160a01b03851615155b6105c45760405162461bcd60e51b815260206004820152600c60248201526b2130b21030b2323932b9b99760a11b60448201526064016104b2565b60cf80546001600160a01b03199081166001600160a01b039889161790915560d0805482169688169690961790955560d1805486169487169490941790935560d2805485169286169290921790915560d38054841691851691909117905560d480549092169216919091179055565b3360009081526097602052604090205460ff16806106545750610654611006565b6106705760405162461bcd60e51b81526004016104b29061224e565b610678610c3e565b6106945760405162461bcd60e51b81526004016104b29061227a565b600081815260ca602052604090205460cd546106b090826122d2565b42116106ed5760405162461bcd60e51b815260206004820152600c60248201526b29ba30b5b2903637b733b2b960a11b60448201526064016104b2565b60d354604051633b62675f60e21b8152600481018490526001600160a01b039091169063ed899d7c9060240160206040518083038186803b15801561073157600080fd5b505afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076991906122ea565b156107b65760405162461bcd60e51b815260206004820152601c60248201527f43616e277420756e7374616b65207768696c6520747261696e696e670000000060448201526064016104b2565b60cf54604051630974560360e11b8152600481018490526000916001600160a01b0316906312e8ac069060240160206040518083038186803b1580156107fb57600080fd5b505afa15801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190612307565b90506108418382600061102a565b505050565b6033546001600160a01b031633146108705760405162461bcd60e51b81526004016104b290612219565b60005b818110156108415760006097600085858581811061089357610893612324565b90506020020160208101906108a89190612019565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806108da8161233a565b915050610873565b3360009081526097602052604090205460ff16806109035750610903611006565b61091f5760405162461bcd60e51b81526004016104b29061224e565b610927610c3e565b6109435760405162461bcd60e51b81526004016104b29061227a565b61094e81600161135f565b50565b6033546001600160a01b0316331461097b5760405162461bcd60e51b81526004016104b290612219565b6001600160a01b03166000908152609760205260409020805460ff19166001179055565b3360009081526097602052604090205460ff16806109c057506109c0611006565b6109dc5760405162461bcd60e51b81526004016104b29061224e565b60648360ff161115610a245760405162461bcd60e51b81526020600482015260116024820152704261642073746f6c656e206368616e636560781b60448201526064016104b2565b60cb9390935560cc805460ff191660ff939093169290921790915560ce9190915560cd55565b6033546001600160a01b03163314610a745760405162461bcd60e51b81526004016104b290612219565b610a7e6000611955565b565b3360009081526097602052604090205460ff1680610aa15750610aa1611006565b610abd5760405162461bcd60e51b81526004016104b29061224e565b610ac5610c3e565b610ae15760405162461bcd60e51b81526004016104b29061227a565b60cf5460405163d826cbe160e01b81526001600160a01b039091169063d826cbe190610b169085908590600390600401612377565b600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b505050505050565b600054610100900460ff16610b675760005460ff1615610b6b565b303b155b610b875760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015610ba9576000805461ffff19166101011790555b610bb16119a7565b610bb96119a7565b801561094e576000805461ff001916905550565b3360009081526097602052604090205460ff1680610bee5750610bee611006565b610c0a5760405162461bcd60e51b81526004016104b29061224e565b610c12610c3e565b610c2e5760405162461bcd60e51b81526004016104b29061227a565b610c3a8282600161102a565b5050565b60cf546000906001600160a01b031615801590610c65575060d1546001600160a01b031615155b8015610c7b575060d2546001600160a01b031615155b8015610c91575060d3546001600160a01b031615155b8015610ca7575060d4546001600160a01b031615155b8015610cbd575060d0546001600160a01b031615155b905090565b3360009081526097602052604090205460ff1680610ce35750610ce3611006565b610cff5760405162461bcd60e51b81526004016104b29061224e565b610d07610c3e565b610d235760405162461bcd60e51b81526004016104b29061227a565b61094e81600061135f565b6033546001600160a01b03163314610d585760405162461bcd60e51b81526004016104b290612219565b60005b8181101561084157600160976000858585818110610d7b57610d7b612324565b9050602002016020810190610d909190612019565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610dc28161233a565b915050610d5b565b3360009081526097602052604090205460ff1680610deb5750610deb611006565b610e075760405162461bcd60e51b81526004016104b29061224e565b610e0f610c3e565b610e2b5760405162461bcd60e51b81526004016104b29061227a565b8015610c3a5760cf54604051630974560360e11b8152600481018490526000916001600160a01b0316906312e8ac069060240160206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190612307565b60cf546040516301ef725160e11b8152600481018690526001600160a01b0380841660248301529293509116906303dee4a290604401600060405180830381600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b50505050505050565b3360009081526097602052604090205460ff1680610f3c5750610f3c611006565b610f585760405162461bcd60e51b81526004016104b29061224e565b8015610f665761094e611a0c565b61094e611aa4565b6033546001600160a01b03163314610f985760405162461bcd60e51b81526004016104b290612219565b6001600160a01b038116610ffd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b2565b61094e81611955565b60003361101b6033546001600160a01b031690565b6001600160a01b031614905090565b613a9883111561115c5760cb5460d1546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906123f0565b10156110f25760405162461bcd60e51b815260206004820152600d60248201526c04e6f7420656e6f75676820475609c1b60448201526064016104b2565b60d15460cb54604051632770a7eb60e21b81526001600160a01b0385811660048301526024820192909252911690639dc29fac90604401600060405180830381600087803b15801561114357600080fd5b505af1158015611157573d6000803e3d6000fd5b505050505b80156111ce5760cf546040516309c4b85160e41b81526001600160a01b0390911690639c4b8510906111979086908690600290600401612377565b600060405180830381600087803b1580156111b157600080fd5b505af11580156111c5573d6000803e3d6000fd5b50505050611233565b60cf54604051639a99171560e01b81526001600160a01b0390911690639a991715906112009086906004908101612409565b600060405180830381600087803b15801561121a57600080fd5b505af115801561122e573d6000803e3d6000fd5b505050505b61123c83611b1e565b156113545760d4546040805163dbdff2c160e01b815290516000926001600160a01b03169163dbdff2c191600480830192602092919082900301818787803b15801561128757600080fd5b505af115801561129b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bf91906123f0565b600085815260d56020526040902081905590508115611315578084846001600160a01b03167ff441e9d893d44ab73a5d7a1f11b1d6a1a4faa755dd090cc59025c285b87688a960405160405180910390a461134e565b8084846001600160a01b03167f6dd76602ab6b0c6cde9cc5812f3bc50f5b43daf1b20b0b022d8bc56d89e9fc9f60405160405180910390a45b50505050565b610841828483611bcc565b600082815260d5602052604081205460d4546040516308c821cb60e41b8152600481018390529192506001600160a01b031690638c821cb09060240160206040518083038186803b1580156113b357600080fd5b505afa1580156113c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113eb91906122ea565b6114235760405162461bcd60e51b81526020600482015260096024820152684e6f7420726561647960b81b60448201526064016104b2565b600083815260d5602052604080822082905560cf549051630974560360e11b8152600481018690526001600160a01b03909116906312e8ac069060240160206040518083038186803b15801561147857600080fd5b505afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190612307565b60d4546040516348d6006560e11b8152600481018590529192506000916001600160a01b03909116906391ac00ca9060240160206040518083038186803b1580156114fa57600080fd5b505afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153291906123f0565b9050600061154160648361241d565b60d2546040516358c6a0bd60e01b8152600481018990529192506000916001600160a01b03909116906358c6a0bd9060240160206040518083038186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c3919061243f565b9050600060088260ff16116115d857816115db565b60085b60cc549091506000906115f290839060ff1661245c565b60ff16905060cf60009054906101000a90046001600160a01b03166001600160a01b03166386e556a96040518163ffffffff1660e01b815260040160206040518083038186803b15801561164557600080fd5b505afa158015611659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167d91906123f0565b1580159061168a57508084105b1561193f5760cf5460405163a6444c2f60e01b81526000916001600160a01b03169063a6444c2f906116c3908990600390600401612409565b60206040518083038186803b1580156116db57600080fd5b505afa1580156116ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117139190612307565b60d05460ce54604051627eeac760e11b815292935060009283926001600160a01b03169162fdd58e9161175e918d916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae91906123f0565b1190508080156117c2575060ff87901c6001145b156118905760d05460ce5460405163a878b95d60e01b81526001600160a01b038b81166004830152858116602483015260448201929092526001606482015291169063a878b95d90608401600060405180830381600087803b15801561182757600080fd5b505af115801561183b573d6000803e3d6000fd5b505050508a826001600160a01b0316896001600160a01b03167f337590a7dc1062345f0dd79645af6f02914bf729313ead215d694c287468d7be60405160405180910390a461188b888c8c611bcc565b611938565b60cf54604051631d684a1760e21b8152600481018d90526001600160a01b038481166024830152909116906375a1285c90604401600060405180830381600087803b1580156118de57600080fd5b505af11580156118f2573d6000803e3d6000fd5b505050508a826001600160a01b0316896001600160a01b03167f4edefe726918ee1f76aa06153a2619479bcc3e68e75f8a94a2ecd2841a13d71a60405160405180910390a45b505061194a565b61194a868a8a611bcc565b505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166119c25760005460ff16156119c6565b303b155b6119e25760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611a04576000805461ffff19166101011790555b610bb9611d37565b60655460ff1615611a525760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104b2565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a873390565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff16611aed5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104b2565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611a87565b60cc5460009060ff1615801590611bb9575060cf60009054906101000a90046001600160a01b03166001600160a01b03166386e556a96040518163ffffffff1660e01b815260040160206040518083038186803b158015611b7e57600080fd5b505afa158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb691906123f0565b15155b8015611bc65750613a9882115b92915050565b8015611c8457600082815260ca60205260409081902042905560cf549051639a99171560e01b81526001600160a01b0390911690639a99171590611c17908590600390600401612409565b600060405180830381600087803b158015611c3157600080fd5b505af1158015611c45573d6000803e3d6000fd5b50506040518492506001600160a01b03861691507f798e186efb0cf44b1777ecfba23a15578922d75d557802faba8b7aa8158c9e6490600090a3505050565b600082815260ca60205260408082209190915560cf549051631d684a1760e21b8152600481018490526001600160a01b038581166024830152909116906375a1285c90604401600060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b50506040518492506001600160a01b03861691507f58a599f87d74dd3dac6656de90f60904d11574e154c2f3612a3bbc56da4f401690600090a3505050565b600054610100900460ff16611d525760005460ff1615611d56565b303b155b611d725760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611d94576000805461ffff19166101011790555b610bb9600054610100900460ff16611db25760005460ff1615611db6565b303b155b611dd25760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611df4576000805461ffff19166101011790555b611dfc611e37565b6901b1ae4d6e2ef500000060cb5560cc805460ff1916600a1790556202a30060cd55600560ce55801561094e576000805461ff001916905550565b600054610100900460ff16611e525760005460ff1615611e56565b303b155b611e725760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611e94576000805461ffff19166101011790555b610bb9600054610100900460ff16611eb25760005460ff1615611eb6565b303b155b611ed25760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611ef4576000805461ffff19166101011790555b611efc611f0c565b611f04611f43565b610bb9611a0c565b600054610100900460ff16611f335760405162461bcd60e51b81526004016104b29061247f565b611f3b611f7a565b610a7e611fa1565b600054610100900460ff16611f6a5760405162461bcd60e51b81526004016104b29061247f565b611f72611f7a565b610a7e611fd1565b600054610100900460ff16610a7e5760405162461bcd60e51b81526004016104b29061247f565b600054610100900460ff16611fc85760405162461bcd60e51b81526004016104b29061247f565b610a7e33611955565b600054610100900460ff16611ff85760405162461bcd60e51b81526004016104b29061247f565b6065805460ff19169055565b6001600160a01b038116811461094e57600080fd5b60006020828403121561202b57600080fd5b813561203681612004565b9392505050565b60006020828403121561204f57600080fd5b5035919050565b60008060008060008060c0878903121561206f57600080fd5b863561207a81612004565b9550602087013561208a81612004565b9450604087013561209a81612004565b935060608701356120aa81612004565b925060808701356120ba81612004565b915060a08701356120ca81612004565b809150509295509295509295565b600080602083850312156120eb57600080fd5b823567ffffffffffffffff8082111561210357600080fd5b818501915085601f83011261211757600080fd5b81358181111561212657600080fd5b8660208260051b850101111561213b57600080fd5b60209290920196919550909350505050565b60ff8116811461094e57600080fd5b6000806000806080858703121561217257600080fd5b8435935060208501356121848161214d565b93969395505050506040820135916060013590565b600080604083850312156121ac57600080fd5b8235915060208301356121be81612004565b809150509250929050565b801515811461094e57600080fd5b600080604083850312156121ea57600080fd5b8235915060208301356121be816121c9565b60006020828403121561220e57600080fd5b8135612036816121c9565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b60208082526022908201527f547261696e696e6747726f756e64733a20436f6e747261637473206e6f742073604082015261195d60f21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156122e5576122e56122bc565b500190565b6000602082840312156122fc57600080fd5b8151612036816121c9565b60006020828403121561231957600080fd5b815161203681612004565b634e487b7160e01b600052603260045260246000fd5b600060001982141561234e5761234e6122bc565b5060010190565b6005811061237357634e487b7160e01b600052602160045260246000fd5b9052565b8381526001600160a01b03831660208201526060810161239a6040830184612355565b949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561240257600080fd5b5051919050565b828152604081016120366020830184612355565b60008261243a57634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561245157600080fd5b81516120368161214d565b600060ff821660ff841680821015612476576124766122bc565b90039392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c456d3d786d84d7eb6fdc48fc2a9e80eb4ec692c9b61d662248bb86c7a2b1f5064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101f05760003560e01c8063715018a61161010f5780639ebea88c116100a2578063f10fb58411610071578063f10fb5841461042f578063f2fde38b14610442578063fac2122014610455578063fd501c6d1461047557600080fd5b80639ebea88c146103ed578063b532797f14610400578063bedb86fb14610409578063d46b93301461041c57600080fd5b80638cdcc4b4116100de5780638cdcc4b4146103ae5780638da5cb5b146103b65780639c2fa04b146103c75780639c54df64146103da57600080fd5b8063715018a6146103785780637acb7757146103805780638129fc1c146103935780638a61b0271461039b57600080fd5b806334dfb268116101875780636d27ff61116101565780636d27ff611461032c578063704802751461033f57806370d8dec914610352578063711f8ed61461036557600080fd5b806334dfb268146102e8578063377e11e0146102fb578063573bde661461030e5780635c975abb1461032157600080fd5b806324d7806c116101c357806324d7806c14610259578063263ed2851461029557806327623fa7146102b457806330b67baa146102bd57600080fd5b80630cf89beb146101f55780631785f53c1461021157806322a629c9146102265780632463a55a14610246575b600080fd5b6101fe60ce5481565b6040519081526020015b60405180910390f35b61022461021f366004612019565b610488565b005b6101fe61023436600461203d565b60ca6020526000908152604090205481565b610224610254366004612056565b6104dc565b610285610267366004612019565b6001600160a01b031660009081526097602052604090205460ff1690565b6040519015158152602001610208565b60cc546102a29060ff1681565b60405160ff9091168152602001610208565b6101fe60cd5481565b60cf546102d0906001600160a01b031681565b6040516001600160a01b039091168152602001610208565b6102246102f636600461203d565b610633565b6102246103093660046120d8565b610846565b60d3546102d0906001600160a01b031681565b60655460ff16610285565b61022461033a36600461203d565b6108e2565b61022461034d366004612019565b610951565b61022461036036600461215c565b61099f565b60d2546102d0906001600160a01b031681565b610224610a4a565b61022461038e366004612199565b610a80565b610224610b4c565b6102246103a9366004612199565b610bcd565b610285610c3e565b6033546001600160a01b03166102d0565b6102246103d536600461203d565b610cc2565b6102246103e83660046120d8565b610d2e565b6102246103fb3660046121d7565b610dca565b6101fe60cb5481565b6102246104173660046121fc565b610f1b565b60d1546102d0906001600160a01b031681565b60d4546102d0906001600160a01b031681565b610224610450366004612019565b610f6e565b6101fe61046336600461203d565b600090815260d5602052604090205490565b60d0546102d0906001600160a01b031681565b6033546001600160a01b031633146104bb5760405162461bcd60e51b81526004016104b290612219565b60405180910390fd5b6001600160a01b03166000908152609760205260409020805460ff19169055565b3360009081526097602052604090205460ff16806104fd57506104fd611006565b6105195760405162461bcd60e51b81526004016104b29061224e565b6001600160a01b0386161580159061053957506001600160a01b03841615155b801561054d57506001600160a01b03831615155b801561056157506001600160a01b03821615155b801561057557506001600160a01b03811615155b801561058957506001600160a01b03851615155b6105c45760405162461bcd60e51b815260206004820152600c60248201526b2130b21030b2323932b9b99760a11b60448201526064016104b2565b60cf80546001600160a01b03199081166001600160a01b039889161790915560d0805482169688169690961790955560d1805486169487169490941790935560d2805485169286169290921790915560d38054841691851691909117905560d480549092169216919091179055565b3360009081526097602052604090205460ff16806106545750610654611006565b6106705760405162461bcd60e51b81526004016104b29061224e565b610678610c3e565b6106945760405162461bcd60e51b81526004016104b29061227a565b600081815260ca602052604090205460cd546106b090826122d2565b42116106ed5760405162461bcd60e51b815260206004820152600c60248201526b29ba30b5b2903637b733b2b960a11b60448201526064016104b2565b60d354604051633b62675f60e21b8152600481018490526001600160a01b039091169063ed899d7c9060240160206040518083038186803b15801561073157600080fd5b505afa158015610745573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076991906122ea565b156107b65760405162461bcd60e51b815260206004820152601c60248201527f43616e277420756e7374616b65207768696c6520747261696e696e670000000060448201526064016104b2565b60cf54604051630974560360e11b8152600481018490526000916001600160a01b0316906312e8ac069060240160206040518083038186803b1580156107fb57600080fd5b505afa15801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190612307565b90506108418382600061102a565b505050565b6033546001600160a01b031633146108705760405162461bcd60e51b81526004016104b290612219565b60005b818110156108415760006097600085858581811061089357610893612324565b90506020020160208101906108a89190612019565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806108da8161233a565b915050610873565b3360009081526097602052604090205460ff16806109035750610903611006565b61091f5760405162461bcd60e51b81526004016104b29061224e565b610927610c3e565b6109435760405162461bcd60e51b81526004016104b29061227a565b61094e81600161135f565b50565b6033546001600160a01b0316331461097b5760405162461bcd60e51b81526004016104b290612219565b6001600160a01b03166000908152609760205260409020805460ff19166001179055565b3360009081526097602052604090205460ff16806109c057506109c0611006565b6109dc5760405162461bcd60e51b81526004016104b29061224e565b60648360ff161115610a245760405162461bcd60e51b81526020600482015260116024820152704261642073746f6c656e206368616e636560781b60448201526064016104b2565b60cb9390935560cc805460ff191660ff939093169290921790915560ce9190915560cd55565b6033546001600160a01b03163314610a745760405162461bcd60e51b81526004016104b290612219565b610a7e6000611955565b565b3360009081526097602052604090205460ff1680610aa15750610aa1611006565b610abd5760405162461bcd60e51b81526004016104b29061224e565b610ac5610c3e565b610ae15760405162461bcd60e51b81526004016104b29061227a565b60cf5460405163d826cbe160e01b81526001600160a01b039091169063d826cbe190610b169085908590600390600401612377565b600060405180830381600087803b158015610b3057600080fd5b505af1158015610b44573d6000803e3d6000fd5b505050505050565b600054610100900460ff16610b675760005460ff1615610b6b565b303b155b610b875760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015610ba9576000805461ffff19166101011790555b610bb16119a7565b610bb96119a7565b801561094e576000805461ff001916905550565b3360009081526097602052604090205460ff1680610bee5750610bee611006565b610c0a5760405162461bcd60e51b81526004016104b29061224e565b610c12610c3e565b610c2e5760405162461bcd60e51b81526004016104b29061227a565b610c3a8282600161102a565b5050565b60cf546000906001600160a01b031615801590610c65575060d1546001600160a01b031615155b8015610c7b575060d2546001600160a01b031615155b8015610c91575060d3546001600160a01b031615155b8015610ca7575060d4546001600160a01b031615155b8015610cbd575060d0546001600160a01b031615155b905090565b3360009081526097602052604090205460ff1680610ce35750610ce3611006565b610cff5760405162461bcd60e51b81526004016104b29061224e565b610d07610c3e565b610d235760405162461bcd60e51b81526004016104b29061227a565b61094e81600061135f565b6033546001600160a01b03163314610d585760405162461bcd60e51b81526004016104b290612219565b60005b8181101561084157600160976000858585818110610d7b57610d7b612324565b9050602002016020810190610d909190612019565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610dc28161233a565b915050610d5b565b3360009081526097602052604090205460ff1680610deb5750610deb611006565b610e075760405162461bcd60e51b81526004016104b29061224e565b610e0f610c3e565b610e2b5760405162461bcd60e51b81526004016104b29061227a565b8015610c3a5760cf54604051630974560360e11b8152600481018490526000916001600160a01b0316906312e8ac069060240160206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190612307565b60cf546040516301ef725160e11b8152600481018690526001600160a01b0380841660248301529293509116906303dee4a290604401600060405180830381600087803b158015610efe57600080fd5b505af1158015610f12573d6000803e3d6000fd5b50505050505050565b3360009081526097602052604090205460ff1680610f3c5750610f3c611006565b610f585760405162461bcd60e51b81526004016104b29061224e565b8015610f665761094e611a0c565b61094e611aa4565b6033546001600160a01b03163314610f985760405162461bcd60e51b81526004016104b290612219565b6001600160a01b038116610ffd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104b2565b61094e81611955565b60003361101b6033546001600160a01b031690565b6001600160a01b031614905090565b613a9883111561115c5760cb5460d1546040516370a0823160e01b81526001600160a01b038581166004830152909116906370a082319060240160206040518083038186803b15801561107c57600080fd5b505afa158015611090573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110b491906123f0565b10156110f25760405162461bcd60e51b815260206004820152600d60248201526c04e6f7420656e6f75676820475609c1b60448201526064016104b2565b60d15460cb54604051632770a7eb60e21b81526001600160a01b0385811660048301526024820192909252911690639dc29fac90604401600060405180830381600087803b15801561114357600080fd5b505af1158015611157573d6000803e3d6000fd5b505050505b80156111ce5760cf546040516309c4b85160e41b81526001600160a01b0390911690639c4b8510906111979086908690600290600401612377565b600060405180830381600087803b1580156111b157600080fd5b505af11580156111c5573d6000803e3d6000fd5b50505050611233565b60cf54604051639a99171560e01b81526001600160a01b0390911690639a991715906112009086906004908101612409565b600060405180830381600087803b15801561121a57600080fd5b505af115801561122e573d6000803e3d6000fd5b505050505b61123c83611b1e565b156113545760d4546040805163dbdff2c160e01b815290516000926001600160a01b03169163dbdff2c191600480830192602092919082900301818787803b15801561128757600080fd5b505af115801561129b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bf91906123f0565b600085815260d56020526040902081905590508115611315578084846001600160a01b03167ff441e9d893d44ab73a5d7a1f11b1d6a1a4faa755dd090cc59025c285b87688a960405160405180910390a461134e565b8084846001600160a01b03167f6dd76602ab6b0c6cde9cc5812f3bc50f5b43daf1b20b0b022d8bc56d89e9fc9f60405160405180910390a45b50505050565b610841828483611bcc565b600082815260d5602052604081205460d4546040516308c821cb60e41b8152600481018390529192506001600160a01b031690638c821cb09060240160206040518083038186803b1580156113b357600080fd5b505afa1580156113c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113eb91906122ea565b6114235760405162461bcd60e51b81526020600482015260096024820152684e6f7420726561647960b81b60448201526064016104b2565b600083815260d5602052604080822082905560cf549051630974560360e11b8152600481018690526001600160a01b03909116906312e8ac069060240160206040518083038186803b15801561147857600080fd5b505afa15801561148c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b09190612307565b60d4546040516348d6006560e11b8152600481018590529192506000916001600160a01b03909116906391ac00ca9060240160206040518083038186803b1580156114fa57600080fd5b505afa15801561150e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153291906123f0565b9050600061154160648361241d565b60d2546040516358c6a0bd60e01b8152600481018990529192506000916001600160a01b03909116906358c6a0bd9060240160206040518083038186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115c3919061243f565b9050600060088260ff16116115d857816115db565b60085b60cc549091506000906115f290839060ff1661245c565b60ff16905060cf60009054906101000a90046001600160a01b03166001600160a01b03166386e556a96040518163ffffffff1660e01b815260040160206040518083038186803b15801561164557600080fd5b505afa158015611659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167d91906123f0565b1580159061168a57508084105b1561193f5760cf5460405163a6444c2f60e01b81526000916001600160a01b03169063a6444c2f906116c3908990600390600401612409565b60206040518083038186803b1580156116db57600080fd5b505afa1580156116ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117139190612307565b60d05460ce54604051627eeac760e11b815292935060009283926001600160a01b03169162fdd58e9161175e918d916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b15801561177657600080fd5b505afa15801561178a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ae91906123f0565b1190508080156117c2575060ff87901c6001145b156118905760d05460ce5460405163a878b95d60e01b81526001600160a01b038b81166004830152858116602483015260448201929092526001606482015291169063a878b95d90608401600060405180830381600087803b15801561182757600080fd5b505af115801561183b573d6000803e3d6000fd5b505050508a826001600160a01b0316896001600160a01b03167f337590a7dc1062345f0dd79645af6f02914bf729313ead215d694c287468d7be60405160405180910390a461188b888c8c611bcc565b611938565b60cf54604051631d684a1760e21b8152600481018d90526001600160a01b038481166024830152909116906375a1285c90604401600060405180830381600087803b1580156118de57600080fd5b505af11580156118f2573d6000803e3d6000fd5b505050508a826001600160a01b0316896001600160a01b03167f4edefe726918ee1f76aa06153a2619479bcc3e68e75f8a94a2ecd2841a13d71a60405160405180910390a45b505061194a565b61194a868a8a611bcc565b505050505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff166119c25760005460ff16156119c6565b303b155b6119e25760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611a04576000805461ffff19166101011790555b610bb9611d37565b60655460ff1615611a525760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016104b2565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611a873390565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff16611aed5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016104b2565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611a87565b60cc5460009060ff1615801590611bb9575060cf60009054906101000a90046001600160a01b03166001600160a01b03166386e556a96040518163ffffffff1660e01b815260040160206040518083038186803b158015611b7e57600080fd5b505afa158015611b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bb691906123f0565b15155b8015611bc65750613a9882115b92915050565b8015611c8457600082815260ca60205260409081902042905560cf549051639a99171560e01b81526001600160a01b0390911690639a99171590611c17908590600390600401612409565b600060405180830381600087803b158015611c3157600080fd5b505af1158015611c45573d6000803e3d6000fd5b50506040518492506001600160a01b03861691507f798e186efb0cf44b1777ecfba23a15578922d75d557802faba8b7aa8158c9e6490600090a3505050565b600082815260ca60205260408082209190915560cf549051631d684a1760e21b8152600481018490526001600160a01b038581166024830152909116906375a1285c90604401600060405180830381600087803b158015611ce457600080fd5b505af1158015611cf8573d6000803e3d6000fd5b50506040518492506001600160a01b03861691507f58a599f87d74dd3dac6656de90f60904d11574e154c2f3612a3bbc56da4f401690600090a3505050565b600054610100900460ff16611d525760005460ff1615611d56565b303b155b611d725760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611d94576000805461ffff19166101011790555b610bb9600054610100900460ff16611db25760005460ff1615611db6565b303b155b611dd25760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611df4576000805461ffff19166101011790555b611dfc611e37565b6901b1ae4d6e2ef500000060cb5560cc805460ff1916600a1790556202a30060cd55600560ce55801561094e576000805461ff001916905550565b600054610100900460ff16611e525760005460ff1615611e56565b303b155b611e725760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611e94576000805461ffff19166101011790555b610bb9600054610100900460ff16611eb25760005460ff1615611eb6565b303b155b611ed25760405162461bcd60e51b81526004016104b2906123a2565b600054610100900460ff16158015611ef4576000805461ffff19166101011790555b611efc611f0c565b611f04611f43565b610bb9611a0c565b600054610100900460ff16611f335760405162461bcd60e51b81526004016104b29061247f565b611f3b611f7a565b610a7e611fa1565b600054610100900460ff16611f6a5760405162461bcd60e51b81526004016104b29061247f565b611f72611f7a565b610a7e611fd1565b600054610100900460ff16610a7e5760405162461bcd60e51b81526004016104b29061247f565b600054610100900460ff16611fc85760405162461bcd60e51b81526004016104b29061247f565b610a7e33611955565b600054610100900460ff16611ff85760405162461bcd60e51b81526004016104b29061247f565b6065805460ff19169055565b6001600160a01b038116811461094e57600080fd5b60006020828403121561202b57600080fd5b813561203681612004565b9392505050565b60006020828403121561204f57600080fd5b5035919050565b60008060008060008060c0878903121561206f57600080fd5b863561207a81612004565b9550602087013561208a81612004565b9450604087013561209a81612004565b935060608701356120aa81612004565b925060808701356120ba81612004565b915060a08701356120ca81612004565b809150509295509295509295565b600080602083850312156120eb57600080fd5b823567ffffffffffffffff8082111561210357600080fd5b818501915085601f83011261211757600080fd5b81358181111561212657600080fd5b8660208260051b850101111561213b57600080fd5b60209290920196919550909350505050565b60ff8116811461094e57600080fd5b6000806000806080858703121561217257600080fd5b8435935060208501356121848161214d565b93969395505050506040820135916060013590565b600080604083850312156121ac57600080fd5b8235915060208301356121be81612004565b809150509250929050565b801515811461094e57600080fd5b600080604083850312156121ea57600080fd5b8235915060208301356121be816121c9565b60006020828403121561220e57600080fd5b8135612036816121c9565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b60208082526022908201527f547261696e696e6747726f756e64733a20436f6e747261637473206e6f742073604082015261195d60f21b606082015260800190565b634e487b7160e01b600052601160045260246000fd5b600082198211156122e5576122e56122bc565b500190565b6000602082840312156122fc57600080fd5b8151612036816121c9565b60006020828403121561231957600080fd5b815161203681612004565b634e487b7160e01b600052603260045260246000fd5b600060001982141561234e5761234e6122bc565b5060010190565b6005811061237357634e487b7160e01b600052602160045260246000fd5b9052565b8381526001600160a01b03831660208201526060810161239a6040830184612355565b949350505050565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561240257600080fd5b5051919050565b828152604081016120366020830184612355565b60008261243a57634e487b7160e01b600052601260045260246000fd5b500690565b60006020828403121561245157600080fd5b81516120368161214d565b600060ff821660ff841680821015612476576124766122bc565b90039392505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220c456d3d786d84d7eb6fdc48fc2a9e80eb4ec692c9b61d662248bb86c7a2b1f5064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2787,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2790,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6838,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2665,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2779,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2875,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 2966,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12019,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "admins",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12179,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 23362,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "tokenIdToTimeStaked",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 23364,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "wizardStakingCost",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 23366,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "chanceWizardStolen",
        "offset": 0,
        "slot": "204",
        "type": "t_uint8"
      },
      {
        "astId": 23368,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "minTimeStaked",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 23370,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "treasureChestId",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 23373,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "world",
        "offset": 0,
        "slot": "207",
        "type": "t_contract(IWorld)24514"
      },
      {
        "astId": 23376,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "sacrificialAlter",
        "offset": 0,
        "slot": "208",
        "type": "t_contract(ISacrificialAlter)19106"
      },
      {
        "astId": 23379,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "gp",
        "offset": 0,
        "slot": "209",
        "type": "t_contract(IGP)19058"
      },
      {
        "astId": 23382,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "trainingProficiency",
        "offset": 0,
        "slot": "210",
        "type": "t_contract(ITrainingProficiency)23924"
      },
      {
        "astId": 23385,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "trainingGame",
        "offset": 0,
        "slot": "211",
        "type": "t_contract(ITrainingGame)20711"
      },
      {
        "astId": 23388,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "randomizer",
        "offset": 0,
        "slot": "212",
        "type": "t_contract(IRandomizerCL)12739"
      },
      {
        "astId": 23392,
        "contract": "contracts/wnd/traininggrounds/TrainingGrounds.sol:TrainingGrounds",
        "label": "tokenIdToRequestId",
        "offset": 0,
        "slot": "213",
        "type": "t_mapping(t_uint256,t_bytes32)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IGP)19058": {
        "encoding": "inplace",
        "label": "contract IGP",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomizerCL)12739": {
        "encoding": "inplace",
        "label": "contract IRandomizerCL",
        "numberOfBytes": "20"
      },
      "t_contract(ISacrificialAlter)19106": {
        "encoding": "inplace",
        "label": "contract ISacrificialAlter",
        "numberOfBytes": "20"
      },
      "t_contract(ITrainingGame)20711": {
        "encoding": "inplace",
        "label": "contract ITrainingGame",
        "numberOfBytes": "20"
      },
      "t_contract(ITrainingProficiency)23924": {
        "encoding": "inplace",
        "label": "contract ITrainingProficiency",
        "numberOfBytes": "20"
      },
      "t_contract(IWorld)24514": {
        "encoding": "inplace",
        "label": "contract IWorld",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}