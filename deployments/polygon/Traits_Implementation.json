{
  "address": "0x324b8e57B48027d91Aa336306B2aBf26CCb5A4Ba",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldPause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wndAddress",
          "type": "address"
        }
      ],
      "name": "setWnD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "traitData",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "png",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "traitType",
          "type": "uint8"
        },
        {
          "internalType": "uint8[]",
          "name": "traitIds",
          "type": "uint8[]"
        },
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "png",
              "type": "string"
            }
          ],
          "internalType": "struct TraitsState.Trait[]",
          "name": "traits",
          "type": "tuple[]"
        }
      ],
      "name": "uploadTraits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wnd",
      "outputs": [
        {
          "internalType": "contract IWnD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x92050aba498a3fe7e8d806d99979fbdf9ce36282c897a6cde6b86eb36cff2a83",
  "receipt": {
    "to": null,
    "from": "0xC7dEFA20Ec54917669f29e15D1ACB7c121b4780c",
    "contractAddress": "0x324b8e57B48027d91Aa336306B2aBf26CCb5A4Ba",
    "transactionIndex": 71,
    "gasUsed": "3058438",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000080080000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000800800000000000000000000000000004000800000000000000001000000000000000000000000000000100000000000000000000000000000000000000020000000000000000000000000000000100000",
    "blockHash": "0xe9b5f3d511d6b50a2390361727ec3e7154e68bf6e6cb5bda9ba748817e4d5299",
    "transactionHash": "0x92050aba498a3fe7e8d806d99979fbdf9ce36282c897a6cde6b86eb36cff2a83",
    "logs": [
      {
        "transactionIndex": 71,
        "blockNumber": 27920073,
        "transactionHash": "0x92050aba498a3fe7e8d806d99979fbdf9ce36282c897a6cde6b86eb36cff2a83",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c",
          "0x00000000000000000000000041d5b3e2ec53583bc0601dfb4f2a11a392049489"
        ],
        "data": "0x000000000000000000000000000000000000000000000000025a78b53775a70c00000000000000000000000000000000000000000000008be3bc7d933f8670af000000000000000000000000000000000000000000001b5e38c5567796d624df00000000000000000000000000000000000000000000008be16204de0810c9a3000000000000000000000000000000000000000000001b5e3b1fcf2cce4bcbeb",
        "logIndex": 453,
        "blockHash": "0xe9b5f3d511d6b50a2390361727ec3e7154e68bf6e6cb5bda9ba748817e4d5299"
      }
    ],
    "blockNumber": 27920073,
    "cumulativeGasUsed": "19967290",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "414ef7e56515ad590a03e594319d7362",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wndAddress\",\"type\":\"address\"}],\"name\":\"setWnD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"traitData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"traitType\",\"type\":\"uint8\"},{\"internalType\":\"uint8[]\",\"name\":\"traitIds\",\"type\":\"uint8[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"png\",\"type\":\"string\"}],\"internalType\":\"struct TraitsState.Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"}],\"name\":\"uploadTraits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnd\",\"outputs\":[{\"internalType\":\"contract IWnD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"tokenURI(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to generate the metadata for\"},\"returns\":{\"_0\":\"a base64 encoded JSON dictionary of the token's metadata and SVG\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uploadTraits(uint8,uint8[],(string,string)[])\":{\"params\":{\"traitType\":\"the trait type to upload the traits for (see traitTypes for a mapping)\",\"traits\":\"the names and base64 encoded PNGs for each trait\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setWnD(address)\":{\"notice\":\"ADMIN \"},\"tokenURI(uint256)\":{\"notice\":\"generates a base64 encoded metadata response without referencing off-chain content\"},\"uploadTraits(uint8,uint8[],(string,string)[])\":{\"notice\":\"administrative to upload the names and images associated with each trait\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wnd/tokens/traits/Traits.sol\":\"Traits\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4997774f1c7cd4f3596374621fc674b123a38e36e2ff1d17fbdc9d1111ed6a61\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/shared/AdminableUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./UtilitiesUpgradeable.sol\\\";\\n\\n// Do not add state to this contract.\\n//\\ncontract AdminableUpgradeable is UtilitiesUpgradeable {\\n\\n    mapping(address => bool) private admins;\\n\\n    function __Adminable_init() internal initializer {\\n        UtilitiesUpgradeable.__Utilities__init();\\n    }\\n\\n    function addAdmin(address _address) external onlyOwner {\\n        admins[_address] = true;\\n    }\\n\\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address _address) external onlyOwner {\\n        admins[_address] = false;\\n    }\\n\\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = false;\\n        }\\n    }\\n\\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\\n        if(_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function isAdmin(address _address) public view returns(bool) {\\n        return admins[_address];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(admins[msg.sender] || isOwner(), \\\"Not admin or owner\\\");\\n        _;\\n    }\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0xb9c7084cdb7d0cc6d4f3e7ce6e68e5f75c0a99bf311b1975ed27d8ff3088c7b6\",\"license\":\"MIT\"},\"contracts/shared/Base64ableUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract Base64ableUpgradeable is Initializable {\\n\\n    function __Base64able_init() internal initializer {\\n\\n    }\\n\\n    /** BASE 64 - Written by Brech Devos */\\n\\n    string internal constant TABLE =\\n        \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    function _base64(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {\\n\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                dataPtr := add(dataPtr, 3)\\n\\n                // read 3 bytes\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n                mstore(\\n                    resultPtr,\\n                    shl(248, mload(add(tablePtr, and(input, 0x3F))))\\n                )\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n        }\\n\\n        return result;\\n    }\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0x452c2239183adcbdbad3e6994609333b357117af47cd8a7da57115a24061e1b8\",\"license\":\"MIT\"},\"contracts/shared/UtilitiesUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract UtilitiesUpgradeable is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n\\n    function __Utilities__init() internal initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        _pause();\\n    }\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"0 address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroLength(uint[] memory _array) {\\n        require(_array.length > 0, \\\"Empty array\\\");\\n        _;\\n    }\\n\\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\\n        require(_array1.length == _array2.length, \\\"Unequal lengths\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        /* solhint-disable avoid-tx-origin */\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    function isOwner() internal view returns(bool) {\\n        return owner() == msg.sender;\\n    }\\n}\",\"keccak256\":\"0x6d8894c4823d477c71487e9d325ab3d7a595723868621f522b664f717341769b\",\"license\":\"MIT\"},\"contracts/wnd/tokens/traits/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfebf7cfef26ed32ad67a63f48174978d6e9f7e6577d77359f8498ce1b9099d1f\",\"license\":\"MIT LICENSE\"},\"contracts/wnd/tokens/traits/Traits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./ITraits.sol\\\";\\nimport \\\"./TraitsState.sol\\\";\\n\\ncontract Traits is Initializable, ITraits, TraitsState {\\n\\n    using StringsUpgradeable for uint256;\\n\\n    function initialize() external initializer {\\n        TraitsState.__TraitsState_init();\\n    }\\n\\n    /** ADMIN */\\n\\n    function setWnD(address _wndAddress) external onlyAdminOrOwner {\\n        wnd = IWnD(_wndAddress);\\n    }\\n\\n    /**\\n     * administrative to upload the names and images associated with each trait\\n     * @param traitType the trait type to upload the traits for (see traitTypes for a mapping)\\n     * @param traits the names and base64 encoded PNGs for each trait\\n     */\\n    function uploadTraits(\\n        uint8 traitType,\\n        uint8[] calldata traitIds,\\n        Trait[] calldata traits\\n    ) external onlyAdminOrOwner {\\n        require(traitIds.length == traits.length, \\\"Mismatched inputs\\\");\\n        for (uint256 i = 0; i < traits.length; i++) {\\n            traitData[traitType][traitIds[i]] = Trait(\\n                traits[i].name,\\n                traits[i].png\\n            );\\n        }\\n    }\\n\\n    /** RENDER */\\n\\n    /**\\n     * generates an <image> element using base64 encoded PNGs\\n     * @param trait the trait storing the PNG data\\n     * @return the <image> element\\n     */\\n    function drawTrait(Trait memory trait)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<image x=\\\"4\\\" y=\\\"4\\\" width=\\\"32\\\" height=\\\"32\\\" image-rendering=\\\"pixelated\\\" preserveAspectRatio=\\\"xMidYMid\\\" xlink:href=\\\"data:image/png;base64,',\\n                    trait.png,\\n                    '\\\"/>'\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates an entire SVG by composing multiple <image> elements of PNGs\\n     * @param tokenId the ID of the token to generate an SVG for\\n     * @return a valid SVG of the Wizard / Dragon\\n     */\\n    function drawSVG(uint256 tokenId) internal view returns (string memory) {\\n        WizardDragon memory s = wnd.getTokenTraits(tokenId);\\n        uint8 shift = s.isWizard ? 0 : 9;\\n\\n        // Trait data indexes 0 - 7 are reserved for Wizards\\n        // Trait data indexew 9 - 17 are reserved for Dragons.\\n        string memory svgString = string(\\n            abi.encodePacked(\\n                drawTrait(traitData[0 + shift][s.body]),\\n                s.isWizard\\n                    ? drawTrait(traitData[1 + shift][s.head])\\n                    : drawTrait(traitData[1 + shift][s.rankIndex]),\\n                s.isWizard ? drawTrait(traitData[2 + shift][s.spell]) : \\\"\\\",\\n                drawTrait(traitData[3 + shift][s.eyes]),\\n                s.isWizard ? drawTrait(traitData[4 + shift][s.neck]) : \\\"\\\",\\n                drawTrait(traitData[5 + shift][s.mouth]),\\n                s.isWizard ? \\\"\\\" : drawTrait(traitData[6 + shift][s.tail]),\\n                s.isWizard ? drawTrait(traitData[7 + shift][s.wand]) : \\\"\\\"\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '<svg id=\\\"wndNFT\\\" width=\\\"100%\\\" height=\\\"100%\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 40 40\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\">',\\n                    svgString,\\n                    \\\"</svg>\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates an attribute for the attributes array in the ERC721 metadata standard\\n     * @param traitType the trait type to reference as the metadata key\\n     * @param value the token's trait associated with the key\\n     * @return a JSON dictionary for the single attribute\\n     */\\n    function attributeForTypeAndValue(\\n        string memory traitType,\\n        string memory value\\n    ) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    '{\\\"trait_type\\\":\\\"',\\n                    traitType,\\n                    '\\\",\\\"value\\\":\\\"',\\n                    value,\\n                    '\\\"}'\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates an array composed of all the individual traits and values\\n     * @param tokenId the ID of the token to compose the metadata for\\n     * @return a JSON array of all of the attributes for given token ID\\n     */\\n    function compileAttributes(uint256 tokenId)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        WizardDragon memory s = wnd.getTokenTraits(tokenId);\\n        string memory traits;\\n        if (s.isWizard) {\\n            traits = string(\\n                abi.encodePacked(\\n                    attributeForTypeAndValue(\\n                        _traitTypes[0],\\n                        traitData[0][s.body].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[1],\\n                        traitData[1][s.head].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[2],\\n                        traitData[2][s.spell].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[3],\\n                        traitData[3][s.eyes].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[4],\\n                        traitData[4][s.neck].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[5],\\n                        traitData[5][s.mouth].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[7],\\n                        traitData[7][s.wand].name\\n                    ),\\n                    \\\",\\\"\\n                )\\n            );\\n        } else {\\n            traits = string(\\n                abi.encodePacked(\\n                    attributeForTypeAndValue(\\n                        _traitTypes[0],\\n                        traitData[9][s.body].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[1],\\n                        traitData[10][s.rankIndex].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[3],\\n                        traitData[12][s.eyes].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[5],\\n                        traitData[14][s.mouth].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\n                        _traitTypes[6],\\n                        traitData[15][s.tail].name\\n                    ),\\n                    \\\",\\\",\\n                    attributeForTypeAndValue(\\\"Rank Score\\\", _ranks[s.rankIndex]),\\n                    \\\",\\\"\\n                )\\n            );\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"[\\\",\\n                    traits,\\n                    '{\\\"trait_type\\\":\\\"Generation\\\",\\\"value\\\":',\\n                    tokenId <= 15000 ? '\\\"Gen 0\\\"' : '\\\"Gen 1\\\"',\\n                    '},{\\\"trait_type\\\":\\\"Type\\\",\\\"value\\\":',\\n                    s.isWizard ? '\\\"Wizard\\\"' : '\\\"Dragon\\\"',\\n                    \\\"}]\\\"\\n                )\\n            );\\n    }\\n\\n    /**\\n     * generates a base64 encoded metadata response without referencing off-chain content\\n     * @param tokenId the ID of the token to generate the metadata for\\n     * @return a base64 encoded JSON dictionary of the token's metadata and SVG\\n     */\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        override\\n        returns (string memory)\\n    {\\n        require(_msgSender() == address(wnd), \\\"hmmmm what doing?\\\");\\n        WizardDragon memory s = wnd.getTokenTraits(tokenId);\\n\\n        string memory metadata = string(\\n            abi.encodePacked(\\n                '{\\\"name\\\": \\\"',\\n                s.isWizard ? \\\"Wizard #\\\" : \\\"Dragon #\\\",\\n                tokenId.toString(),\\n                '\\\", \\\"description\\\": \\\"Thousands of Wizards and Dragons compete in a tower in the metaverse. A tempting prize of $GP awaits, with deadly high stakes. All the metadata and images are generated and stored 100% on-chain. No IPFS. NO API. Just the Ethereum blockchain.\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,',\\n                _base64(bytes(drawSVG(tokenId))),\\n                '\\\", \\\"attributes\\\":',\\n                compileAttributes(tokenId),\\n                \\\"}\\\"\\n            )\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    _base64(bytes(metadata))\\n                )\\n            );\\n    }\\n\\n}\\n\",\"keccak256\":\"0x54c66d4acef6fd224289c868d86db7ea09e97a31cdb6998e111ceeb3d23bd900\",\"license\":\"MIT\"},\"contracts/wnd/tokens/traits/TraitsState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../../../shared/AdminableUpgradeable.sol\\\";\\nimport \\\"../../../shared/Base64ableUpgradeable.sol\\\";\\nimport \\\"../wnd/IWnD.sol\\\";\\n\\nabstract contract TraitsState is Initializable, AdminableUpgradeable, Base64ableUpgradeable {\\n\\n    // struct to store each trait's data for metadata and rendering\\n    struct Trait {\\n        string name;\\n        string png;\\n    }\\n\\n    // mapping from trait type (index) to its name\\n    string[9] internal _traitTypes;\\n\\n    // storage of each traits name and base64 PNG data\\n    mapping(uint8 => mapping(uint8 => Trait)) public traitData;\\n    // mapping from rankIndex to its score\\n    string[4] internal _ranks;\\n\\n    IWnD public wnd;\\n\\n    function __TraitsState_init() internal initializer {\\n        AdminableUpgradeable.__Adminable_init();\\n        Base64ableUpgradeable.__Base64able_init();\\n\\n        _traitTypes = [\\n            \\\"Body\\\",\\n            \\\"Head\\\",\\n            \\\"Spell\\\",\\n            \\\"Eye\\\",\\n            \\\"Neck\\\",\\n            \\\"Mouth\\\",\\n            \\\"Wings\\\",\\n            \\\"Wand\\\",\\n            \\\"Rank\\\"\\n        ];\\n\\n        _ranks = [\\\"8\\\", \\\"7\\\", \\\"6\\\", \\\"5\\\"];\\n    }\\n}\",\"keccak256\":\"0xbfe6e1c06f0fdd8e7368eed5db19f8ea3ffe462df96ca884bc4996fb48257d4e\",\"license\":\"MIT\"},\"contracts/wnd/tokens/wnd/IWnD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\\ninterface IWnDRoot {\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function getTokenTraits(uint256 _tokenId) external returns(WizardDragon memory);\\n    function ownerOf(uint256 _tokenId) external returns(address);\\n    function approve(address _to, uint256 _tokenId) external;\\n}\\n\\ninterface IWnD is IERC721EnumerableUpgradeable {\\n    function mint(address _to, uint256 _tokenId, WizardDragon calldata _traits) external;\\n    function burn(uint256 _tokenId) external;\\n    function isWizard(uint256 _tokenId) external view returns(bool);\\n    function getTokenTraits(uint256 _tokenId) external view returns(WizardDragon memory);\\n    function exists(uint256 _tokenId) external view returns(bool);\\n    function adminTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\\nstruct WizardDragon {\\n    bool isWizard;\\n    uint8 body;\\n    uint8 head;\\n    uint8 spell;\\n    uint8 eyes;\\n    uint8 neck;\\n    uint8 mouth;\\n    uint8 wand;\\n    uint8 tail;\\n    uint8 rankIndex;\\n}\",\"keccak256\":\"0xd2b1e55a748db0f2b8d325ade1825479f655ed36e08ef977ffc1484cd9a403fa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061365c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638129fc1c11610097578063bedb86fb11610066578063bedb86fb14610220578063c87b56dd14610233578063d93ae3d914610253578063f2fde38b1461026657600080fd5b80638129fc1c146101d35780638da5cb5b146101db5780639bf2ee35146101ec5780639c54df641461020d57600080fd5b80635c975abb116100d35780635c975abb14610181578063704802751461018c578063715018a61461019f57806380a59707146101a757600080fd5b80631785f53c146101055780631eda66fa1461011a57806324d7806c1461012d578063377e11e01461016e575b600080fd5b610118610113366004612800565b610279565b005b610118610128366004612800565b6102cd565b61015961013b366004612800565b6001600160a01b031660009081526097602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61011861017c36600461287c565b61032d565b60655460ff16610159565b61011861019a366004612800565b6103ce565b61011861041c565b61010a546101bb906001600160a01b031681565b6040516001600160a01b039091168152602001610165565b610118610452565b6033546001600160a01b03166101bb565b6101ff6101fa3660046128cd565b6104cc565b604051610165929190612962565b61011861021b36600461287c565b610604565b61011861022e36600461299e565b6106a0565b6102466102413660046129bb565b6106f3565b60405161016591906129d4565b6101186102613660046129e7565b61089a565b610118610274366004612800565b610a9a565b6033546001600160a01b031633146102ac5760405162461bcd60e51b81526004016102a390612a6a565b60405180910390fd5b6001600160a01b03166000908152609760205260409020805460ff19169055565b3360009081526097602052604090205460ff16806102ee57506102ee610b32565b61030a5760405162461bcd60e51b81526004016102a390612a9f565b61010a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146103575760405162461bcd60e51b81526004016102a390612a6a565b60005b818110156103c95760006097600085858581811061037a5761037a612acb565b905060200201602081019061038f9190612800565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806103c181612af7565b91505061035a565b505050565b6033546001600160a01b031633146103f85760405162461bcd60e51b81526004016102a390612a6a565b6001600160a01b03166000908152609760205260409020805460ff19166001179055565b6033546001600160a01b031633146104465760405162461bcd60e51b81526004016102a390612a6a565b6104506000610b56565b565b600054610100900460ff1661046d5760005460ff1615610471565b303b155b61048d5760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff161580156104af576000805461ffff19166101011790555b6104b7610ba8565b80156104c9576000805461ff00191690555b50565b6101056020908152600092835260408084209091529082529020805481906104f390612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461051f90612b60565b801561056c5780601f106105415761010080835404028352916020019161056c565b820191906000526020600020905b81548152906001019060200180831161054f57829003601f168201915b50505050509080600101805461058190612b60565b80601f01602080910402602001604051908101604052809291908181526020018280546105ad90612b60565b80156105fa5780601f106105cf576101008083540402835291602001916105fa565b820191906000526020600020905b8154815290600101906020018083116105dd57829003601f168201915b5050505050905082565b6033546001600160a01b0316331461062e5760405162461bcd60e51b81526004016102a390612a6a565b60005b818110156103c95760016097600085858581811061065157610651612acb565b90506020020160208101906106669190612800565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061069881612af7565b915050610631565b3360009081526097602052604090205460ff16806106c157506106c1610b32565b6106dd5760405162461bcd60e51b81526004016102a390612a9f565b80156106eb576104c9610dc9565b6104c9610e61565b61010a546060906001600160a01b0316336001600160a01b03161461074e5760405162461bcd60e51b8152602060048201526011602482015270686d6d6d6d207768617420646f696e673f60781b60448201526064016102a3565b61010a546040516394e5684760e01b8152600481018490526000916001600160a01b0316906394e56847906024016101406040518083038186803b15801561079557600080fd5b505afa1580156107a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cd9190612c04565b9050600081600001516108005760405180604001604052806008815260200167447261676f6e202360c01b815250610822565b6040518060400160405280600881526020016757697a617264202360c01b8152505b61082b85610edb565b61083c61083787610fe1565b6115a8565b61084587611710565b6040516020016108589493929190612ce8565b6040516020818303038152906040529050610872816115a8565b6040516020016108829190612ee7565b60405160208183030381529060405292505050919050565b3360009081526097602052604090205460ff16806108bb57506108bb610b32565b6108d75760405162461bcd60e51b81526004016102a390612a9f565b82811461091a5760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b60448201526064016102a3565b60005b81811015610a9257604051806040016040528084848481811061094257610942612acb565b90506020028101906109549190612f2c565b61095e9080612f4c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018484848181106109aa576109aa612acb565b90506020028101906109bc9190612f2c565b6109ca906020810190612f4c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060ff89168152610105602052604081209150878785818110610a2457610a24612acb565b9050602002016020810190610a399190612f93565b60ff168152602080820192909252604001600020825180519192610a6292849290910190612684565b506020828101518051610a7b9260018501920190612684565b509050508080610a8a90612af7565b91505061091d565b505050505050565b6033546001600160a01b03163314610ac45760405162461bcd60e51b81526004016102a390612a6a565b6001600160a01b038116610b295760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a3565b6104c981610b56565b600033610b476033546001600160a01b031690565b6001600160a01b031614905090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610bc35760005460ff1615610bc7565b303b155b610be35760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff16158015610c05576000805461ffff19166101011790555b610c0d6123e9565b610c1561244e565b60408051610160810182526004610120820181815263426f647960e01b610140840152825282518084018452818152631219585960e21b602082810191909152808401919091528351808501855260058082526414dc195b1b60da1b828401528486019190915284518086018652600381526245796560e81b81840152606085015284518086018652838152634e65636b60e01b818401526080850152845180860186528181526409adeeae8d60db1b8184015260a0850152845180860186529081526457696e677360d81b8183015260c0840152835180850185528281526315d85b9960e21b8183015260e084015283518085019094529083526352616e6b60e01b90830152610100810191909152610d339060fc906009612708565b506040805160c081018252600160808201818152600760fb1b60a0840152825282518084018452818152603760f81b6020828101919091528084019190915283518085018552828152601b60f91b81830152838501528351808501909452908352603560f81b908301526060810191909152610db490610106906004612754565b5080156104c9576000805461ff001916905550565b60655460ff1615610e0f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102a3565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e443390565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff16610eaa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102a3565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33610e44565b606081610eff5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f295780610f1381612af7565b9150610f229050600a83612fc6565b9150610f03565b60008167ffffffffffffffff811115610f4457610f44612b9b565b6040519080825280601f01601f191660200182016040528015610f6e576020820181803683370190505b5090505b8415610fd957610f83600183612fda565b9150610f90600a86612ff1565b610f9b906030613005565b60f81b818381518110610fb057610fb0612acb565b60200101906001600160f81b031916908160001a905350610fd2600a86612fc6565b9450610f72565b949350505050565b61010a546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b15801561102d57600080fd5b505afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110659190612c04565b90506000816000015161107957600961107c565b60005b905060006111f461010582611091858261301d565b60ff1660ff1681526020019081526020016000206000856020015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461110790612b60565b80156111545780601f1061112957610100808354040283529160200191611154565b820191906000526020600020905b81548152906001019060200180831161113757829003601f168201915b5050505050815260200160018201805461116d90612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461119990612b60565b80156111e65780601f106111bb576101008083540402835291602001916111e6565b820191906000526020600020905b8154815290600101906020018083116111c957829003601f168201915b5050505050815250506124be565b835161125d57611258610105600061120d86600161301d565b60ff1660ff168152602001908152602001600020600086610120015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b6112ba565b6112ba610105600061127086600161301d565b60ff1660ff1681526020019081526020016000206000866040015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b84516112d55760405180602001604052806000815250611332565b61133261010560006112e887600261301d565b60ff1660ff1681526020019081526020016000206000876060015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b61138f610105600061134588600361301d565b60ff1660ff1681526020019081526020016000206000886080015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b86516113aa5760405180602001604052806000815250611407565b61140761010560006113bd89600461301d565b60ff1660ff16815260200190815260200160002060008960a0015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b611464610105600061141a8a600561301d565b60ff1660ff16815260200190815260200160002060008a60c0015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b88516114cd576114c8610105600061147d8b600661301d565b60ff1660ff16815260200190815260200160002060008b610100015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b6114de565b604051806020016040528060008152505b89516114f95760405180602001604052806000815250611556565b611556610105600061150c8c600761301d565b60ff1660ff16815260200190815260200160002060008c60e0015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b60405160200161156d989796959493929190613042565b60405160208183030381529060405290508060405160200161158f91906130e7565b6040516020818303038152906040529350505050919050565b60608151600014156115c857505060408051602081019091526000815290565b60006040518060600160405280604081526020016135e760409139905060006003845160026115f79190613005565b6116019190612fc6565b61160c9060046131d4565b9050600061161b826020613005565b67ffffffffffffffff81111561163357611633612b9b565b6040519080825280601f01601f19166020018201604052801561165d576020820181803683370190505b509050818152600183018586518101602084015b818310156116cb5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611671565b6003895106600181146116e557600281146116f657611702565b613d3d60f01b600119830152611702565b603d60f81b6000198301525b509398975050505050505050565b61010a546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b15801561175c57600080fd5b505afa158015611770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117949190612c04565b90506060816000015115611e675761190160fc60000180546117b590612b60565b80601f01602080910402602001604051908101604052809291908181526020018280546117e190612b60565b801561182e5780601f106118035761010080835404028352916020019161182e565b820191906000526020600020905b81548152906001019060200180831161181157829003601f168201915b5050600080805261010560209081528881015160ff1682527fa5baec7d73105a3c7298203bb205bbc41b63fa384ae73a6016b890a7ca29ae2d905260409020805490935061187e92509050612b60565b80601f01602080910402602001604051908101604052809291908181526020018280546118aa90612b60565b80156118f75780601f106118cc576101008083540402835291602001916118f7565b820191906000526020600020905b8154815290600101906020018083116118da57829003601f168201915b50505050506124eb565b6119e060fc600101805461191490612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461194090612b60565b801561198d5780601f106119625761010080835404028352916020019161198d565b820191906000526020600020905b81548152906001019060200180831161197057829003601f168201915b505060016000908152610105602090815260408a81015160ff1683527f289cf86abe4b423e1a6f14f7e2803f901e31fa1f06af778d80854575e68593c39091529020805490935061187e92509050612b60565b611abf60fc60020180546119f390612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1f90612b60565b8015611a6c5780601f10611a4157610100808354040283529160200191611a6c565b820191906000526020600020905b815481529060010190602001808311611a4f57829003601f168201915b505060026000908152610105602090815260608b015160ff1682527f290777f2a1308a8344d1cc09e8c50a20f27e6fb1ff9f173900f4a7b230cfc88d905260409020805490935061187e92509050612b60565b611b9e60fc6003018054611ad290612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611afe90612b60565b8015611b4b5780601f10611b2057610100808354040283529160200191611b4b565b820191906000526020600020905b815481529060010190602001808311611b2e57829003601f168201915b505060036000908152610105602090815260808c015160ff1682527f1e6343f19cd635d93a52712ef7be28fea65f87c110fcef82b28f8ea0e1c97cae905260409020805490935061187e92509050612b60565b611c7d60fc6004018054611bb190612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611bdd90612b60565b8015611c2a5780601f10611bff57610100808354040283529160200191611c2a565b820191906000526020600020905b815481529060010190602001808311611c0d57829003601f168201915b505060046000908152610105602090815260a08d015160ff1682527ff6f28a4b30f6e3999346e96dc743e9cf1304e909b54dab8d65ab3b7a96642f39905260409020805490935061187e92509050612b60565b611d5c60fc6005018054611c9090612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbc90612b60565b8015611d095780601f10611cde57610100808354040283529160200191611d09565b820191906000526020600020905b815481529060010190602001808311611cec57829003601f168201915b505060056000908152610105602090815260c08e015160ff1682527fbcb4fd7e81c91d65b0be768c3f31ff2a44d33450a0090ac55d3dfa526edb1f4c905260409020805490935061187e92509050612b60565b611e3b60fc6007018054611d6f90612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9b90612b60565b8015611de85780601f10611dbd57610100808354040283529160200191611de8565b820191906000526020600020905b815481529060010190602001808311611dcb57829003601f168201915b505060076000908152610105602090815260e08f015160ff1682527fbd2340fc468e64703cf895c48acda4d106ef2c7f653c0fa67ea082a32deda870905260409020805490935061187e92509050612b60565b604051602001611e5197969594939291906131f3565b6040516020818303038152906040529050612338565b611f4560fc6000018054611e7a90612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea690612b60565b8015611ef35780601f10611ec857610100808354040283529160200191611ef3565b820191906000526020600020905b815481529060010190602001808311611ed657829003601f168201915b50506009600090815261010560209081528881015160ff1682527ff22982cc1a1d0783485fedb92a6837d41b98c5622a22a20a8ec32ddc254c2ed3905260409020805490935061187e92509050612b60565b61202560fc6001018054611f5890612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8490612b60565b8015611fd15780601f10611fa657610100808354040283529160200191611fd1565b820191906000526020600020905b815481529060010190602001808311611fb457829003601f168201915b5050600a600090815261010560209081526101208a015160ff1682527fc8600b23f5c3579f1fead83570ad2cba1bced52b29843bba3475720e33617dac905260409020805490935061187e92509050612b60565b61210460fc600301805461203890612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461206490612b60565b80156120b15780601f10612086576101008083540402835291602001916120b1565b820191906000526020600020905b81548152906001019060200180831161209457829003601f168201915b5050600c6000908152610105602090815260808b015160ff1682527f373b210f8b4ea1dfaf850e3d77f3fa26f4c00a83a2db31a1182b5ffd7d0ac4ff905260409020805490935061187e92509050612b60565b6121e360fc600501805461211790612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461214390612b60565b80156121905780601f1061216557610100808354040283529160200191612190565b820191906000526020600020905b81548152906001019060200180831161217357829003601f168201915b5050600e6000908152610105602090815260c08c015160ff1682527fd1396a26092b4aca7eb2359ac6398a813913b60d5103137fffa0126c13d043a8905260409020805490935061187e92509050612b60565b6122c360fc60060180546121f690612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461222290612b60565b801561226f5780601f106122445761010080835404028352916020019161226f565b820191906000526020600020905b81548152906001019060200180831161225257829003601f168201915b5050600f600090815261010560209081526101008d015160ff1682527ff4994a4cdc46a6f551f86569fcda730eaf2433c193bbcb2a9dab0cf13d9cdfdf905260409020805490935061187e92509050612b60565b6123116040518060400160405280600a81526020016952616e6b2053636f726560b01b81525061010689610120015160ff166004811061230557612305612acb565b01805461187e90612b60565b604051602001612326969594939291906132d2565b60405160208183030381529060405290505b80613a9885111561236857604051806040016040528060078152602001661123b2b710189160c91b815250612389565b604051806040016040528060078152602001661123b2b710181160c91b8152505b83516123b5576040518060400160405280600881526020016711223930b3b7b71160c11b8152506123d7565b60405180604001604052806008815260200167112bb4bd30b9321160c11b8152505b60405160200161088293929190613397565b600054610100900460ff166124045760005460ff1615612408565b303b155b6124245760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff16158015612446576000805461ffff19166101011790555b6104b7612517565b600054610100900460ff166124695760005460ff161561246d565b303b155b6124895760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff161580156104b7576000805461ffff191661010117905580156104c9576000805461ff001916905550565b606081602001516040516020016124d59190613456565b6040516020818303038152906040529050919050565b6060828260405160200161250092919061352a565b604051602081830303815290604052905092915050565b600054610100900460ff166125325760005460ff1615612536565b303b155b6125525760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff16158015612574576000805461ffff19166101011790555b61257c61258c565b6125846125c3565b6104b7610dc9565b600054610100900460ff166125b35760405162461bcd60e51b81526004016102a39061359b565b6125bb6125fa565b610450612621565b600054610100900460ff166125ea5760405162461bcd60e51b81526004016102a39061359b565b6125f26125fa565b610450612651565b600054610100900460ff166104505760405162461bcd60e51b81526004016102a39061359b565b600054610100900460ff166126485760405162461bcd60e51b81526004016102a39061359b565b61045033610b56565b600054610100900460ff166126785760405162461bcd60e51b81526004016102a39061359b565b6065805460ff19169055565b82805461269090612b60565b90600052602060002090601f0160209004810192826126b257600085556126f8565b82601f106126cb57805160ff19168380011785556126f8565b828001600101855582156126f8579182015b828111156126f85782518255916020019190600101906126dd565b50612704929150612794565b5090565b8260098101928215612748579160200282015b828111156127485782518051612738918491602090910190612684565b509160200191906001019061271b565b506127049291506127a9565b8260048101928215612748579160200282015b828111156127485782518051612784918491602090910190612684565b5091602001919060010190612767565b5b808211156127045760008155600101612795565b808211156127045760006127bd82826127c6565b506001016127a9565b5080546127d290612b60565b6000825580601f106127e2575050565b601f0160209004906000526020600020908101906104c99190612794565b60006020828403121561281257600080fd5b81356001600160a01b038116811461282957600080fd5b9392505050565b60008083601f84011261284257600080fd5b50813567ffffffffffffffff81111561285a57600080fd5b6020830191508360208260051b850101111561287557600080fd5b9250929050565b6000806020838503121561288f57600080fd5b823567ffffffffffffffff8111156128a657600080fd5b6128b285828601612830565b90969095509350505050565b60ff811681146104c957600080fd5b600080604083850312156128e057600080fd5b82356128eb816128be565b915060208301356128fb816128be565b809150509250929050565b60005b83811015612921578181015183820152602001612909565b83811115612930576000848401525b50505050565b6000815180845261294e816020860160208601612906565b601f01601f19169290920160200192915050565b6040815260006129756040830185612936565b82810360208401526129878185612936565b95945050505050565b80151581146104c957600080fd5b6000602082840312156129b057600080fd5b813561282981612990565b6000602082840312156129cd57600080fd5b5035919050565b6020815260006128296020830184612936565b6000806000806000606086880312156129ff57600080fd5b8535612a0a816128be565b9450602086013567ffffffffffffffff80821115612a2757600080fd5b612a3389838a01612830565b90965094506040880135915080821115612a4c57600080fd5b50612a5988828901612830565b969995985093965092949392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612b0b57612b0b612ae1565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c90821680612b7457607f821691505b60208210811415612b9557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715612be357634e487b7160e01b600052604160045260246000fd5b60405290565b8051612bf481612990565b919050565b8051612bf4816128be565b60006101408284031215612c1757600080fd5b612c1f612bb1565b612c2883612be9565b8152612c3660208401612bf9565b6020820152612c4760408401612bf9565b6040820152612c5860608401612bf9565b6060820152612c6960808401612bf9565b6080820152612c7a60a08401612bf9565b60a0820152612c8b60c08401612bf9565b60c0820152612c9c60e08401612bf9565b60e0820152610100612caf818501612bf9565b90820152610120612cc1848201612bf9565b908201529392505050565b60008151612cde818560208601612906565b9290920192915050565b693d913730b6b2911d101160b11b81528451600090612d0e81600a850160208a01612906565b855190830190612d2581600a840160208a01612906565b7f222c20226465736372697074696f6e223a202254686f7573616e6473206f6620600a92909101918201527f57697a6172647320616e6420447261676f6e7320636f6d7065746520696e2061602a8201527f20746f77657220696e20746865206d65746176657273652e20412074656d7074604a8201527f696e67207072697a65206f6620244750206177616974732c2077697468206465606a8201527f61646c792068696768207374616b65732e20416c6c20746865206d6574616461608a8201527f746120616e6420696d61676573206172652067656e65726174656420616e642060aa8201527f73746f7265642031303025206f6e2d636861696e2e204e6f20495046532e204e60ca8201527f4f204150492e204a7573742074686520457468657265756d20626c6f636b636860ea8201527f61696e2e222c2022696d616765223a2022646174613a696d6167652f7376672b61010a8201526a1e1b5b0ed8985cd94d8d0b60aa1b61012a820152612edc612ecf612ec9612ead610135850189612ccc565b6f1116101130ba3a3934b13aba32b9911d60811b815260100190565b86612ccc565b607d60f81b815260010190565b979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612f1f81601d850160208701612906565b91909101601d0192915050565b60008235603e19833603018112612f4257600080fd5b9190910192915050565b6000808335601e19843603018112612f6357600080fd5b83018035915067ffffffffffffffff821115612f7e57600080fd5b60200191503681900382131561287557600080fd5b600060208284031215612fa557600080fd5b8135612829816128be565b634e487b7160e01b600052601260045260246000fd5b600082612fd557612fd5612fb0565b500490565b600082821015612fec57612fec612ae1565b500390565b60008261300057613000612fb0565b500690565b6000821982111561301857613018612ae1565b500190565b600060ff821660ff84168060ff0382111561303a5761303a612ae1565b019392505050565b6000895160206130558285838f01612906565b8a51918401916130688184848f01612906565b8a5192019161307a8184848e01612906565b895192019161308c8184848d01612906565b885192019161309e8184848c01612906565b87519201916130b08184848b01612906565b86519201916130c28184848a01612906565b85519201916130d48184848901612906565b919091019b9a5050505050505050505050565b7f3c7376672069643d22776e644e4654222077696474683d22313030252220686581527f696768743d2231303025222076657273696f6e3d22312e31222076696577426f60208201527f783d223020302034302034302220786d6c6e733d22687474703a2f2f7777772e60408201527f77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687460608201527f74703a2f2f7777772e77332e6f72672f313939392f786c696e6b223e000000006080820152600082516131b781609c850160208701612906565b651e17b9bb339f60d11b609c93909101928301525060a201919050565b60008160001904831182151516156131ee576131ee612ae1565b500290565b6000885160206132068285838e01612906565b8184019150600b60fa1b8083528a516132258160018601858f01612906565b6001930192830181905289516132418160028601858e01612906565b60029301928301819052885161325d8160038601858d01612906565b6003930192830181905287516132798160048601858c01612906565b600493019283015285516132938160058501848a01612906565b6132c26132b56132af600584870101600b60fa1b815260010190565b88612ccc565b600b60fa1b815260010190565b9c9b505050505050505050505050565b6000875160206132e58285838d01612906565b8184019150600b60fa1b80835289516133048160018601858e01612906565b6001930192830181905288516133208160028601858d01612906565b60029301928301819052875161333c8160038601858c01612906565b6003930192830181905286516133588160048601858b01612906565b600493019283015284516133728160058501848901612906565b613388600582850101600b60fa1b815260010190565b9b9a5050505050505050505050565b605b60f81b8152600084516133b3816001850160208901612906565b7f7b2274726169745f74797065223a2247656e65726174696f6e222c2276616c756001918401918201526232911d60e91b602182015284516133fc816024840160208901612906565b7f7d2c7b2274726169745f74797065223a2254797065222c2276616c7565223a0060249290910191820152835161343a816043840160208801612906565b617d5d60f01b6043929091019182015260450195945050505050565b7f3c696d61676520783d22342220793d2234222077696474683d2233322220686581527f696768743d2233322220696d6167652d72656e646572696e673d22706978656c60208201527f6174656422207072657365727665417370656374526174696f3d22784d69645960408201527f4d69642220786c696e6b3a687265663d22646174613a696d6167652f706e673b60608201526618985cd94d8d0b60ca1b608082015260008251613510816087850160208701612906565b6211179f60e91b6087939091019283015250608a01919050565b6e3d913a3930b4ba2fba3cb832911d1160891b8152825160009061355581600f850160208801612906565b6a1116113b30b63ab2911d1160a91b600f91840191820152835161358081601a840160208801612906565b61227d60f01b601a9290910191820152601c01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220725522120c82674f4af3933f0c76fa5e7dfe28ad505dc27d7af637385a459fc664736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c80638129fc1c11610097578063bedb86fb11610066578063bedb86fb14610220578063c87b56dd14610233578063d93ae3d914610253578063f2fde38b1461026657600080fd5b80638129fc1c146101d35780638da5cb5b146101db5780639bf2ee35146101ec5780639c54df641461020d57600080fd5b80635c975abb116100d35780635c975abb14610181578063704802751461018c578063715018a61461019f57806380a59707146101a757600080fd5b80631785f53c146101055780631eda66fa1461011a57806324d7806c1461012d578063377e11e01461016e575b600080fd5b610118610113366004612800565b610279565b005b610118610128366004612800565b6102cd565b61015961013b366004612800565b6001600160a01b031660009081526097602052604090205460ff1690565b60405190151581526020015b60405180910390f35b61011861017c36600461287c565b61032d565b60655460ff16610159565b61011861019a366004612800565b6103ce565b61011861041c565b61010a546101bb906001600160a01b031681565b6040516001600160a01b039091168152602001610165565b610118610452565b6033546001600160a01b03166101bb565b6101ff6101fa3660046128cd565b6104cc565b604051610165929190612962565b61011861021b36600461287c565b610604565b61011861022e36600461299e565b6106a0565b6102466102413660046129bb565b6106f3565b60405161016591906129d4565b6101186102613660046129e7565b61089a565b610118610274366004612800565b610a9a565b6033546001600160a01b031633146102ac5760405162461bcd60e51b81526004016102a390612a6a565b60405180910390fd5b6001600160a01b03166000908152609760205260409020805460ff19169055565b3360009081526097602052604090205460ff16806102ee57506102ee610b32565b61030a5760405162461bcd60e51b81526004016102a390612a9f565b61010a80546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b031633146103575760405162461bcd60e51b81526004016102a390612a6a565b60005b818110156103c95760006097600085858581811061037a5761037a612acb565b905060200201602081019061038f9190612800565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806103c181612af7565b91505061035a565b505050565b6033546001600160a01b031633146103f85760405162461bcd60e51b81526004016102a390612a6a565b6001600160a01b03166000908152609760205260409020805460ff19166001179055565b6033546001600160a01b031633146104465760405162461bcd60e51b81526004016102a390612a6a565b6104506000610b56565b565b600054610100900460ff1661046d5760005460ff1615610471565b303b155b61048d5760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff161580156104af576000805461ffff19166101011790555b6104b7610ba8565b80156104c9576000805461ff00191690555b50565b6101056020908152600092835260408084209091529082529020805481906104f390612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461051f90612b60565b801561056c5780601f106105415761010080835404028352916020019161056c565b820191906000526020600020905b81548152906001019060200180831161054f57829003601f168201915b50505050509080600101805461058190612b60565b80601f01602080910402602001604051908101604052809291908181526020018280546105ad90612b60565b80156105fa5780601f106105cf576101008083540402835291602001916105fa565b820191906000526020600020905b8154815290600101906020018083116105dd57829003601f168201915b5050505050905082565b6033546001600160a01b0316331461062e5760405162461bcd60e51b81526004016102a390612a6a565b60005b818110156103c95760016097600085858581811061065157610651612acb565b90506020020160208101906106669190612800565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061069881612af7565b915050610631565b3360009081526097602052604090205460ff16806106c157506106c1610b32565b6106dd5760405162461bcd60e51b81526004016102a390612a9f565b80156106eb576104c9610dc9565b6104c9610e61565b61010a546060906001600160a01b0316336001600160a01b03161461074e5760405162461bcd60e51b8152602060048201526011602482015270686d6d6d6d207768617420646f696e673f60781b60448201526064016102a3565b61010a546040516394e5684760e01b8152600481018490526000916001600160a01b0316906394e56847906024016101406040518083038186803b15801561079557600080fd5b505afa1580156107a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107cd9190612c04565b9050600081600001516108005760405180604001604052806008815260200167447261676f6e202360c01b815250610822565b6040518060400160405280600881526020016757697a617264202360c01b8152505b61082b85610edb565b61083c61083787610fe1565b6115a8565b61084587611710565b6040516020016108589493929190612ce8565b6040516020818303038152906040529050610872816115a8565b6040516020016108829190612ee7565b60405160208183030381529060405292505050919050565b3360009081526097602052604090205460ff16806108bb57506108bb610b32565b6108d75760405162461bcd60e51b81526004016102a390612a9f565b82811461091a5760405162461bcd60e51b81526020600482015260116024820152704d69736d61746368656420696e7075747360781b60448201526064016102a3565b60005b81811015610a9257604051806040016040528084848481811061094257610942612acb565b90506020028101906109549190612f2c565b61095e9080612f4c565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505050908252506020018484848181106109aa576109aa612acb565b90506020028101906109bc9190612f2c565b6109ca906020810190612f4c565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093909452505060ff89168152610105602052604081209150878785818110610a2457610a24612acb565b9050602002016020810190610a399190612f93565b60ff168152602080820192909252604001600020825180519192610a6292849290910190612684565b506020828101518051610a7b9260018501920190612684565b509050508080610a8a90612af7565b91505061091d565b505050505050565b6033546001600160a01b03163314610ac45760405162461bcd60e51b81526004016102a390612a6a565b6001600160a01b038116610b295760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102a3565b6104c981610b56565b600033610b476033546001600160a01b031690565b6001600160a01b031614905090565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610bc35760005460ff1615610bc7565b303b155b610be35760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff16158015610c05576000805461ffff19166101011790555b610c0d6123e9565b610c1561244e565b60408051610160810182526004610120820181815263426f647960e01b610140840152825282518084018452818152631219585960e21b602082810191909152808401919091528351808501855260058082526414dc195b1b60da1b828401528486019190915284518086018652600381526245796560e81b81840152606085015284518086018652838152634e65636b60e01b818401526080850152845180860186528181526409adeeae8d60db1b8184015260a0850152845180860186529081526457696e677360d81b8183015260c0840152835180850185528281526315d85b9960e21b8183015260e084015283518085019094529083526352616e6b60e01b90830152610100810191909152610d339060fc906009612708565b506040805160c081018252600160808201818152600760fb1b60a0840152825282518084018452818152603760f81b6020828101919091528084019190915283518085018552828152601b60f91b81830152838501528351808501909452908352603560f81b908301526060810191909152610db490610106906004612754565b5080156104c9576000805461ff001916905550565b60655460ff1615610e0f5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b60448201526064016102a3565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610e443390565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff16610eaa5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b60448201526064016102a3565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33610e44565b606081610eff5750506040805180820190915260018152600360fc1b602082015290565b8160005b8115610f295780610f1381612af7565b9150610f229050600a83612fc6565b9150610f03565b60008167ffffffffffffffff811115610f4457610f44612b9b565b6040519080825280601f01601f191660200182016040528015610f6e576020820181803683370190505b5090505b8415610fd957610f83600183612fda565b9150610f90600a86612ff1565b610f9b906030613005565b60f81b818381518110610fb057610fb0612acb565b60200101906001600160f81b031916908160001a905350610fd2600a86612fc6565b9450610f72565b949350505050565b61010a546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b15801561102d57600080fd5b505afa158015611041573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110659190612c04565b90506000816000015161107957600961107c565b60005b905060006111f461010582611091858261301d565b60ff1660ff1681526020019081526020016000206000856020015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461110790612b60565b80156111545780601f1061112957610100808354040283529160200191611154565b820191906000526020600020905b81548152906001019060200180831161113757829003601f168201915b5050505050815260200160018201805461116d90612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461119990612b60565b80156111e65780601f106111bb576101008083540402835291602001916111e6565b820191906000526020600020905b8154815290600101906020018083116111c957829003601f168201915b5050505050815250506124be565b835161125d57611258610105600061120d86600161301d565b60ff1660ff168152602001908152602001600020600086610120015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b6112ba565b6112ba610105600061127086600161301d565b60ff1660ff1681526020019081526020016000206000866040015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b84516112d55760405180602001604052806000815250611332565b61133261010560006112e887600261301d565b60ff1660ff1681526020019081526020016000206000876060015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b61138f610105600061134588600361301d565b60ff1660ff1681526020019081526020016000206000886080015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b86516113aa5760405180602001604052806000815250611407565b61140761010560006113bd89600461301d565b60ff1660ff16815260200190815260200160002060008960a0015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b611464610105600061141a8a600561301d565b60ff1660ff16815260200190815260200160002060008a60c0015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b88516114cd576114c8610105600061147d8b600661301d565b60ff1660ff16815260200190815260200160002060008b610100015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b6114de565b604051806020016040528060008152505b89516114f95760405180602001604052806000815250611556565b611556610105600061150c8c600761301d565b60ff1660ff16815260200190815260200160002060008c60e0015160ff1660ff1681526020019081526020016000206040518060400160405290816000820180546110db90612b60565b60405160200161156d989796959493929190613042565b60405160208183030381529060405290508060405160200161158f91906130e7565b6040516020818303038152906040529350505050919050565b60608151600014156115c857505060408051602081019091526000815290565b60006040518060600160405280604081526020016135e760409139905060006003845160026115f79190613005565b6116019190612fc6565b61160c9060046131d4565b9050600061161b826020613005565b67ffffffffffffffff81111561163357611633612b9b565b6040519080825280601f01601f19166020018201604052801561165d576020820181803683370190505b509050818152600183018586518101602084015b818310156116cb5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401611671565b6003895106600181146116e557600281146116f657611702565b613d3d60f01b600119830152611702565b603d60f81b6000198301525b509398975050505050505050565b61010a546040516394e5684760e01b8152600481018390526060916000916001600160a01b03909116906394e56847906024016101406040518083038186803b15801561175c57600080fd5b505afa158015611770573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117949190612c04565b90506060816000015115611e675761190160fc60000180546117b590612b60565b80601f01602080910402602001604051908101604052809291908181526020018280546117e190612b60565b801561182e5780601f106118035761010080835404028352916020019161182e565b820191906000526020600020905b81548152906001019060200180831161181157829003601f168201915b5050600080805261010560209081528881015160ff1682527fa5baec7d73105a3c7298203bb205bbc41b63fa384ae73a6016b890a7ca29ae2d905260409020805490935061187e92509050612b60565b80601f01602080910402602001604051908101604052809291908181526020018280546118aa90612b60565b80156118f75780601f106118cc576101008083540402835291602001916118f7565b820191906000526020600020905b8154815290600101906020018083116118da57829003601f168201915b50505050506124eb565b6119e060fc600101805461191490612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461194090612b60565b801561198d5780601f106119625761010080835404028352916020019161198d565b820191906000526020600020905b81548152906001019060200180831161197057829003601f168201915b505060016000908152610105602090815260408a81015160ff1683527f289cf86abe4b423e1a6f14f7e2803f901e31fa1f06af778d80854575e68593c39091529020805490935061187e92509050612b60565b611abf60fc60020180546119f390612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611a1f90612b60565b8015611a6c5780601f10611a4157610100808354040283529160200191611a6c565b820191906000526020600020905b815481529060010190602001808311611a4f57829003601f168201915b505060026000908152610105602090815260608b015160ff1682527f290777f2a1308a8344d1cc09e8c50a20f27e6fb1ff9f173900f4a7b230cfc88d905260409020805490935061187e92509050612b60565b611b9e60fc6003018054611ad290612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611afe90612b60565b8015611b4b5780601f10611b2057610100808354040283529160200191611b4b565b820191906000526020600020905b815481529060010190602001808311611b2e57829003601f168201915b505060036000908152610105602090815260808c015160ff1682527f1e6343f19cd635d93a52712ef7be28fea65f87c110fcef82b28f8ea0e1c97cae905260409020805490935061187e92509050612b60565b611c7d60fc6004018054611bb190612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611bdd90612b60565b8015611c2a5780601f10611bff57610100808354040283529160200191611c2a565b820191906000526020600020905b815481529060010190602001808311611c0d57829003601f168201915b505060046000908152610105602090815260a08d015160ff1682527ff6f28a4b30f6e3999346e96dc743e9cf1304e909b54dab8d65ab3b7a96642f39905260409020805490935061187e92509050612b60565b611d5c60fc6005018054611c9090612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbc90612b60565b8015611d095780601f10611cde57610100808354040283529160200191611d09565b820191906000526020600020905b815481529060010190602001808311611cec57829003601f168201915b505060056000908152610105602090815260c08e015160ff1682527fbcb4fd7e81c91d65b0be768c3f31ff2a44d33450a0090ac55d3dfa526edb1f4c905260409020805490935061187e92509050612b60565b611e3b60fc6007018054611d6f90612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9b90612b60565b8015611de85780601f10611dbd57610100808354040283529160200191611de8565b820191906000526020600020905b815481529060010190602001808311611dcb57829003601f168201915b505060076000908152610105602090815260e08f015160ff1682527fbd2340fc468e64703cf895c48acda4d106ef2c7f653c0fa67ea082a32deda870905260409020805490935061187e92509050612b60565b604051602001611e5197969594939291906131f3565b6040516020818303038152906040529050612338565b611f4560fc6000018054611e7a90612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611ea690612b60565b8015611ef35780601f10611ec857610100808354040283529160200191611ef3565b820191906000526020600020905b815481529060010190602001808311611ed657829003601f168201915b50506009600090815261010560209081528881015160ff1682527ff22982cc1a1d0783485fedb92a6837d41b98c5622a22a20a8ec32ddc254c2ed3905260409020805490935061187e92509050612b60565b61202560fc6001018054611f5890612b60565b80601f0160208091040260200160405190810160405280929190818152602001828054611f8490612b60565b8015611fd15780601f10611fa657610100808354040283529160200191611fd1565b820191906000526020600020905b815481529060010190602001808311611fb457829003601f168201915b5050600a600090815261010560209081526101208a015160ff1682527fc8600b23f5c3579f1fead83570ad2cba1bced52b29843bba3475720e33617dac905260409020805490935061187e92509050612b60565b61210460fc600301805461203890612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461206490612b60565b80156120b15780601f10612086576101008083540402835291602001916120b1565b820191906000526020600020905b81548152906001019060200180831161209457829003601f168201915b5050600c6000908152610105602090815260808b015160ff1682527f373b210f8b4ea1dfaf850e3d77f3fa26f4c00a83a2db31a1182b5ffd7d0ac4ff905260409020805490935061187e92509050612b60565b6121e360fc600501805461211790612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461214390612b60565b80156121905780601f1061216557610100808354040283529160200191612190565b820191906000526020600020905b81548152906001019060200180831161217357829003601f168201915b5050600e6000908152610105602090815260c08c015160ff1682527fd1396a26092b4aca7eb2359ac6398a813913b60d5103137fffa0126c13d043a8905260409020805490935061187e92509050612b60565b6122c360fc60060180546121f690612b60565b80601f016020809104026020016040519081016040528092919081815260200182805461222290612b60565b801561226f5780601f106122445761010080835404028352916020019161226f565b820191906000526020600020905b81548152906001019060200180831161225257829003601f168201915b5050600f600090815261010560209081526101008d015160ff1682527ff4994a4cdc46a6f551f86569fcda730eaf2433c193bbcb2a9dab0cf13d9cdfdf905260409020805490935061187e92509050612b60565b6123116040518060400160405280600a81526020016952616e6b2053636f726560b01b81525061010689610120015160ff166004811061230557612305612acb565b01805461187e90612b60565b604051602001612326969594939291906132d2565b60405160208183030381529060405290505b80613a9885111561236857604051806040016040528060078152602001661123b2b710189160c91b815250612389565b604051806040016040528060078152602001661123b2b710181160c91b8152505b83516123b5576040518060400160405280600881526020016711223930b3b7b71160c11b8152506123d7565b60405180604001604052806008815260200167112bb4bd30b9321160c11b8152505b60405160200161088293929190613397565b600054610100900460ff166124045760005460ff1615612408565b303b155b6124245760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff16158015612446576000805461ffff19166101011790555b6104b7612517565b600054610100900460ff166124695760005460ff161561246d565b303b155b6124895760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff161580156104b7576000805461ffff191661010117905580156104c9576000805461ff001916905550565b606081602001516040516020016124d59190613456565b6040516020818303038152906040529050919050565b6060828260405160200161250092919061352a565b604051602081830303815290604052905092915050565b600054610100900460ff166125325760005460ff1615612536565b303b155b6125525760405162461bcd60e51b81526004016102a390612b12565b600054610100900460ff16158015612574576000805461ffff19166101011790555b61257c61258c565b6125846125c3565b6104b7610dc9565b600054610100900460ff166125b35760405162461bcd60e51b81526004016102a39061359b565b6125bb6125fa565b610450612621565b600054610100900460ff166125ea5760405162461bcd60e51b81526004016102a39061359b565b6125f26125fa565b610450612651565b600054610100900460ff166104505760405162461bcd60e51b81526004016102a39061359b565b600054610100900460ff166126485760405162461bcd60e51b81526004016102a39061359b565b61045033610b56565b600054610100900460ff166126785760405162461bcd60e51b81526004016102a39061359b565b6065805460ff19169055565b82805461269090612b60565b90600052602060002090601f0160209004810192826126b257600085556126f8565b82601f106126cb57805160ff19168380011785556126f8565b828001600101855582156126f8579182015b828111156126f85782518255916020019190600101906126dd565b50612704929150612794565b5090565b8260098101928215612748579160200282015b828111156127485782518051612738918491602090910190612684565b509160200191906001019061271b565b506127049291506127a9565b8260048101928215612748579160200282015b828111156127485782518051612784918491602090910190612684565b5091602001919060010190612767565b5b808211156127045760008155600101612795565b808211156127045760006127bd82826127c6565b506001016127a9565b5080546127d290612b60565b6000825580601f106127e2575050565b601f0160209004906000526020600020908101906104c99190612794565b60006020828403121561281257600080fd5b81356001600160a01b038116811461282957600080fd5b9392505050565b60008083601f84011261284257600080fd5b50813567ffffffffffffffff81111561285a57600080fd5b6020830191508360208260051b850101111561287557600080fd5b9250929050565b6000806020838503121561288f57600080fd5b823567ffffffffffffffff8111156128a657600080fd5b6128b285828601612830565b90969095509350505050565b60ff811681146104c957600080fd5b600080604083850312156128e057600080fd5b82356128eb816128be565b915060208301356128fb816128be565b809150509250929050565b60005b83811015612921578181015183820152602001612909565b83811115612930576000848401525b50505050565b6000815180845261294e816020860160208601612906565b601f01601f19169290920160200192915050565b6040815260006129756040830185612936565b82810360208401526129878185612936565b95945050505050565b80151581146104c957600080fd5b6000602082840312156129b057600080fd5b813561282981612990565b6000602082840312156129cd57600080fd5b5035919050565b6020815260006128296020830184612936565b6000806000806000606086880312156129ff57600080fd5b8535612a0a816128be565b9450602086013567ffffffffffffffff80821115612a2757600080fd5b612a3389838a01612830565b90965094506040880135915080821115612a4c57600080fd5b50612a5988828901612830565b969995985093965092949392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612b0b57612b0b612ae1565b5060010190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600181811c90821680612b7457607f821691505b60208210811415612b9557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff81118282101715612be357634e487b7160e01b600052604160045260246000fd5b60405290565b8051612bf481612990565b919050565b8051612bf4816128be565b60006101408284031215612c1757600080fd5b612c1f612bb1565b612c2883612be9565b8152612c3660208401612bf9565b6020820152612c4760408401612bf9565b6040820152612c5860608401612bf9565b6060820152612c6960808401612bf9565b6080820152612c7a60a08401612bf9565b60a0820152612c8b60c08401612bf9565b60c0820152612c9c60e08401612bf9565b60e0820152610100612caf818501612bf9565b90820152610120612cc1848201612bf9565b908201529392505050565b60008151612cde818560208601612906565b9290920192915050565b693d913730b6b2911d101160b11b81528451600090612d0e81600a850160208a01612906565b855190830190612d2581600a840160208a01612906565b7f222c20226465736372697074696f6e223a202254686f7573616e6473206f6620600a92909101918201527f57697a6172647320616e6420447261676f6e7320636f6d7065746520696e2061602a8201527f20746f77657220696e20746865206d65746176657273652e20412074656d7074604a8201527f696e67207072697a65206f6620244750206177616974732c2077697468206465606a8201527f61646c792068696768207374616b65732e20416c6c20746865206d6574616461608a8201527f746120616e6420696d61676573206172652067656e65726174656420616e642060aa8201527f73746f7265642031303025206f6e2d636861696e2e204e6f20495046532e204e60ca8201527f4f204150492e204a7573742074686520457468657265756d20626c6f636b636860ea8201527f61696e2e222c2022696d616765223a2022646174613a696d6167652f7376672b61010a8201526a1e1b5b0ed8985cd94d8d0b60aa1b61012a820152612edc612ecf612ec9612ead610135850189612ccc565b6f1116101130ba3a3934b13aba32b9911d60811b815260100190565b86612ccc565b607d60f81b815260010190565b979650505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815260008251612f1f81601d850160208701612906565b91909101601d0192915050565b60008235603e19833603018112612f4257600080fd5b9190910192915050565b6000808335601e19843603018112612f6357600080fd5b83018035915067ffffffffffffffff821115612f7e57600080fd5b60200191503681900382131561287557600080fd5b600060208284031215612fa557600080fd5b8135612829816128be565b634e487b7160e01b600052601260045260246000fd5b600082612fd557612fd5612fb0565b500490565b600082821015612fec57612fec612ae1565b500390565b60008261300057613000612fb0565b500690565b6000821982111561301857613018612ae1565b500190565b600060ff821660ff84168060ff0382111561303a5761303a612ae1565b019392505050565b6000895160206130558285838f01612906565b8a51918401916130688184848f01612906565b8a5192019161307a8184848e01612906565b895192019161308c8184848d01612906565b885192019161309e8184848c01612906565b87519201916130b08184848b01612906565b86519201916130c28184848a01612906565b85519201916130d48184848901612906565b919091019b9a5050505050505050505050565b7f3c7376672069643d22776e644e4654222077696474683d22313030252220686581527f696768743d2231303025222076657273696f6e3d22312e31222076696577426f60208201527f783d223020302034302034302220786d6c6e733d22687474703a2f2f7777772e60408201527f77332e6f72672f323030302f7376672220786d6c6e733a786c696e6b3d22687460608201527f74703a2f2f7777772e77332e6f72672f313939392f786c696e6b223e000000006080820152600082516131b781609c850160208701612906565b651e17b9bb339f60d11b609c93909101928301525060a201919050565b60008160001904831182151516156131ee576131ee612ae1565b500290565b6000885160206132068285838e01612906565b8184019150600b60fa1b8083528a516132258160018601858f01612906565b6001930192830181905289516132418160028601858e01612906565b60029301928301819052885161325d8160038601858d01612906565b6003930192830181905287516132798160048601858c01612906565b600493019283015285516132938160058501848a01612906565b6132c26132b56132af600584870101600b60fa1b815260010190565b88612ccc565b600b60fa1b815260010190565b9c9b505050505050505050505050565b6000875160206132e58285838d01612906565b8184019150600b60fa1b80835289516133048160018601858e01612906565b6001930192830181905288516133208160028601858d01612906565b60029301928301819052875161333c8160038601858c01612906565b6003930192830181905286516133588160048601858b01612906565b600493019283015284516133728160058501848901612906565b613388600582850101600b60fa1b815260010190565b9b9a5050505050505050505050565b605b60f81b8152600084516133b3816001850160208901612906565b7f7b2274726169745f74797065223a2247656e65726174696f6e222c2276616c756001918401918201526232911d60e91b602182015284516133fc816024840160208901612906565b7f7d2c7b2274726169745f74797065223a2254797065222c2276616c7565223a0060249290910191820152835161343a816043840160208801612906565b617d5d60f01b6043929091019182015260450195945050505050565b7f3c696d61676520783d22342220793d2234222077696474683d2233322220686581527f696768743d2233322220696d6167652d72656e646572696e673d22706978656c60208201527f6174656422207072657365727665417370656374526174696f3d22784d69645960408201527f4d69642220786c696e6b3a687265663d22646174613a696d6167652f706e673b60608201526618985cd94d8d0b60ca1b608082015260008251613510816087850160208701612906565b6211179f60e91b6087939091019283015250608a01919050565b6e3d913a3930b4ba2fba3cb832911d1160891b8152825160009061355581600f850160208801612906565b6a1116113b30b63ab2911d1160a91b600f91840191820152835161358081601a840160208801612906565b61227d60f01b601a9290910191820152601c01949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220725522120c82674f4af3933f0c76fa5e7dfe28ad505dc27d7af637385a459fc664736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "tokenURI(uint256)": {
        "params": {
          "tokenId": "the ID of the token to generate the metadata for"
        },
        "returns": {
          "_0": "a base64 encoded JSON dictionary of the token's metadata and SVG"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uploadTraits(uint8,uint8[],(string,string)[])": {
        "params": {
          "traitType": "the trait type to upload the traits for (see traitTypes for a mapping)",
          "traits": "the names and base64 encoded PNGs for each trait"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setWnD(address)": {
        "notice": "ADMIN "
      },
      "tokenURI(uint256)": {
        "notice": "generates a base64 encoded metadata response without referencing off-chain content"
      },
      "uploadTraits(uint8,uint8[],(string,string)[])": {
        "notice": "administrative to upload the names and images associated with each trait"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2787,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2790,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6838,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2665,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2779,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2875,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 2966,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12019,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "admins",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12179,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 12243,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 20178,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "_traitTypes",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_string_storage)9_storage"
      },
      {
        "astId": 20185,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "traitData",
        "offset": 0,
        "slot": "261",
        "type": "t_mapping(t_uint8,t_mapping(t_uint8,t_struct(Trait)20174_storage))"
      },
      {
        "astId": 20189,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "_ranks",
        "offset": 0,
        "slot": "262",
        "type": "t_array(t_string_storage)4_storage"
      },
      {
        "astId": 20192,
        "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
        "label": "wnd",
        "offset": 0,
        "slot": "266",
        "type": "t_contract(IWnD)20323"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)4_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_string_storage)9_storage": {
        "base": "t_string_storage",
        "encoding": "inplace",
        "label": "string[9]",
        "numberOfBytes": "288"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IWnD)20323": {
        "encoding": "inplace",
        "label": "contract IWnD",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint8,t_mapping(t_uint8,t_struct(Trait)20174_storage))": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => mapping(uint8 => struct TraitsState.Trait))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint8,t_struct(Trait)20174_storage)"
      },
      "t_mapping(t_uint8,t_struct(Trait)20174_storage)": {
        "encoding": "mapping",
        "key": "t_uint8",
        "label": "mapping(uint8 => struct TraitsState.Trait)",
        "numberOfBytes": "32",
        "value": "t_struct(Trait)20174_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Trait)20174_storage": {
        "encoding": "inplace",
        "label": "struct TraitsState.Trait",
        "members": [
          {
            "astId": 20171,
            "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 20173,
            "contract": "contracts/wnd/tokens/traits/Traits.sol:Traits",
            "label": "png",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}