{
  "address": "0xD2Ed02a97f82fCAF9482128732665F6CC5363483",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_rewardId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_gpAmt",
          "type": "uint256"
        }
      ],
      "name": "RewardMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        }
      ],
      "name": "TrainingStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ODDS_TOTAL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "_getTrainingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areContractsSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "armorDamageReductionAmt",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseChanceWizardBurned",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseDamage",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseHP",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "canWizardPlay",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "consumables",
      "outputs": [
        {
          "internalType": "contract IConsumables",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "damagePercentChance",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "elixirOfHealingId",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameCooldownTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gp",
      "outputs": [
        {
          "internalType": "contract IGP",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "graveyard",
      "outputs": [
        {
          "internalType": "contract IGraveyard",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "hasArmor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_quantity",
          "type": "uint8"
        }
      ],
      "name": "healWithElixir",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_quantities",
          "type": "uint8[]"
        }
      ],
      "name": "healWithElixirBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isWizardTraining",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBurnReduction",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "maxHPForToken",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "randomizer",
      "outputs": [
        {
          "internalType": "contract IRandomizerCL",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "resetWizard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "revealTrainingReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "revealTrainingRewardBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rift",
      "outputs": [
        {
          "internalType": "contract IRift",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sacrificialAlter",
      "outputs": [
        {
          "internalType": "contract ISacrificialAlter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_worldAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sacrificialAlterAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_consumables",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_gpAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wndAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_trainingProficiencyAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_randomizerAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_riftAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_graveyard",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_gpAmts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_gpOdds",
          "type": "uint32[]"
        }
      ],
      "name": "setGPRewardSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gameCooldownTime",
          "type": "uint256"
        }
      ],
      "name": "setGameCooldown",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldPause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_proficiencyToGamesPlayed",
          "type": "uint8[]"
        }
      ],
      "name": "setProficiencyToGamesPlayed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_rewardIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint32[]",
          "name": "_rewardOdds",
          "type": "uint32[]"
        },
        {
          "components": [
            {
              "internalType": "uint16[9]",
              "name": "min",
              "type": "uint16[9]"
            },
            {
              "internalType": "uint16[9]",
              "name": "max",
              "type": "uint16[9]"
            }
          ],
          "internalType": "struct TrainingGameState.RewardMultiplier[]",
          "name": "_rewardMultipliers",
          "type": "tuple[]"
        }
      ],
      "name": "setRewardSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_trainingFee",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_baseChanceWizardBurned",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "_maxBurnReduction",
          "type": "uint8"
        }
      ],
      "name": "setTrainingSettings",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "timeWizardCanPlayNext",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdToInfo",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "timeNextPlay",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gamesPlayed",
          "type": "uint32"
        },
        {
          "internalType": "uint8",
          "name": "hp",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "hasArmor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "equipWizard",
          "type": "bool"
        }
      ],
      "name": "train",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEquipped",
              "type": "bool"
            }
          ],
          "internalType": "struct TrainingInfo[]",
          "name": "_tokensToTrain",
          "type": "tuple[]"
        }
      ],
      "name": "trainBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trainingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trainingProficiency",
      "outputs": [
        {
          "internalType": "contract ITrainingProficiency",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wnd",
      "outputs": [
        {
          "internalType": "contract IWnD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "world",
      "outputs": [
        {
          "internalType": "contract IWorld",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x5745c05e05c74c98e3ea2d723834e03fcc1ccb52fe5ae2b021bab9a12d774a9f",
  "receipt": {
    "to": null,
    "from": "0xC7dEFA20Ec54917669f29e15D1ACB7c121b4780c",
    "contractAddress": "0xD2Ed02a97f82fCAF9482128732665F6CC5363483",
    "transactionIndex": 37,
    "gasUsed": "4231411",
    "logsBloom": "0x
    "blockHash": "0x244815f5b2b37fb5869eb9b55ff3cbec12c8efecc88041572fb71b35fae64860",
    "transactionHash": "0x5745c05e05c74c98e3ea2d723834e03fcc1ccb52fe5ae2b021bab9a12d774a9f",
    "logs": [
      {
        "transactionIndex": 37,
        "blockNumber": 28015142,
        "transactionHash": "0x5745c05e05c74c98e3ea2d723834e03fcc1ccb52fe5ae2b021bab9a12d774a9f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002a98f3e64deebe9000000000000000000000000000000000000000000000064a1766cac1cfd3a170000000000000000000000000000000000000000000065cfe88cd4502441fede0000000000000000000000000000000000000000000000649eccdd6db81e4e2e0000000000000000000000000000000000000000000065cfeb36638e8920eac7",
        "logIndex": 169,
        "blockHash": "0x244815f5b2b37fb5869eb9b55ff3cbec12c8efecc88041572fb71b35fae64860"
      }
    ],
    "blockNumber": 28015142,
    "cumulativeGasUsed": "11262063",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "bb35e662fa4641ee485d9194edd52338",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_rewardId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_gpAmt\",\"type\":\"uint256\"}],\"name\":\"RewardMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"}],\"name\":\"TrainingStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ODDS_TOTAL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"_getTrainingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areContractsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"armorDamageReductionAmt\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseChanceWizardBurned\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseDamage\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseHP\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"canWizardPlay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"consumables\",\"outputs\":[{\"internalType\":\"contract IConsumables\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"damagePercentChance\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elixirOfHealingId\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCooldownTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gp\",\"outputs\":[{\"internalType\":\"contract IGP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"graveyard\",\"outputs\":[{\"internalType\":\"contract IGraveyard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"hasArmor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_quantity\",\"type\":\"uint8\"}],\"name\":\"healWithElixir\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_quantities\",\"type\":\"uint8[]\"}],\"name\":\"healWithElixirBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isWizardTraining\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurnReduction\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"maxHPForToken\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randomizer\",\"outputs\":[{\"internalType\":\"contract IRandomizerCL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resetWizard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"revealTrainingReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"revealTrainingRewardBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rift\",\"outputs\":[{\"internalType\":\"contract IRift\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sacrificialAlter\",\"outputs\":[{\"internalType\":\"contract ISacrificialAlter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_worldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sacrificialAlterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_consumables\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gpAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wndAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trainingProficiencyAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_randomizerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_riftAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_graveyard\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_gpAmts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_gpOdds\",\"type\":\"uint32[]\"}],\"name\":\"setGPRewardSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameCooldownTime\",\"type\":\"uint256\"}],\"name\":\"setGameCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_proficiencyToGamesPlayed\",\"type\":\"uint8[]\"}],\"name\":\"setProficiencyToGamesPlayed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_rewardIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint32[]\",\"name\":\"_rewardOdds\",\"type\":\"uint32[]\"},{\"components\":[{\"internalType\":\"uint16[9]\",\"name\":\"min\",\"type\":\"uint16[9]\"},{\"internalType\":\"uint16[9]\",\"name\":\"max\",\"type\":\"uint16[9]\"}],\"internalType\":\"struct TrainingGameState.RewardMultiplier[]\",\"name\":\"_rewardMultipliers\",\"type\":\"tuple[]\"}],\"name\":\"setRewardSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trainingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_baseChanceWizardBurned\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"_maxBurnReduction\",\"type\":\"uint8\"}],\"name\":\"setTrainingSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"timeWizardCanPlayNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdToInfo\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"timeNextPlay\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gamesPlayed\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"hp\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"hasArmor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"equipWizard\",\"type\":\"bool\"}],\"name\":\"train\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEquipped\",\"type\":\"bool\"}],\"internalType\":\"struct TrainingInfo[]\",\"name\":\"_tokensToTrain\",\"type\":\"tuple[]\"}],\"name\":\"trainBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingProficiency\",\"outputs\":[{\"internalType\":\"contract ITrainingProficiency\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnd\",\"outputs\":[{\"internalType\":\"contract IWnD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"world\",\"outputs\":[{\"internalType\":\"contract IWorld\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wnd/traininggame/TrainingGame.sol\":\"TrainingGame\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x19bc90c8301914433c5e9b74a4eaac8942f64ea79d509f445799459fa10695da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1edf4e6819997d1820aea89eff73d4fdaeff0bb87ff2f2b4cb6ad60bfe5ba63c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x52381f5750ecefd05d7d5ef3d5ee3aaf60082307adebb003a367ddfa7ca01a37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x998a349fd3c0ed252f0d2a8b8f2385911b11ae5d40f102a3f3f596d235368c68\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5ca0eb1120133a6d0799752532d4638048391823a2b623c4fe9ff46e262266fb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4997774f1c7cd4f3596374621fc674b123a38e36e2ff1d17fbdc9d1111ed6a61\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x663079de534a3b3b4952558df1027a2698c793cc5032a21ad6767764e8de834f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xe68ed7fb8766ed1e888291f881e36b616037f852b37d96877045319ad298ba87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/shared/Adminable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Utilities.sol\\\";\\n\\ncontract Adminable is Utilities {\\n\\n    mapping(address => bool) private admins;\\n\\n    function addAdmin(address _address) external onlyOwner {\\n        require(_address.code.length > 0, \\\"must be a contract\\\");\\n        admins[_address] = true;\\n    }\\n\\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\\n        uint256 len = _addresses.length;\\n        for(uint256 i = 0; i < len; i++) {\\n            require(_addresses[i].code.length > 0, \\\"must be a contract\\\");\\n            admins[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address _address) external onlyOwner {\\n        admins[_address] = false;\\n    }\\n\\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\\n        uint256 len = _addresses.length;\\n        for(uint256 i = 0; i < len; i++) {\\n            admins[_addresses[i]] = false;\\n        }\\n    }\\n\\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\\n        if(_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function isAdmin(address _address) public view returns(bool) {\\n        return admins[_address];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(admins[msg.sender] || isOwner(), \\\"Not admin or owner\\\");\\n        _;\\n    }\\n}\",\"keccak256\":\"0x113937a5d75f06ee09118e69b30ad952bb59a26fef8d25d41f0f406c261581cc\",\"license\":\"MIT\"},\"contracts/shared/AdminableUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./UtilitiesUpgradeable.sol\\\";\\n\\n// Do not add state to this contract.\\n//\\ncontract AdminableUpgradeable is UtilitiesUpgradeable {\\n\\n    mapping(address => bool) private admins;\\n\\n    function __Adminable_init() internal initializer {\\n        UtilitiesUpgradeable.__Utilities__init();\\n    }\\n\\n    function addAdmin(address _address) external onlyOwner {\\n        admins[_address] = true;\\n    }\\n\\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address _address) external onlyOwner {\\n        admins[_address] = false;\\n    }\\n\\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = false;\\n        }\\n    }\\n\\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\\n        if(_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function isAdmin(address _address) public view returns(bool) {\\n        return admins[_address];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(admins[msg.sender] || isOwner(), \\\"Not admin or owner\\\");\\n        _;\\n    }\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0xb9c7084cdb7d0cc6d4f3e7ce6e68e5f75c0a99bf311b1975ed27d8ff3088c7b6\",\"license\":\"MIT\"},\"contracts/shared/Utilities.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\ncontract Utilities is Ownable, Pausable {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"0 address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroLength(uint[] memory _array) {\\n        require(_array.length > 0, \\\"Empty array\\\");\\n        _;\\n    }\\n\\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\\n        require(_array1.length == _array2.length, \\\"Unequal lengths\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        /* solhint-disable avoid-tx-origin */\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    function isOwner() internal view returns(bool) {\\n        return owner() == msg.sender;\\n    }\\n}\",\"keccak256\":\"0x74fc1f86dde49f4d0e288196970b6aedc51cb71c5f8b774f66db2d336eac670b\",\"license\":\"MIT\"},\"contracts/shared/UtilitiesUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract UtilitiesUpgradeable is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n\\n    function __Utilities__init() internal initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        _pause();\\n    }\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"0 address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroLength(uint[] memory _array) {\\n        require(_array.length > 0, \\\"Empty array\\\");\\n        _;\\n    }\\n\\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\\n        require(_array1.length == _array2.length, \\\"Unequal lengths\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        /* solhint-disable avoid-tx-origin */\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    function isOwner() internal view returns(bool) {\\n        return owner() == msg.sender;\\n    }\\n}\",\"keccak256\":\"0x6d8894c4823d477c71487e9d325ab3d7a595723868621f522b664f717341769b\",\"license\":\"MIT\"},\"contracts/shared/randomizercl/IRandomizerCL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizerCL {\\n    // Returns a request ID for the random number. This should be kept and mapped to whatever the contract\\n    // is tracking randoms for.\\n    // Admin only.\\n    function getRandomNumber() external returns(bytes32);\\n\\n    // Returns the random for the given request ID.\\n    // Will revert if the random is not ready.\\n    function randomForRequestID(bytes32 _requestID) external view returns(uint256);\\n\\n    // Returns if the request ID has been fulfilled yet.\\n    function isRequestIDFulfilled(bytes32 _requestID) external view returns(bool);\\n}\",\"keccak256\":\"0x0543974321e677f332060f68731869f3904fb63c2a430945905ce639a441aca7\",\"license\":\"MIT\"},\"contracts/wnd/graveyard/IGraveyard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGraveyard {\\n    // sends the given wizard tokenId to this contract to be considered 'dead'. Can be revived though, so that's cool.\\n    function killWizard(uint256 _tokenId, address _owner) external;\\n    // attempts to bring the given dead wizard tokenId back to life and give to caller. This token must have been owned by the caller when it died.\\n    function reviveWizard(uint256 _tokenId) external;\\n    // attempts to revive many wizards at once.\\n    function reviveWizardBatch(uint256[] calldata _tokenIds) external;\\n    // Returns the rift tier for the given user based on how much GP is staked at the rift.\\n    function getFallenWizardsForAddr(address _address) external view returns(uint256[] memory);\\n}\",\"keccak256\":\"0xf74bad0c1ffe0d20254757a47d589dd6e6433eec14ce4ed35ad41998f804cb58\",\"license\":\"MIT\"},\"contracts/wnd/rift/IRift.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../shared/IDragonStakable.sol\\\";\\n\\ninterface IRift is IDragonStakable {\\n\\n    // Returns the rift tier for the given user based on how much GP is staked at the rift.\\n    function getRiftTier(address _address) external view returns(uint256);\\n}\",\"keccak256\":\"0xda50f9362b0d1afec30ad7082dc3f805e6712e561d9b97f902f5c81debf66828\",\"license\":\"MIT\"},\"contracts/wnd/shared/IDragonStakable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDragonStakable {\\n    function stake(uint256 _tokenId, address _owner) external;\\n    // doTransfer handles whether or not the NFT should change wallet owners\\n    // Set to false when 'moving locations' without having to transfer the NFT twice.\\n    function unstake(uint256 _tokenId, bool doTransfer) external;\\n}\",\"keccak256\":\"0xdae4f4ec350a6ad2a2ca839503128107d7ef3316f4c5d92c26d0cd1cfac544e0\",\"license\":\"MIT\"},\"contracts/wnd/tokens/consumables/IConsumables.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface IConsumables is IERC1155Upgradeable {\\n    function mint(uint256 typeId, uint256 qty, address recipient) external;\\n    function burn(uint256 typeId, uint256 qty, address burnFrom) external;\\n    function adminSafeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount) external;\\n    function adminSafeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts) external;\\n}\",\"keccak256\":\"0xf2f0b559a0da8dc3842b6473dee404a81626dac03fcfd9d1c405864fdedc8f87\",\"license\":\"MIT LICENSE\"},\"contracts/wnd/tokens/gp/IGP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IGP is IERC20Upgradeable {\\n    function mint(address to, uint256 amount) external;\\n    function burn(address from, uint256 amount) external;\\n}\",\"keccak256\":\"0xfe59aa2665b8a7443d0e2a36065ec665bcd4d0b368476dd892a6d679e1de44d7\",\"license\":\"MIT\"},\"contracts/wnd/tokens/sacrificialalter/ISacrificialAlter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\n\\ninterface ISacrificialAlter is IERC1155Upgradeable {\\n    function mint(uint256 typeId, uint16 qty, address recipient) external;\\n    function burn(uint256 typeId, uint16 qty, address burnFrom) external;\\n    function adminSafeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount) external;\\n    function adminSafeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts) external;\\n}\",\"keccak256\":\"0x69eeea47d2dbbae9d62cd1776fba4f08d1ea0f7e9aede4b8ee588e8bbe9c40c9\",\"license\":\"MIT\"},\"contracts/wnd/tokens/wnd/IWnD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\\ninterface IWnDRoot {\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function getTokenTraits(uint256 _tokenId) external returns(WizardDragon memory);\\n    function ownerOf(uint256 _tokenId) external returns(address);\\n    function approve(address _to, uint256 _tokenId) external;\\n}\\n\\ninterface IWnD is IERC721EnumerableUpgradeable {\\n    function mint(address _to, uint256 _tokenId, WizardDragon calldata _traits) external;\\n    function burn(uint256 _tokenId) external;\\n    function isWizard(uint256 _tokenId) external view returns(bool);\\n    function getTokenTraits(uint256 _tokenId) external view returns(WizardDragon memory);\\n    function exists(uint256 _tokenId) external view returns(bool);\\n    function adminTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\\nstruct WizardDragon {\\n    bool isWizard;\\n    uint8 body;\\n    uint8 head;\\n    uint8 spell;\\n    uint8 eyes;\\n    uint8 neck;\\n    uint8 mouth;\\n    uint8 wand;\\n    uint8 tail;\\n    uint8 rankIndex;\\n}\",\"keccak256\":\"0xd2b1e55a748db0f2b8d325ade1825479f655ed36e08ef977ffc1484cd9a403fa\",\"license\":\"MIT\"},\"contracts/wnd/traininggame/ITrainingGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITrainingGame {\\n\\n    // Trains the given wizard. Must be staked at the training grounds.\\n    function train(uint256 _tokenId, bool equipWizard) external;\\n\\n    // Trains the given wizards. Must be staked at the training grounds.\\n    function trainBatch(TrainingInfo[] calldata _tokensToTrain) external;\\n\\n    // Reveals the reward for the given token id.\\n    function revealTrainingReward(uint256 _tokenId) external;\\n\\n\\n    // Reveals the rewards for the given token ids.\\n    function revealTrainingRewardBatch(uint256[] calldata _tokenIds) external;\\n\\n    // Indicates if the given wizard can play the game.\\n    function canWizardPlay(uint256 _tokenId) external view returns(bool);\\n\\n    // Returns the timestamp the wizard can next play the game. May be in the past.\\n    function timeWizardCanPlayNext(uint256 _tokenId) external view returns(uint256);\\n\\n    // Returns if a wizard is currently training.\\n    function isWizardTraining(uint256 _tokenId) external view returns(bool);\\n\\n    // Resets the stats of the Wizard\\n    function resetWizard(uint256 _tokenId) external;\\n}\\n\\nstruct TrainingInfo {\\n    uint256 tokenId;\\n    bool isEquipped;\\n}\",\"keccak256\":\"0x98ff3bcfd981d0bbb8f9183d8af3b59d7ed1482a57f856118911709c79393492\",\"license\":\"MIT\"},\"contracts/wnd/traininggame/TrainingGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./TrainingGameContracts.sol\\\";\\nimport \\\"./TrainingGameTimeKeeper.sol\\\";\\nimport \\\"./TrainingGameArmor.sol\\\";\\nimport \\\"./TrainingGameRewards.sol\\\";\\n\\ncontract TrainingGame is Initializable, TrainingGameRewards, TrainingGameArmor {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    function initialize() external initializer {\\n        TrainingGameRewards.__TrainingGameRewards_init();\\n        TrainingGameArmor.__TrainingGameArmor_init();\\n    }\\n\\n    function setTrainingSettings(\\n        uint256 _trainingFee,\\n        uint8 _baseChanceWizardBurned,\\n        uint8 _maxBurnReduction)\\n        external onlyAdminOrOwner\\n    {\\n        require(_baseChanceWizardBurned >= _maxBurnReduction, \\\"Bad settings\\\");\\n\\n        trainingFee = _trainingFee;\\n        baseChanceWizardBurned = _baseChanceWizardBurned;\\n        maxBurnReduction = _maxBurnReduction;\\n    }\\n\\n    function trainBatch(TrainingInfo[] calldata _tokensToTrain) external override contractsAreSet whenNotPaused trainingRewardsSet onlyEOA {\\n        uint256 len = _tokensToTrain.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            TrainingInfo memory info = _tokensToTrain[i];\\n            _train(info.tokenId, info.isEquipped);\\n        }\\n    }\\n\\n    function train(uint256 _tokenId, bool equipWizard) external override contractsAreSet whenNotPaused trainingRewardsSet onlyEOA {\\n        _train(_tokenId, equipWizard);\\n    }\\n\\n    function _train(uint256 _tokenId, bool equipWizard) internal {\\n        require(wnd.isWizard(_tokenId), \\\"Not a wizard\\\");\\n        require(canWizardPlay(_tokenId), \\\"Wizard must cool down\\\");\\n        require(!isWizardTraining(_tokenId), \\\"Already training\\\");\\n\\n        address _owner = world.ownerOfTokenId(_tokenId);\\n        require(_owner == msg.sender || isAdmin(msg.sender), \\\"Not owner of token\\\");\\n\\n        uint256 _trainingFee = _getTrainingFee(_tokenId);\\n\\n        require(gp.balanceOf(_owner) >= _trainingFee, \\\"Not enough GP\\\");\\n\\n        // Must actually be at the training grounds.\\n        require(world.locationOfToken(_tokenId) == Location.TRAINING_GROUNDS, \\\"Not staked at TG\\\");\\n        if(equipWizard) {\\n            require(consumables.balanceOf(_owner, equipmentTokenId) > 0, \\\"No armor to equip\\\");\\n            equipArmor(_tokenId, _owner);\\n        }\\n\\n        updateNextPlayTime(_tokenId, _owner);\\n\\n        gp.burn(_owner, _trainingFee);\\n\\n        if(tokenIdToInfo[_tokenId].gamesPlayed == 0\\n            && tokenIdToInfo[_tokenId].hp == 0)\\n        {\\n            tokenIdToInfo[_tokenId].hp = maxHPForToken(_tokenId);\\n        }\\n\\n        bytes32 _requestId = randomizer.getRandomNumber();\\n        tokenIdToInfo[_tokenId].requestId = _requestId;\\n\\n        emit TrainingStarted(_owner, _tokenId, _requestId);\\n    }\\n\\n    function revealTrainingRewardBatch(uint256[] calldata _tokenIds) external override contractsAreSet trainingRewardsSet {\\n        uint256 len = _tokenIds.length;\\n        require(len > 0, \\\"No wizards selected\\\");\\n        for (uint256 i = 0; i < len; i++) {\\n            _revealTraining(_tokenIds[i]);   \\n        }\\n    }\\n\\n    function revealTrainingReward(uint256 _tokenId) external override contractsAreSet trainingRewardsSet {\\n        _revealTraining(_tokenId);\\n    }\\n\\n    function _revealTraining(uint256 _tokenId) internal {\\n        bytes32 _requestId = tokenIdToInfo[_tokenId].requestId;\\n        require(_requestId != 0, \\\"Not training\\\");\\n        require(randomizer.isRequestIDFulfilled(_requestId), \\\"No random yet\\\");\\n\\n        address _owner = world.ownerOfTokenId(_tokenId);\\n        require(_owner == msg.sender || isAdmin(msg.sender), \\\"Bad permissions\\\");\\n\\n        uint256 _randomness = randomizer.randomForRequestID(_requestId);\\n\\n        _processReward(_tokenId, _owner, _randomness);\\n    }\\n\\n    function _processReward(uint256 _tokenId, address _owner, uint256 _randomness) private {\\n\\n        uint8 _wizardProficiency = trainingProficiency.proficiencyForWizard(_tokenId);\\n\\n        uint8 _chanceWizardKilled = _chanceWizardDies(_wizardProficiency);\\n\\n        bool _wasWizardKilled;\\n\\n        uint256 _killResult = _randomness % 100;\\n        bool wouldDie = _killResult < _chanceWizardKilled;\\n        if(wouldDie && !hasArmor(_tokenId)) {\\n            // Get killed.\\n            graveyard.killWizard(_tokenId, _owner);\\n            _wasWizardKilled = true;\\n        } else {\\n            if(wouldDie && hasArmor(_tokenId)) {\\n                burnArmor(_tokenId);\\n            }\\n           _randomness = uint256(keccak256(abi.encode(_randomness, _randomness)));\\n\\n           uint256 _damageRoll = _randomness % 100;\\n\\n           uint256 _damageChance = _chanceWizardDamaged(_wizardProficiency);\\n\\n           if(_damageRoll < _damageChance) {\\n                uint8 damageTaken = baseDamage;\\n                if(hasArmor(_tokenId)) {\\n                    damageTaken -= armorDamageReductionAmt;\\n                    burnArmor(_tokenId);\\n                }\\n                // Death\\n                if(tokenIdToInfo[_tokenId].hp <= damageTaken) {\\n                    tokenIdToInfo[_tokenId].hp = 0;\\n                    graveyard.killWizard(_tokenId, _owner);\\n                    _wasWizardKilled = true;\\n                } else {\\n                    tokenIdToInfo[_tokenId].hp -= damageTaken;\\n                }\\n           }\\n\\n            if(!_wasWizardKilled) {\\n                // To the rewards!\\n                uint256 _newRandom = uint256(keccak256(abi.encode(_randomness, _tokenId)));\\n\\n                _findAndSendRewards(_tokenId, _owner, _newRandom, _wizardProficiency);\\n\\n                _incrementGamePlayed(_tokenId, _wizardProficiency);\\n            }\\n\\n            if(hasArmor(_tokenId)) {\\n                unequipArmor(_tokenId, _owner);\\n            }\\n        }\\n\\n        // Clear so they can play again\\n        delete tokenIdToInfo[_tokenId].requestId;\\n    }\\n\\n    function _incrementGamePlayed(uint256 _tokenId, uint8 _proficiencyCur) private {\\n        tokenIdToInfo[_tokenId].gamesPlayed++;\\n        // Not at the highest proficiency level and are that the number of games needed for the next proficiency\\n        if(_proficiencyCur < proficiencyToGamesPlayed.length - 1 && tokenIdToInfo[_tokenId].gamesPlayed == proficiencyToGamesPlayed[_proficiencyCur + 1]) {\\n            trainingProficiency.increaseProficiencyForWizard(_tokenId);\\n            // Increase HP as well if needed.\\n            tokenIdToInfo[_tokenId].hp++;\\n        }\\n    }\\n\\n    function _getTrainingFee(uint256 _tokenId) public view returns(uint256) {\\n        if(_tokenId <= 15000 && tokenIdToInfo[_tokenId].gamesPlayed == 0) {\\n            return 0;\\n        }\\n        uint8 _wizardProficiency = trainingProficiency.proficiencyForWizard(_tokenId);\\n        uint256 proficiencyReductionAmt = 1000 ether;\\n        return trainingFee - (_wizardProficiency * proficiencyReductionAmt);\\n    }\\n\\n    function setProficiencyToGamesPlayed(uint8[] calldata _proficiencyToGamesPlayed) external onlyAdminOrOwner {\\n        proficiencyToGamesPlayed = _proficiencyToGamesPlayed;\\n    }\\n\\n    function _findAndSendRewards(uint256 _tokenId, address _owner, uint256 _random, uint8 _wizardProficiency) private {\\n        uint256 _rewardId = pickReward(_random);\\n        _random >>= 32; // shuffle seed for new random\\n        uint256 _gpAmt = pickGPReward(_random);\\n\\n        uint256 _newRandom = uint256(keccak256(abi.encode(_random, _random)));\\n        uint16 _amount = pickAmount(_rewardId, _newRandom, _wizardProficiency);\\n\\n        consumables.mint(_rewardId, _amount, _owner);\\n        if(_gpAmt > 0) {\\n            gp.mint(_owner, _gpAmt);\\n        }\\n\\n        emit RewardMinted(_owner, _tokenId, _rewardId, _amount, _gpAmt);\\n    }\\n\\n    function _chanceWizardDies(uint8 _wizardProficiency) private view returns(uint8) {\\n        uint8 _chanceWizardBurned = baseChanceWizardBurned;\\n        // Lower the % chance to be burned by 1% per proficiency level up to a max amount\\n        if(_wizardProficiency > maxBurnReduction) {\\n            _chanceWizardBurned -= maxBurnReduction;\\n        } else {\\n            _chanceWizardBurned -= _wizardProficiency;\\n        }\\n        return _chanceWizardBurned;\\n    }\\n\\n    function _chanceWizardDamaged(uint8 _wizardProficiency) private view returns(uint8) {\\n        return damagePercentChance - (_wizardProficiency * 2);\\n    }\\n\\n    function healWithElixir(uint256 _tokenId, uint8 _quantity) external onlyEOA {\\n        _heal(_tokenId,_quantity);\\n    }\\n\\n    function healWithElixirBatch(uint256[] calldata _tokenIds, uint8[] calldata _quantities) external onlyEOA {\\n        require(_tokenIds.length == _quantities.length, \\\"invalid input\\\");\\n        require(_tokenIds.length > 0, \\\"No wizards given to heal\\\");\\n        for (uint256 i = 0; i < _tokenIds.length; i++) {\\n            _heal(_tokenIds[i],_quantities[i]);\\n        }\\n    }\\n\\n    function _heal(uint256 _tokenId, uint8 _quantity) internal {\\n        uint256 _currentHP = tokenIdToInfo[_tokenId].hp;\\n        uint256 _maxHP = maxHPForToken(_tokenId);\\n        require(_currentHP > 0, \\\"TrainingGame: HP must be greater than 0\\\");\\n        require(_quantity > 0, \\\"TrainingGame: Can't heal with 0 elixirs\\\");\\n        require(_currentHP + _quantity <= _maxHP, \\\"TrainingGame: Quantity is wrong\\\");\\n        require(elixirOfHealingId > 0, \\\"TrainingGame: Elixir of Healing ID not set\\\");\\n\\n        consumables.burn(elixirOfHealingId, _quantity, msg.sender);\\n\\n        tokenIdToInfo[_tokenId].hp += _quantity;\\n    }\\n\\n    function isWizardTraining(uint256 _tokenId) public view override returns(bool) {\\n        return tokenIdToInfo[_tokenId].requestId != 0;\\n    }\\n\\n    function maxHPForToken(uint256 _tokenId) public view returns(uint8) {\\n        return baseHP + trainingProficiency.proficiencyForWizard(_tokenId);\\n    }\\n\\n    function resetWizard(uint256 _tokenId) external override onlyAdminOrOwner {\\n        delete tokenIdToInfo[_tokenId];\\n        trainingProficiency.resetProficiencyForWizard(_tokenId);\\n    }\\n\\n}\",\"keccak256\":\"0x76970eb94957e81052bba4c504df0db73ebb45f9ecdca7c7bca75aa499d3924e\",\"license\":\"MIT\"},\"contracts/wnd/traininggame/TrainingGameArmor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ITrainingGame.sol\\\";\\nimport \\\"./TrainingGameTimeKeeper.sol\\\";\\n\\nabstract contract TrainingGameArmor is Initializable, TrainingGameTimeKeeper {\\n\\n    function __TrainingGameArmor_init() internal initializer {\\n        TrainingGameTimeKeeper.__TrainingGameTimeKeeper_init();\\n    }\\n\\n    function hasArmor(uint256 _tokenId) public view returns(bool) {\\n        return tokenIdToInfo[_tokenId].hasArmor;\\n    }\\n\\n    function equipArmor(uint256 _tokenId, address _owner) internal {\\n        consumables.adminSafeTransferFrom(_owner, address(this), equipmentTokenId, 1);\\n        tokenIdToInfo[_tokenId].hasArmor = true;\\n    }\\n\\n    function unequipArmor(uint256 _tokenId, address _owner) internal {\\n        require(tokenIdToInfo[_tokenId].hasArmor, \\\"No armor equipped\\\");\\n        consumables.adminSafeTransferFrom(address(this), _owner, equipmentTokenId, 1);\\n        tokenIdToInfo[_tokenId].hasArmor = false;\\n    }\\n\\n    function burnArmor(uint256 _tokenId) internal {\\n        require(tokenIdToInfo[_tokenId].hasArmor, \\\"No armor equipped\\\");\\n        consumables.burn(equipmentTokenId, 1, address(this));\\n        tokenIdToInfo[_tokenId].hasArmor = false;\\n    }\\n}\",\"keccak256\":\"0xa97f843bc6ecf9349c24c735e16f0d4e3a9376f0e4f8368d11633c9d5ea81a82\",\"license\":\"MIT\"},\"contracts/wnd/traininggame/TrainingGameContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ITrainingGame.sol\\\";\\nimport \\\"./TrainingGameState.sol\\\";\\nimport \\\"../../shared/Adminable.sol\\\";\\nimport \\\"../../shared/randomizercl/IRandomizerCL.sol\\\";\\nimport \\\"../world/IWorld.sol\\\";\\nimport \\\"../tokens/sacrificialalter/ISacrificialAlter.sol\\\";\\nimport \\\"../tokens/gp/IGP.sol\\\";\\nimport \\\"../tokens/wnd/IWnD.sol\\\";\\nimport \\\"../trainingproficiency/ITrainingProficiency.sol\\\";\\n\\nabstract contract TrainingGameContracts is Initializable, ITrainingGame, TrainingGameState {\\n\\n    function __TrainingGameContracts_init() internal initializer {\\n        TrainingGameState.__TrainingGameState_init();\\n    }\\n\\n    function setContracts(address _worldAddress, address _sacrificialAlterAddress, address _consumables, address _gpAddress, address _wndAddress, address _trainingProficiencyAddress, address _randomizerAddress, address _riftAddress, address _graveyard) external onlyAdminOrOwner {\\n        require(_worldAddress != address(0)\\n            && _gpAddress != address(0)\\n            && _wndAddress != address(0)\\n            && _trainingProficiencyAddress != address(0)\\n            && _randomizerAddress != address(0)\\n            && _sacrificialAlterAddress != address(0)\\n            && _consumables != address(0)\\n            && _riftAddress != address(0)\\n            && _graveyard != address(0), \\\"Bad address.\\\");\\n\\n        world = IWorld(_worldAddress);\\n        sacrificialAlter = ISacrificialAlter(_sacrificialAlterAddress);\\n        gp = IGP(_gpAddress);\\n        wnd = IWnD(_wndAddress);\\n        trainingProficiency = ITrainingProficiency(_trainingProficiencyAddress);\\n        randomizer = IRandomizerCL(_randomizerAddress);\\n        rift = IRift(_riftAddress);\\n        consumables = IConsumables(_consumables);\\n        graveyard = IGraveyard(_graveyard);\\n    }\\n\\n    modifier contractsAreSet() {\\n        require(areContractsSet(), \\\"TrainingGame: Contracts not set\\\");\\n\\n        _;\\n    }\\n\\n    function areContractsSet() public view returns(bool) {\\n        return address(world) != address(0)\\n            && address(gp) != address(0)\\n            && address(wnd) != address(0)\\n            && address(trainingProficiency) != address(0)\\n            && address(randomizer) != address(0)\\n            && address(sacrificialAlter) != address(0)\\n            && address(consumables) != address(0)\\n            && address(rift) != address(0)\\n            && address(graveyard) != address(0);\\n    }\\n}\",\"keccak256\":\"0x696fd963b9b81a9f29764168a2b1c3f0643f429aba33fedc22ebd9f0e1e4943d\",\"license\":\"MIT\"},\"contracts/wnd/traininggame/TrainingGameRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"./TrainingGameContracts.sol\\\";\\n\\nabstract contract TrainingGameRewards is Initializable, TrainingGameContracts {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    function __TrainingGameRewards_init() internal initializer {\\n        TrainingGameContracts.__TrainingGameContracts_init();\\n    }\\n\\n    // Clears existing reward Ids and replaces with the given reward ids.\\n    function setRewardSettings(uint256[] calldata _rewardIds, uint32[] calldata _rewardOdds, RewardMultiplier[] calldata _rewardMultipliers) external onlyAdminOrOwner {\\n        require(_rewardIds.length == _rewardOdds.length && _rewardOdds.length == _rewardMultipliers.length, \\\"Invalid lengths\\\");\\n\\n        uint256[] memory rewardList = rewardIds.values();\\n        for(uint256 i = 0; i < rewardList.length; i++) {\\n            rewardIds.remove(rewardList[i]);\\n            delete rewardIdToOdds[rewardList[i]];\\n            delete rewardIdToMultiplier[rewardList[i]];\\n        }\\n\\n        uint256 _oddsTotal;\\n\\n        for(uint256 i = 0; i < _rewardIds.length; i++) {\\n            uint256 _newRewardId = _rewardIds[i];\\n            rewardIds.add(_newRewardId);\\n            _oddsTotal += _rewardOdds[i];\\n            rewardIdToOdds[_newRewardId] = _rewardOdds[i];\\n            rewardIdToMultiplier[_newRewardId] = _rewardMultipliers[i];\\n        }\\n\\n        require(_oddsTotal == ODDS_TOTAL, \\\"Bad odds\\\");\\n    }\\n\\n    // Clears existing reward Ids and replaces with the given reward ids.\\n    function setGPRewardSettings(uint256[] calldata _gpAmts, uint32[] calldata _gpOdds) external onlyAdminOrOwner {\\n        require(_gpAmts.length == _gpOdds.length, \\\"Invalid lengths\\\");\\n        \\n        uint256[] memory _gpAmtList = gpAmts.values();\\n        for(uint256 i = 0; i < _gpAmtList.length; i++) {\\n            gpAmts.remove(_gpAmtList[i]);\\n            delete gpAmtsToOdds[_gpAmtList[i]];\\n        }\\n\\n        uint256 _oddsTotal = 0;\\n\\n        for(uint256 i = 0; i < _gpAmts.length; i++) {\\n            uint256 _newGpAmt = _gpAmts[i];\\n            gpAmts.add(_newGpAmt);\\n            _oddsTotal += _gpOdds[i];\\n            gpAmtsToOdds[_newGpAmt] = _gpOdds[i];\\n        }\\n\\n        require(_oddsTotal == ODDS_TOTAL, \\\"Bad odds\\\");\\n    }\\n\\n    function pickReward(uint256 _random) internal view returns(uint256) {\\n        uint256 _result = _random % ODDS_TOTAL;\\n\\n        uint32 _upperBound = 0;\\n        for(uint8 i = 0; i < rewardIds.length(); i++) {\\n            uint256 _rewardId = rewardIds.at(i);\\n            _upperBound += rewardIdToOdds[_rewardId];\\n            if(_result < _upperBound) {\\n                return _rewardId;\\n            }\\n        }\\n\\n        revert(\\\"The odds are incorrect.\\\");\\n    }\\n\\n    function pickGPReward(uint256 _random) internal view returns(uint256) {\\n        uint256 _result = _random % ODDS_TOTAL;\\n\\n        uint32 _upperBound = 0;\\n        for(uint8 i = 0; i < gpAmts.length(); i++) {\\n            uint256 _gpAmt = gpAmts.at(i);\\n            _upperBound += gpAmtsToOdds[_gpAmt];\\n            if(_result < _upperBound) {\\n                return _gpAmt;\\n            }\\n        }\\n\\n        revert(\\\"The odds are incorrect.\\\");\\n    }\\n\\n    function pickAmount(uint256 _rewardId, uint256 _random, uint8 _wizardProficiency) internal view returns(uint16) {\\n        RewardMultiplier memory _multiplier = rewardIdToMultiplier[_rewardId];\\n\\n        uint8 _multIndex = _wizardProficiency > 8 ? 8 : _wizardProficiency;\\n        uint16 _min = _multiplier.min[_multIndex];\\n        uint16 _max = _multiplier.max[_multIndex];\\n\\n        if(_min == _max) {\\n            return _min;\\n        }\\n\\n        uint16 _length = _max - _min + 1;\\n        uint256[] memory _odds = new uint256[](_length);\\n\\n        // Every value between _min and _max does not have the same chance of being picked. Each higher value is half as likely as the one\\n        // before it.\\n        uint256 _currentOdd = 1;\\n        uint256 _maxRangeOdd = 0;\\n        for(uint16 i = _length; i > 0; i--) {\\n            _odds[i-1] = _currentOdd;\\n            _maxRangeOdd += _currentOdd;\\n            _currentOdd <<= 1;\\n        }\\n\\n        uint256 _result = _random % _maxRangeOdd;\\n\\n        uint256 _upperBound = 0;\\n        for(uint8 i = 0; i < _odds.length; i++) {\\n            _upperBound += _odds[i];\\n            if(_result < _upperBound) {\\n                return _min + i;\\n            }\\n        }\\n\\n        revert(\\\"Odds broken\\\");\\n    }\\n\\n    modifier trainingRewardsSet() {\\n        require(rewardIds.length() > 0, \\\"Rewards not set\\\");\\n\\n        _;\\n    }\\n}\",\"keccak256\":\"0xa73c824aa7446a8ac19bcedfd0f042a0e40e11e496ff67c87a8defc483e1e7e4\",\"license\":\"MIT\"},\"contracts/wnd/traininggame/TrainingGameState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"../../shared/AdminableUpgradeable.sol\\\";\\nimport \\\"./ITrainingGame.sol\\\";\\nimport \\\"../../shared/Adminable.sol\\\";\\nimport \\\"../../shared/randomizercl/IRandomizerCL.sol\\\";\\nimport \\\"../world/IWorld.sol\\\";\\nimport \\\"../rift/IRift.sol\\\";\\nimport \\\"../graveyard/IGraveyard.sol\\\";\\nimport \\\"../tokens/sacrificialalter/ISacrificialAlter.sol\\\";\\nimport \\\"../tokens/consumables/IConsumables.sol\\\";\\nimport \\\"../tokens/gp/IGP.sol\\\";\\nimport \\\"../tokens/wnd/IWnD.sol\\\";\\nimport \\\"../trainingproficiency/ITrainingProficiency.sol\\\";\\n\\nabstract contract TrainingGameState is Initializable, ERC721HolderUpgradeable, ERC1155HolderUpgradeable, AdminableUpgradeable {\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    event TrainingStarted(address indexed _owner, uint256 indexed _tokenId, bytes32 indexed _requestId);\\n    event RewardMinted(address indexed _owner, uint256 indexed _tokenId, uint256 indexed _rewardId, uint256 _amount, uint256 _gpAmt);\\n\\n    struct RewardMultiplier {\\n        // 9 possibilities for training proficiency... 0, 1... 8+\\n        uint16[9] min;\\n        uint16[9] max;\\n    }\\n\\n    struct TokenTrainingInfo {\\n        bytes32 requestId;\\n        uint64 timeNextPlay;\\n        uint32 gamesPlayed;\\n        uint8 hp;\\n        bool hasArmor;\\n    }\\n\\n    IWorld public world;\\n    ISacrificialAlter public sacrificialAlter;\\n    IConsumables public consumables;\\n    IGP public gp;\\n    IWnD public wnd;\\n    ITrainingProficiency public trainingProficiency;\\n    IRandomizerCL public randomizer;\\n    IRift public rift;\\n    IGraveyard public graveyard;\\n\\n    uint256 public ODDS_TOTAL;\\n    uint256 internal equipmentTokenId;\\n\\n    EnumerableSetUpgradeable.UintSet internal rewardIds;\\n    mapping(uint256 => uint32) internal rewardIdToOdds;\\n    mapping(uint256 => RewardMultiplier) internal rewardIdToMultiplier;\\n\\n    EnumerableSetUpgradeable.UintSet internal gpAmts;\\n    mapping(uint256 => uint32) internal gpAmtsToOdds;\\n\\n    mapping(uint256 => TokenTrainingInfo) public tokenIdToInfo;\\n    // array index is proficiency, and value at index is the number of games needed for that proficiency level.\\n    // Ex. proficiencyToGamesPlayed[1] = 6 means you get level 1 proficiency at 6 games.\\n    uint8[] internal proficiencyToGamesPlayed;\\n    uint256 public gameCooldownTime;\\n\\n    uint256 public trainingFee;\\n\\n    // The base chance, before training proficiency, that the wizard is burnt.\\n    uint8 public baseChanceWizardBurned;\\n\\n    // The maximum the proficiency can reduce the chance of burning.\\n    uint8 public maxBurnReduction;\\n\\n    uint8 public damagePercentChance;\\n\\n    uint8 public baseHP;\\n\\n    uint8 public baseDamage;\\n\\n    uint8 public armorDamageReductionAmt;\\n\\n    uint8 public elixirOfHealingId;\\n\\n    function __TrainingGameState_init() internal initializer {\\n        AdminableUpgradeable.__Adminable_init();\\n        ERC721HolderUpgradeable.__ERC721Holder_init();\\n        ERC1155HolderUpgradeable.__ERC1155Holder_init();\\n\\n        ODDS_TOTAL = 100000;\\n        gameCooldownTime = 1 days;\\n        trainingFee = 12000 ether;\\n        // 10% base chance of being burned in training\\n        baseChanceWizardBurned = 10;\\n        // 8% max burn reduction from training proficiency\\n        maxBurnReduction = 8;\\n        proficiencyToGamesPlayed = [0, 6, 8, 10, 12, 14, 16, 18, 20];\\n        equipmentTokenId = 2;\\n        damagePercentChance = 50;\\n        baseHP = 7;\\n        baseDamage = 6;\\n        armorDamageReductionAmt = 3;\\n        elixirOfHealingId = 1;\\n    }\\n}\",\"keccak256\":\"0x783c0e33319c8a8b0113d8b5fe0beb1f93e5c3bd13808ef4c455ae376754361a\",\"license\":\"MIT\"},\"contracts/wnd/traininggame/TrainingGameTimeKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"./ITrainingGame.sol\\\";\\nimport \\\"./TrainingGameState.sol\\\";\\n\\nabstract contract TrainingGameTimeKeeper is Initializable, ITrainingGame, TrainingGameState {\\n\\n    function __TrainingGameTimeKeeper_init() internal initializer {\\n        TrainingGameState.__TrainingGameState_init();\\n    }\\n\\n    function setGameCooldown(uint256 _gameCooldownTime) external onlyAdminOrOwner {\\n        gameCooldownTime = _gameCooldownTime;\\n    }\\n\\n    function updateNextPlayTime(uint256 _tokenId, address _player) internal {\\n        // Add 24 hours and subtract 4 hours per Rift Tier\\n        tokenIdToInfo[_tokenId].timeNextPlay = uint64(block.timestamp + gameCooldownTime - (4 * rift.getRiftTier(_player) * 60)); // 3600 seconds is an hour, 60 seconds is a minute\\n    }\\n\\n    function canWizardPlay(uint256 _tokenId) public view override returns(bool) {\\n        return block.timestamp > timeWizardCanPlayNext(_tokenId);\\n    }\\n\\n    function timeWizardCanPlayNext(uint256 _tokenId) public view override returns(uint256) {\\n        return tokenIdToInfo[_tokenId].timeNextPlay;\\n    }\\n}\",\"keccak256\":\"0x6a06abf6173e238b9ec9222dc5b589518d3596118739eae9cdb2c3e51b666a84\",\"license\":\"MIT\"},\"contracts/wnd/trainingproficiency/ITrainingProficiency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITrainingProficiency {\\n\\n    // Returns the proficiency for the given Wizard.\\n    function proficiencyForWizard(uint256 _tokenId) external view returns(uint8);\\n\\n    // Increases the proficiency of the given wizard by 1.\\n    // Only admin.\\n    function increaseProficiencyForWizard(uint256 _tokenId) external;\\n    // Resets the proficiency of the given wizard.\\n    // Only admin.\\n    function resetProficiencyForWizard(uint256 _tokenId) external;\\n}\",\"keccak256\":\"0x9f92fd6efc02720c267e68ac94d4484420697f8ef44ad4a11a461b6ef8cfde89\",\"license\":\"MIT\"},\"contracts/wnd/world/IWorld.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWorldReadOnly {\\n    // Returns the total number of wizards staked somewhere in the world. Does not include in route wizards.\\n    function totalNumberOfWizards() external view returns(uint256);\\n\\n    // Returns the total number of dragons staked somewhere in the world.\\n    function totalNumberOfDragons() external view returns(uint256);\\n\\n    // Returns the location of the token. If it returns NONEXISTENT, the token is not staked in the world.\\n    function locationOfToken(uint256 _tokenId) external view returns(Location);\\n\\n    // Returns if the token exists in the world. This also means the world contract holds the token.\\n    function isTokenInWorld(uint256 _tokenId) external view returns(bool);\\n\\n    function getStakeableDragonLocations() external view returns(Location[] memory);\\n\\n    function numberOfDragonsStakedAtRank(uint256 _rank) external view returns(uint256);\\n\\n    // Returns the number of dragons that are staked at the given location and rank.\\n    function numberOfDragonsStakedAtLocationAtRank(Location _location, uint256 _rank) external view returns(uint256);\\n\\n    // Returns the number of wizards that are staked at the given location.\\n    function numberOfWizardsStakedAtLocation(Location _location) external view returns(uint256);\\n\\n    // Returns the dragon ID that is at the given location at the given index. Will revert if invalid index.\\n    function dragonAtLocationAtRankAtIndex(Location _location, uint256 _rank, uint256 _index) external view returns(uint256);\\n\\n    // Returns the wizard ID that is at the given location at the given index. Will revert if invalid index.\\n    function wizardAtLocationAtIndex(Location _location, uint256 _index) external view returns(uint256);\\n\\n    // Returns all dragons at the given location for the given owner. Avoid using in a contract-to-contract call.\\n    function getDragonsAtLocationForOwner(Location _location, address _owner) external view returns(uint256[] memory);\\n\\n    // Returns all dragons at the given location for the given owner. Avoid using in a contract-to-contract call.\\n    function getWizardsAtLocationForOwner(Location _location, address _owner) external view returns(uint256[] memory);\\n\\n    // The owner of the given token.\\n    function ownerOfTokenId(uint256 _tokenId) external view returns(address);\\n\\n    // Returns if the passed in address is the owner of the token id.\\n    function isOwnerOfTokenId(uint256 _tokenId, address _owner) external view returns(bool);\\n\\n    // Returns a random dragon owner based on the given seed.\\n    // Dragons that are staked at the given location have an increased odds of being selected.\\n    // If _locationOfEvent is set to NONEXISTENT, all dragons staked in the world will have the same odds.\\n    // If this function returns 0, there was not a random dragon staked.\\n    function getRandomDragonOwner(uint256 _randomSeed, Location _locationOfEvent) external view returns(address);\\n}\\n\\ninterface IWorldEditable {\\n\\n    // Begins staking the given wizard at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function startStakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Finishes the stake for the given wizard ID. Must be called after the random has been seeded.\\n    function finishStakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Unstakes the given wizard from the given location.\\n    // May revert for various reasons.\\n    function startUnstakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Finishes the unstake process for the given wizard id. Must be called after the random has been seeded.\\n    function finishUnstakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Stakes the given dragon at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function stakeDragons(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Unstakes the given dragon at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function unstakeDragons(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // When calling, should already have ensured this is a wizard and is not in the world already.\\n    // Transfers the 721 to the world contract.\\n    // Admin only.\\n    function addWizardToWorld(uint256 _tokenId, address _owner, Location _location) external;\\n\\n    // When calling, should already have ensured this is a wizard and is not in the world already.\\n    // Transfers the 721 to the world contract.\\n    // Admin only.\\n    function addDragonToWorld(uint256 _tokenId, address _owner, Location _location) external;\\n\\n    // Game logic should already validate that this is an option.\\n    // Transfers the 721 to the _owner.\\n    // Admin only.\\n    function removeWizardFromWorld(uint256 _tokenId, address _owner) external;\\n\\n    // Game logic should already validate that this is an option.\\n    // Transfers the 721 to the _owner.\\n    // Admin only.\\n    function removeDragonFromWorld(uint256 _tokenId, address _owner) external;\\n\\n    // When calling, game logic should already validate who owns the token, if they have permission, and that\\n    // the destination location makes sense.\\n    // Only callable by admin/owner.\\n    function changeLocationOfWizard(uint256 _tokenId, Location _location) external;\\n\\n    function setStakeableDragonLocations(Location[] calldata _locations) external;\\n}\\n\\ninterface IWorld is IWorldEditable, IWorldReadOnly {\\n\\n}\\n\\nenum Location {\\n    NONEXISTENT,\\n    RIFT,\\n    TRAINING_GROUNDS_ENTERING,\\n    TRAINING_GROUNDS,\\n    TRAINING_GROUNDS_LEAVING\\n}\",\"keccak256\":\"0x12e6461ca64e6f68e85202709870e24156b39e34a1a2d7023883b3de30823e0a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614b99806100206000396000f3fe608060405234801561001057600080fd5b506004361061035d5760003560e01c80638cdcc4b4116101d3578063d8d32d5511610104578063f10fb584116100a2578063f2fde38b1161007c578063f2fde38b146107fa578063fd501c6d1461080d578063ff5cbc7414610821578063ff69ea901461083557600080fd5b8063f10fb584146107b4578063f230173c146107c8578063f23a6e61146107db57600080fd5b8063e1062481116100de578063e106248114610754578063e1574e2014610767578063ecdd310d1461077a578063ed899d7c1461079157600080fd5b8063d8d32d5514610716578063df2d6faf14610729578063e0cf4c741461073e57600080fd5b8063a888306011610171578063bc197c811161014b578063bc197c81146106bd578063bedb86fb146106dc578063d46b9330146106ef578063d5dc7a0e1461070357600080fd5b8063a888306014610684578063aa04c19414610697578063b4b61cd1146106aa57600080fd5b8063914314a7116101ad578063914314a7146106405780639c54df64146106535780639c70899f14610666578063a2df10451461067a57600080fd5b80638cdcc4b4146106135780638da5cb5b1461061b57806390528e111461062c57600080fd5b80635920390a116102ad5780637853eb071161024b5780638129fc1c116102255780638129fc1c146105d1578063815e066b146105d957806383efaae6146105ec57806386ff27441461060057600080fd5b80637853eb071461059c5780637abb5e2c146105af57806380a59707146105bd57600080fd5b80637048027511610287578063704802751461053f578063711f8ed614610552578063715018a61461056657806371b2df641461056e57600080fd5b80635920390a146104fc5780635c975abb14610529578063669f72191461053557600080fd5b806324d7806c1161031a57806335562de2116102f457806335562de2146104a9578063377e11e0146104bc57806351affeeb146104cf5780635475b187146104e457600080fd5b806324d7806c1461042b57806330b67baa1461045857806330f60ba71461048457600080fd5b806301ffc9a714610362578063050480bf1461038a57806308a864f51461039f5780630b6d9404146103b2578063150b7a02146103e15780631785f53c14610418575b600080fd5b610375610370366004613ebe565b6108c9565b60405190151581526020015b60405180910390f35b61039d610398366004613ee8565b610900565b005b61039d6103ad366004613f4c565b610963565b6103756103c0366004613ee8565b60009081526101a460205260409020600101546001600160401b0316421190565b6103ff6103ef3660046140df565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610381565b61039d61042636600461414a565b610c32565b61037561043936600461414a565b6001600160a01b0316600090815261015f602052604090205460ff1690565b6101925461046c906001600160a01b031681565b6040516001600160a01b039091168152602001610381565b6101a85461049790610100900460ff1681565b60405160ff9091168152602001610381565b61039d6104b7366004614167565b610c7e565b61039d6104ca3660046141d2565b610d95565b6101a854610497906301000000900460ff1681565b6104ee6101a75481565b604051908152602001610381565b6104ee61050a366004613ee8565b60009081526101a460205260409020600101546001600160401b031690565b61012d5460ff16610375565b6104ee6101a65481565b61039d61054d36600461414a565b610e37565b6101975461046c906001600160a01b031681565b61039d610e86565b61037561057c366004613ee8565b60009081526101a46020526040902060010154600160681b900460ff1690565b61039d6105aa3660046141d2565b610ebc565b6101a8546104979060ff1681565b6101965461046c906001600160a01b031681565b61039d610f92565b61039d6105e7366004614222565b611013565b6101a8546104979062010000900460ff1681565b61039d61060e366004614167565b6110bf565b6103756112f5565b60fb546001600160a01b031661046c565b6101945461046c906001600160a01b031681565b61049761064e366004613ee8565b6113c4565b61039d6106613660046141d2565b61145a565b61019a5461046c906001600160a01b031681565b6104ee61019b5481565b61039d610692366004614264565b6114f7565b61039d6106a5366004614320565b6116c3565b61039d6106b83660046141d2565b6116f0565b6103ff6106cb3660046143cf565b63bc197c8160e01b95945050505050565b61039d6106ea36600461448a565b61173b565b6101955461046c906001600160a01b031681565b61039d610711366004613ee8565b61178f565b6104ee610724366004613ee8565b611854565b6101a85461049790600160301b900460ff1681565b6101a85461049790640100000000900460ff1681565b61039d610762366004613ee8565b61193f565b61039d6107753660046144a7565b611983565b6101a8546104979065010000000000900460ff1681565b61037561079f366004613ee8565b60009081526101a46020526040902054151590565b6101985461046c906001600160a01b031681565b61039d6107d63660046144cc565b611a1e565b6103ff6107e9366004614540565b63f23a6e6160e01b95945050505050565b61039d61080836600461414a565b611b0c565b6101935461046c906001600160a01b031681565b6101995461046c906001600160a01b031681565b61088a610843366004613ee8565b6101a460205260009081526040902080546001909101546001600160401b0381169063ffffffff600160401b8204169060ff600160601b8204811691600160681b90041685565b604080519586526001600160401b03909416602086015263ffffffff9092169284019290925260ff90911660608301521515608082015260a001610381565b60006001600160e01b03198216630271189760e51b14806108fa57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6109086112f5565b61092d5760405162461bcd60e51b8152600401610924906145a8565b60405180910390fd5b600061093a61019d611ba4565b116109575760405162461bcd60e51b8152600401610924906145df565b61096081611bae565b50565b33600090815261015f602052604090205460ff16806109855750610985611e23565b6109a15760405162461bcd60e51b815260040161092490614608565b84831480156109af57508281145b6109ed5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206c656e6774687360881b6044820152606401610924565b60006109fa61019d611e47565b905060005b8151811015610ad357610a36828281518110610a1d57610a1d614634565b602002602001015161019d611e5b90919063ffffffff16565b5061019f6000838381518110610a4e57610a4e614634565b6020026020010151815260200190815260200160002060006101000a81549063ffffffff02191690556101a06000838381518110610a8e57610a8e614634565b6020026020010151815260200190815260200160002060008082016000610ab791905060009055565b6000600183015550508080610acb90614660565b9150506109ff565b506000805b87811015610bea576000898983818110610af457610af4614634565b905060200201359050610b128161019d611e6790919063ffffffff16565b50878783818110610b2557610b25614634565b9050602002016020810190610b3a919061467b565b610b4a9063ffffffff16846146a1565b9250878783818110610b5e57610b5e614634565b9050602002016020810190610b73919061467b565b600082815261019f60205260409020805463ffffffff191663ffffffff92909216919091179055858583818110610bac57610bac614634565b905061024002016101a060008381526020019081526020016000208181610bd391906146ec565b905050508080610be290614660565b915050610ad8565b5061019b548114610c285760405162461bcd60e51b8152602060048201526008602482015267426164206f64647360c01b6044820152606401610924565b5050505050505050565b60fb546001600160a01b03163314610c5c5760405162461bcd60e51b8152600401610924906147a2565b6001600160a01b0316600090815261015f60205260409020805460ff19169055565b333214610c9d5760405162461bcd60e51b8152600401610924906147d7565b828114610cdc5760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610924565b82610d295760405162461bcd60e51b815260206004820152601860248201527f4e6f2077697a6172647320676976656e20746f206865616c00000000000000006044820152606401610924565b60005b83811015610d8e57610d7c858583818110610d4957610d49614634565b90506020020135848484818110610d6257610d62614634565b9050602002016020810190610d7791906147fd565b611e73565b80610d8681614660565b915050610d2c565b5050505050565b60fb546001600160a01b03163314610dbf5760405162461bcd60e51b8152600401610924906147a2565b60005b81811015610e3257600061015f6000858585818110610de357610de3614634565b9050602002016020810190610df8919061414a565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610e2a81614660565b915050610dc2565b505050565b60fb546001600160a01b03163314610e615760405162461bcd60e51b8152600401610924906147a2565b6001600160a01b0316600090815261015f60205260409020805460ff19166001179055565b60fb546001600160a01b03163314610eb05760405162461bcd60e51b8152600401610924906147a2565b610eba60006120f2565b565b610ec46112f5565b610ee05760405162461bcd60e51b8152600401610924906145a8565b6000610eed61019d611ba4565b11610f0a5760405162461bcd60e51b8152600401610924906145df565b8080610f4e5760405162461bcd60e51b8152602060048201526013602482015272139bc81dda5e985c991cc81cd95b1958dd1959606a1b6044820152606401610924565b60005b81811015610f8c57610f7a848483818110610f6e57610f6e614634565b90506020020135611bae565b80610f8481614660565b915050610f51565b50505050565b600054610100900460ff16610fad5760005460ff1615610fb1565b303b155b610fcd5760405162461bcd60e51b81526004016109249061481a565b600054610100900460ff16158015610fef576000805461ffff19166101011790555b610ff7612144565b610fff612144565b8015610960576000805461ff001916905550565b33600090815261015f602052604090205460ff16806110355750611035611e23565b6110515760405162461bcd60e51b815260040161092490614608565b8060ff168260ff1610156110965760405162461bcd60e51b815260206004820152600c60248201526b4261642073657474696e677360a01b6044820152606401610924565b6101a7929092556101a8805460ff9384166101000261ffff199091169390921692909217179055565b33600090815261015f602052604090205460ff16806110e157506110e1611e23565b6110fd5760405162461bcd60e51b815260040161092490614608565b82811461113e5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206c656e6774687360881b6044820152606401610924565b600061114b6101a1611e47565b905060005b81518110156111d65761118782828151811061116e5761116e614634565b60200260200101516101a1611e5b90919063ffffffff16565b506101a3600083838151811061119f5761119f614634565b6020908102919091018101518252810191909152604001600020805463ffffffff19169055806111ce81614660565b915050611150565b506000805b858110156112af5760008787838181106111f7576111f7614634565b905060200201359050611215816101a1611e6790919063ffffffff16565b5085858381811061122857611228614634565b905060200201602081019061123d919061467b565b61124d9063ffffffff16846146a1565b925085858381811061126157611261614634565b9050602002016020810190611276919061467b565b60009182526101a36020526040909120805463ffffffff191663ffffffff909216919091179055806112a781614660565b9150506111db565b5061019b5481146112ed5760405162461bcd60e51b8152602060048201526008602482015267426164206f64647360c01b6044820152606401610924565b505050505050565b610192546000906001600160a01b03161580159061131e5750610195546001600160a01b031615155b80156113355750610196546001600160a01b031615155b801561134c5750610197546001600160a01b031615155b80156113635750610198546001600160a01b031615155b801561137a5750610193546001600160a01b031615155b80156113915750610194546001600160a01b031615155b80156113a85750610199546001600160a01b031615155b80156113bf575061019a546001600160a01b031615155b905090565b610197546040516358c6a0bd60e01b8152600481018390526000916001600160a01b0316906358c6a0bd9060240160206040518083038186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190614868565b6101a8546108fa91906301000000900460ff16614885565b60fb546001600160a01b031633146114845760405162461bcd60e51b8152600401610924906147a2565b60005b81811015610e3257600161015f60008585858181106114a8576114a8614634565b90506020020160208101906114bd919061414a565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055806114ef81614660565b915050611487565b33600090815261015f602052604090205460ff16806115195750611519611e23565b6115355760405162461bcd60e51b815260040161092490614608565b6001600160a01b0389161580159061155557506001600160a01b03861615155b801561156957506001600160a01b03851615155b801561157d57506001600160a01b03841615155b801561159157506001600160a01b03831615155b80156115a557506001600160a01b03881615155b80156115b957506001600160a01b03871615155b80156115cd57506001600160a01b03821615155b80156115e157506001600160a01b03811615155b61161c5760405162461bcd60e51b815260206004820152600c60248201526b2130b21030b2323932b9b99760a11b6044820152606401610924565b61019280546001600160a01b03199081166001600160a01b039b8c161790915561019380548216998b169990991790985561019580548916968a1696909617909555610196805488169489169490941790935561019780548716928816929092179091556101988054861691871691909117905561019980548516918616919091179055610194805484169285169290921790915561019a80549092169216919091179055565b3332146116e25760405162461bcd60e51b8152600401610924906147d7565b6116ec8282611e73565b5050565b33600090815261015f602052604090205460ff16806117125750611712611e23565b61172e5760405162461bcd60e51b815260040161092490614608565b610e326101a58383613d99565b33600090815261015f602052604090205460ff168061175d575061175d611e23565b6117795760405162461bcd60e51b815260040161092490614608565b8015611787576109606121a9565b610960612220565b33600090815261015f602052604090205460ff16806117b157506117b1611e23565b6117cd5760405162461bcd60e51b815260040161092490614608565b60008181526101a46020526040808220918255600190910180546dffffffffffffffffffffffffffff1916905561019754905163d4b8d38560e01b8152600481018390526001600160a01b039091169063d4b8d38590602401600060405180830381600087803b15801561184057600080fd5b505af1158015610d8e573d6000803e3d6000fd5b6000613a988211158015611885575060008281526101a46020526040902060010154600160401b900463ffffffff16155b1561189257506000919050565b610197546040516358c6a0bd60e01b8152600481018490526000916001600160a01b0316906358c6a0bd9060240160206040518083038186803b1580156118d857600080fd5b505afa1580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119109190614868565b9050683635c9adc5dea000006119298160ff84166146b9565b6101a75461193791906148aa565b949350505050565b33600090815261015f602052604090205460ff16806119615750611961611e23565b61197d5760405162461bcd60e51b815260040161092490614608565b6101a655565b61198b6112f5565b6119a75760405162461bcd60e51b8152600401610924906145a8565b61012d5460ff16156119cb5760405162461bcd60e51b8152600401610924906148c1565b60006119d861019d611ba4565b116119f55760405162461bcd60e51b8152600401610924906145df565b333214611a145760405162461bcd60e51b8152600401610924906147d7565b6116ec828261229c565b611a266112f5565b611a425760405162461bcd60e51b8152600401610924906145a8565b61012d5460ff1615611a665760405162461bcd60e51b8152600401610924906148c1565b6000611a7361019d611ba4565b11611a905760405162461bcd60e51b8152600401610924906145df565b333214611aaf5760405162461bcd60e51b8152600401610924906147d7565b8060005b81811015610f8c576000848483818110611acf57611acf614634565b905060400201803603810190611ae591906148eb565b9050611af98160000151826020015161229c565b5080611b0481614660565b915050611ab3565b60fb546001600160a01b03163314611b365760405162461bcd60e51b8152600401610924906147a2565b6001600160a01b038116611b9b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610924565b610960816120f2565b60006108fa825490565b60008181526101a4602052604090205480611bfa5760405162461bcd60e51b815260206004820152600c60248201526b4e6f7420747261696e696e6760a01b6044820152606401610924565b610198546040516308c821cb60e41b8152600481018390526001600160a01b0390911690638c821cb09060240160206040518083038186803b158015611c3f57600080fd5b505afa158015611c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c779190614940565b611cb35760405162461bcd60e51b815260206004820152600d60248201526c139bc81c985b991bdb481e595d609a1b6044820152606401610924565b61019254604051630974560360e11b8152600481018490526000916001600160a01b0316906312e8ac069060240160206040518083038186803b158015611cf957600080fd5b505afa158015611d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d31919061495d565b90506001600160a01b038116331480611d5a575033600090815261015f602052604090205460ff165b611d985760405162461bcd60e51b815260206004820152600f60248201526e426164207065726d697373696f6e7360881b6044820152606401610924565b610198546040516348d6006560e11b8152600481018490526000916001600160a01b0316906391ac00ca9060240160206040518083038186803b158015611dde57600080fd5b505afa158015611df2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e16919061497a565b9050610f8c84838361293c565b600033611e3860fb546001600160a01b031690565b6001600160a01b031614905090565b60606000611e5483612cec565b9392505050565b6000611e548383612d48565b6000611e548383612e3b565b60008281526101a46020526040812060010154600160601b900460ff1690611e9a846113c4565b60ff16905060008211611eff5760405162461bcd60e51b815260206004820152602760248201527f547261696e696e6747616d653a204850206d75737420626520677265617465726044820152660207468616e20360cc1b6064820152608401610924565b60008360ff1611611f625760405162461bcd60e51b815260206004820152602760248201527f547261696e696e6747616d653a2043616e2774206865616c2077697468203020604482015266656c697869727360c81b6064820152608401610924565b80611f7060ff8516846146a1565b1115611fbe5760405162461bcd60e51b815260206004820152601f60248201527f547261696e696e6747616d653a205175616e746974792069732077726f6e67006044820152606401610924565b6101a854600160301b900460ff1661202b5760405162461bcd60e51b815260206004820152602a60248201527f547261696e696e6747616d653a20456c69786972206f66204865616c696e67206044820152691251081b9bdd081cd95d60b21b6064820152608401610924565b610194546101a854604051631d24e23160e21b8152600160301b90910460ff9081166004830152851660248201523360448201526001600160a01b039091169063749388c490606401600060405180830381600087803b15801561208e57600080fd5b505af11580156120a2573d6000803e3d6000fd5b50505060008581526101a4602052604090206001018054859250600c906120d4908490600160601b900460ff16614885565b92506101000a81548160ff021916908360ff16021790555050505050565b60fb80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661215f5760005460ff1615612163565b303b155b61217f5760405162461bcd60e51b81526004016109249061481a565b600054610100900460ff161580156121a1576000805461ffff19166101011790555b610fff612e8a565b61012d5460ff16156121cd5760405162461bcd60e51b8152600401610924906148c1565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122033390565b6040516001600160a01b03909116815260200160405180910390a1565b61012d5460ff1661226a5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610924565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33612203565b61019654604051600162ac0b8d60e01b03198152600481018490526001600160a01b039091169063ff53f4739060240160206040518083038186803b1580156122e457600080fd5b505afa1580156122f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231c9190614940565b6123575760405162461bcd60e51b815260206004820152600c60248201526b139bdd0818481dda5e985c9960a21b6044820152606401610924565b60008281526101a460205260409020600101546001600160401b031642116123b95760405162461bcd60e51b81526020600482015260156024820152742bb4bd30b9321036bab9ba1031b7b7b6103237bbb760591b6044820152606401610924565b60008281526101a46020526040902054156124095760405162461bcd60e51b815260206004820152601060248201526f416c726561647920747261696e696e6760801b6044820152606401610924565b61019254604051630974560360e11b8152600481018490526000916001600160a01b0316906312e8ac069060240160206040518083038186803b15801561244f57600080fd5b505afa158015612463573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612487919061495d565b90506001600160a01b0381163314806124b0575033600090815261015f602052604090205460ff165b6124f15760405162461bcd60e51b81526020600482015260126024820152712737ba1037bbb732b91037b3103a37b5b2b760711b6044820152606401610924565b60006124fc84611854565b610195546040516370a0823160e01b81526001600160a01b0385811660048301529293508392909116906370a082319060240160206040518083038186803b15801561254757600080fd5b505afa15801561255b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257f919061497a565b10156125bd5760405162461bcd60e51b815260206004820152600d60248201526c04e6f7420656e6f75676820475609c1b6044820152606401610924565b61019254604051635a140c0f60e11b8152600481018690526003916001600160a01b03169063b428181e9060240160206040518083038186803b15801561260357600080fd5b505afa158015612617573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263b91906149a9565b600481111561264c5761264c614993565b1461268c5760405162461bcd60e51b815260206004820152601060248201526f4e6f74207374616b656420617420544760801b6044820152606401610924565b8215612775576101945461019c54604051627eeac760e11b81526000926001600160a01b03169162fdd58e916126da9187916004016001600160a01b03929092168252602082015260400190565b60206040518083038186803b1580156126f257600080fd5b505afa158015612706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272a919061497a565b1161276b5760405162461bcd60e51b815260206004820152601160248201527004e6f2061726d6f7220746f20657175697607c1b6044820152606401610924565b6127758483612eef565b61277f8483612f8d565b61019554604051632770a7eb60e21b81526001600160a01b0384811660048301526024820184905290911690639dc29fac90604401600060405180830381600087803b1580156127ce57600080fd5b505af11580156127e2573d6000803e3d6000fd5b50505060008581526101a46020526040902060010154600160401b900463ffffffff16159050801561282e575060008481526101a46020526040902060010154600160601b900460ff16155b1561286c5761283c846113c4565b60008581526101a460205260409020600101805460ff92909216600160601b0260ff60601b199092169190911790555b610198546040805163dbdff2c160e01b815290516000926001600160a01b03169163dbdff2c191600480830192602092919082900301818787803b1580156128b357600080fd5b505af11580156128c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128eb919061497a565b60008681526101a4602052604080822083905551919250829187916001600160a01b038716917f15c846ed996000a226c34e21e33441a7e678ef93a2352e57406493b03440da009190a45050505050565b610197546040516358c6a0bd60e01b8152600481018590526000916001600160a01b0316906358c6a0bd9060240160206040518083038186803b15801561298257600080fd5b505afa158015612996573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ba9190614868565b905060006129c78261306e565b90506000806129d76064866149ca565b905060ff83168110808015612a06575060008881526101a46020526040902060010154600160681b900460ff16155b15612a7b5761019a54604051630434829f60e01b8152600481018a90526001600160a01b03898116602483015290911690630434829f90604401600060405180830381600087803b158015612a5a57600080fd5b505af1158015612a6e573d6000803e3d6000fd5b5050505060019250612cd3565b808015612aa1575060008881526101a46020526040902060010154600160681b900460ff165b15612aaf57612aaf886130b2565b604080516020810188905290810187905260600160408051601f19818403018152919052805160209091012095506000612aea6064886149ca565b90506000612af78761319f565b60ff16905080821015612c5f576101a854640100000000900460ff16612b378b60009081526101a46020526040902060010154600160681b900460ff1690565b15612b61576101a854612b569065010000000000900460ff16826149ec565b9050612b618b6130b2565b60008b81526101a4602052604090206001015460ff808316600160601b9092041611612c155760008b81526101a4602052604090819020600101805460ff60601b1916905561019a549051630434829f60e01b8152600481018d90526001600160a01b038c8116602483015290911690630434829f90604401600060405180830381600087803b158015612bf457600080fd5b505af1158015612c08573d6000803e3d6000fd5b5050505060019550612c5d565b60008b81526101a4602052604090206001018054829190600c90612c44908490600160601b900460ff166149ec565b92506101000a81548160ff021916908360ff1602179055505b505b84612ca4576040805160208082018b90528183018d905282518083038401815260609092019092528051910120612c988b8b838b6131c3565b612ca28b89613364565b505b60008a81526101a46020526040902060010154600160681b900460ff1615612cd057612cd08a8a6134db565b50505b505050600094855250506101a460205250506040812055565b606081600001805480602002602001604051908101604052809291908181526020018280548015612d3c57602002820191906000526020600020905b815481526020019060010190808311612d28575b50505050509050919050565b60008181526001830160205260408120548015612e31576000612d6c6001836148aa565b8554909150600090612d80906001906148aa565b9050818114612de5576000866000018281548110612da057612da0614634565b9060005260206000200154905080876000018481548110612dc357612dc3614634565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612df657612df6614a0f565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506108fa565b60009150506108fa565b6000818152600183016020526040812054612e82575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556108fa565b5060006108fa565b600054610100900460ff16612ea55760005460ff1615612ea9565b303b155b612ec55760405162461bcd60e51b81526004016109249061481a565b600054610100900460ff16158015612ee7576000805461ffff19166101011790555b610fff6135d0565b6101945461019c5460405163a878b95d60e01b81526001600160a01b03848116600483015230602483015260448201929092526001606482015291169063a878b95d90608401600060405180830381600087803b158015612f4f57600080fd5b505af1158015612f63573d6000803e3d6000fd5b505050600092835250506101a460205260409020600101805460ff60681b1916600160681b179055565b61019954604051638be886d560e01b81526001600160a01b03838116600483015290911690638be886d59060240160206040518083038186803b158015612fd357600080fd5b505afa158015612fe7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061300b919061497a565b6130169060046146b9565b61302190603c6146b9565b6101a65461302f90426146a1565b61303991906148aa565b60009283526101a46020526040909220600101805467ffffffffffffffff19166001600160401b039093169290921790915550565b6101a85460009060ff808216916101009004811690841611156130a8576101a8546130a190610100900460ff16826149ec565b90506108fa565b611e5483826149ec565b60008181526101a46020526040902060010154600160681b900460ff1661310f5760405162461bcd60e51b8152602060048201526011602482015270139bc8185c9b5bdc88195c5d5a5c1c1959607a1b6044820152606401610924565b6101945461019c54604051631d24e23160e21b81526004810191909152600160248201523060448201526001600160a01b039091169063749388c490606401600060405180830381600087803b15801561316857600080fd5b505af115801561317c573d6000803e3d6000fd5b5050506000918252506101a460205260409020600101805460ff60681b19169055565b60006131ac826002614a25565b6101a8546108fa919062010000900460ff166149ec565b60006131ce83613702565b9050602083901c925060006131e2846137d8565b905060008485604051602001613202929190918252602082015260400190565b6040516020818303038152906040528051906020012060001c9050600061322a848387613865565b6101945460405163e7d3fe6b60e01b81526004810187905261ffff831660248201526001600160a01b038a8116604483015292935091169063e7d3fe6b90606401600060405180830381600087803b15801561328557600080fd5b505af1158015613299573d6000803e3d6000fd5b50505050600083111561330e57610195546040516340c10f1960e01b81526001600160a01b03898116600483015260248201869052909116906340c10f1990604401600060405180830381600087803b1580156132f557600080fd5b505af1158015613309573d6000803e3d6000fd5b505050505b6040805161ffff831681526020810185905285918a916001600160a01b038b16917f5acb7107807e6ac6fb396459bbd2bb6da2e48bec16722e45823671541ebcb53d910160405180910390a45050505050505050565b60008281526101a4602052604090206001018054600160401b900463ffffffff1690600861339183614a4e565b91906101000a81548163ffffffff021916908363ffffffff1602179055505060016101a5805490506133c391906148aa565b8160ff1610801561343057506101a56133dd826001614885565b60ff16815481106133f0576133f0614634565b6000918252602080832081830401548584526101a490915260409092206001015463ffffffff600160401b9091041660ff601f9092166101000a90920416145b156116ec57610197546040516316a5d2bd60e31b8152600481018490526001600160a01b039091169063b52e95e890602401600060405180830381600087803b15801561347c57600080fd5b505af1158015613490573d6000803e3d6000fd5b50505060008381526101a4602052604090206001018054600160601b900460ff169150600c6134be83614a72565b91906101000a81548160ff021916908360ff160217905550505050565b60008281526101a46020526040902060010154600160681b900460ff166135385760405162461bcd60e51b8152602060048201526011602482015270139bc8185c9b5bdc88195c5d5a5c1c1959607a1b6044820152606401610924565b6101945461019c5460405163a878b95d60e01b81523060048201526001600160a01b03848116602483015260448201929092526001606482015291169063a878b95d90608401600060405180830381600087803b15801561359857600080fd5b505af11580156135ac573d6000803e3d6000fd5b505050600092835250506101a460205260409020600101805460ff60681b19169055565b600054610100900460ff166135eb5760005460ff16156135ef565b303b155b61360b5760405162461bcd60e51b81526004016109249061481a565b600054610100900460ff1615801561362d576000805461ffff19166101011790555b613635613b2a565b61363d613b8f565b613645613bbe565b620186a061019b55620151806101a65569028a857425466f8000006101a7556101a8805461ffff191661080a17905560408051610120810182526000815260066020820152600891810191909152600a6060820152600c6080820152600e60a0820152601060c0820152601260e082015260146101008201526136cd906101a5906009613e42565b50600261019c556101a8805466ffffffffff0000191666010306073200001790558015610960576000805461ff001916905550565b60008061019b548361371491906149ca565b90506000805b61372561019d611ba4565b8160ff16101561378f57600061374061019d60ff8416613bf5565b600081815261019f60205260409020549091506137639063ffffffff1684614a92565b92508263ffffffff1684101561377c5795945050505050565b508061378781614a72565b91505061371a565b5060405162461bcd60e51b815260206004820152601760248201527f546865206f6464732061726520696e636f72726563742e0000000000000000006044820152606401610924565b60008061019b54836137ea91906149ca565b90506000805b6137fb6101a1611ba4565b8160ff16101561378f5760006138166101a160ff8416613bf5565b60008181526101a360205260409020549091506138399063ffffffff1684614a92565b92508263ffffffff168410156138525795945050505050565b508061385d81614a72565b9150506137f0565b60008381526101a0602052604080822081516101608101808452849391929183919082019083906009908288855b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116138935750505092845250506040805161012081019182905260209093019291506001840190600990826000855b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116138f35790505050505050815250509050600060088460ff1611613949578361394c565b60085b9050600082600001518260ff166009811061396957613969614634565b60200201519050600083602001518360ff166009811061398b5761398b614634565b602002015190508061ffff168261ffff1614156139ad57509250611e54915050565b60006139b98383614aba565b6139c4906001614add565b905060008161ffff166001600160401b038111156139e4576139e461402a565b604051908082528060200260200182016040528015613a0d578160200160208202803683370190505b50905060016000835b61ffff811615613a71578284613a2d600184614aba565b61ffff1681518110613a4157613a41614634565b6020908102919091010152613a5683836146a1565b60019390931b92915080613a6981614afa565b915050613a16565b506000613a7e828d6149ca565b90506000805b85518160ff161015613af357858160ff1681518110613aa557613aa5614634565b602002602001015182613ab891906146a1565b915081831015613ae157613acf60ff82168a614add565b9b505050505050505050505050611e54565b80613aeb81614a72565b915050613a84565b5060405162461bcd60e51b815260206004820152600b60248201526a27b2323990313937b5b2b760a91b6044820152606401610924565b600054610100900460ff16613b455760005460ff1615613b49565b303b155b613b655760405162461bcd60e51b81526004016109249061481a565b600054610100900460ff16158015613b87576000805461ffff19166101011790555b610fff613c01565b600054610100900460ff16613bb65760405162461bcd60e51b815260040161092490614b18565b610eba613c76565b600054610100900460ff16613be55760405162461bcd60e51b815260040161092490614b18565b613bed613c76565b613bb6613c76565b6000611e548383613c9d565b600054610100900460ff16613c1c5760005460ff1615613c20565b303b155b613c3c5760405162461bcd60e51b81526004016109249061481a565b600054610100900460ff16158015613c5e576000805461ffff19166101011790555b613c66613cc7565b613c6e613cfe565b610fff6121a9565b600054610100900460ff16610eba5760405162461bcd60e51b815260040161092490614b18565b6000826000018281548110613cb457613cb4614634565b9060005260206000200154905092915050565b600054610100900460ff16613cee5760405162461bcd60e51b815260040161092490614b18565b613cf6613c76565b610eba613d35565b600054610100900460ff16613d255760405162461bcd60e51b815260040161092490614b18565b613d2d613c76565b610eba613d65565b600054610100900460ff16613d5c5760405162461bcd60e51b815260040161092490614b18565b610eba336120f2565b600054610100900460ff16613d8c5760405162461bcd60e51b815260040161092490614b18565b61012d805460ff19169055565b82805482825590600052602060002090601f01602090048101928215613e325791602002820160005b83821115613e0357833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302613dc2565b8015613e305782816101000a81549060ff0219169055600101602081600001049283019260010302613e03565b505b50613e3e929150613ea9565b5090565b82805482825590600052602060002090601f01602090048101928215613e325791602002820160005b83821115613e0357835183826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302613e6b565b5b80821115613e3e5760008155600101613eaa565b600060208284031215613ed057600080fd5b81356001600160e01b031981168114611e5457600080fd5b600060208284031215613efa57600080fd5b5035919050565b60008083601f840112613f1357600080fd5b5081356001600160401b03811115613f2a57600080fd5b6020830191508360208260051b8501011115613f4557600080fd5b9250929050565b60008060008060008060608789031215613f6557600080fd5b86356001600160401b0380821115613f7c57600080fd5b613f888a838b01613f01565b90985096506020890135915080821115613fa157600080fd5b613fad8a838b01613f01565b90965094506040890135915080821115613fc657600080fd5b818901915089601f830112613fda57600080fd5b813581811115613fe957600080fd5b8a602061024083028501011115613fff57600080fd5b6020830194508093505050509295509295509295565b6001600160a01b038116811461096057600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b03811182821017156140685761406861402a565b604052919050565b600082601f83011261408157600080fd5b81356001600160401b0381111561409a5761409a61402a565b6140ad601f8201601f1916602001614040565b8181528460208386010111156140c257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156140f557600080fd5b843561410081614015565b9350602085013561411081614015565b92506040850135915060608501356001600160401b0381111561413257600080fd5b61413e87828801614070565b91505092959194509250565b60006020828403121561415c57600080fd5b8135611e5481614015565b6000806000806040858703121561417d57600080fd5b84356001600160401b038082111561419457600080fd5b6141a088838901613f01565b909650945060208701359150808211156141b957600080fd5b506141c687828801613f01565b95989497509550505050565b600080602083850312156141e557600080fd5b82356001600160401b038111156141fb57600080fd5b61420785828601613f01565b90969095509350505050565b60ff8116811461096057600080fd5b60008060006060848603121561423757600080fd5b83359250602084013561424981614213565b9150604084013561425981614213565b809150509250925092565b60008060008060008060008060006101208a8c03121561428357600080fd5b893561428e81614015565b985060208a013561429e81614015565b975060408a01356142ae81614015565b965060608a01356142be81614015565b955060808a01356142ce81614015565b945060a08a01356142de81614015565b935060c08a01356142ee81614015565b925060e08a01356142fe81614015565b91506101008a013561430f81614015565b809150509295985092959850929598565b6000806040838503121561433357600080fd5b82359150602083013561434581614213565b809150509250929050565b600082601f83011261436157600080fd5b813560206001600160401b0382111561437c5761437c61402a565b8160051b61438b828201614040565b92835284810182019282810190878511156143a557600080fd5b83870192505b848310156143c4578235825291830191908301906143ab565b979650505050505050565b600080600080600060a086880312156143e757600080fd5b85356143f281614015565b9450602086013561440281614015565b935060408601356001600160401b038082111561441e57600080fd5b61442a89838a01614350565b9450606088013591508082111561444057600080fd5b61444c89838a01614350565b9350608088013591508082111561446257600080fd5b5061446f88828901614070565b9150509295509295909350565b801515811461096057600080fd5b60006020828403121561449c57600080fd5b8135611e548161447c565b600080604083850312156144ba57600080fd5b8235915060208301356143458161447c565b600080602083850312156144df57600080fd5b82356001600160401b03808211156144f657600080fd5b818501915085601f83011261450a57600080fd5b81358181111561451957600080fd5b8660208260061b850101111561452e57600080fd5b60209290920196919550909350505050565b600080600080600060a0868803121561455857600080fd5b853561456381614015565b9450602086013561457381614015565b9350604086013592506060860135915060808601356001600160401b0381111561459c57600080fd5b61446f88828901614070565b6020808252601f908201527f547261696e696e6747616d653a20436f6e747261637473206e6f742073657400604082015260600190565b6020808252600f908201526e14995dd85c991cc81b9bdd081cd95d608a1b604082015260600190565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156146745761467461464a565b5060010190565b60006020828403121561468d57600080fd5b813563ffffffff81168114611e5457600080fd5b600082198211156146b4576146b461464a565b500190565b60008160001904831182151516156146d3576146d361464a565b500290565b6000813561ffff811681146108fa57600080fd5b81816000805b600981101561474d57614725614707856146d8565b845461ffff600386901b81811b801990931693909116901b16178455565b602084019350600282019150601e82111561474557600091506001830192505b6001016146f2565b50505050600161012083018183016000805b600981101561479957614774614707856146d8565b602084019350600282019150601e8211156147925791840191600091505b840161475f565b50505050505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600c908201526b4e6f20636f6e74726163747360a01b604082015260600190565b60006020828403121561480f57600080fd5b8135611e5481614213565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561487a57600080fd5b8151611e5481614213565b600060ff821660ff84168060ff038211156148a2576148a261464a565b019392505050565b6000828210156148bc576148bc61464a565b500390565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000604082840312156148fd57600080fd5b604051604081018181106001600160401b038211171561491f5761491f61402a565b6040528235815260208301356149348161447c565b60208201529392505050565b60006020828403121561495257600080fd5b8151611e548161447c565b60006020828403121561496f57600080fd5b8151611e5481614015565b60006020828403121561498c57600080fd5b5051919050565b634e487b7160e01b600052602160045260246000fd5b6000602082840312156149bb57600080fd5b815160058110611e5457600080fd5b6000826149e757634e487b7160e01b600052601260045260246000fd5b500690565b600060ff821660ff841680821015614a0657614a0661464a565b90039392505050565b634e487b7160e01b600052603160045260246000fd5b600060ff821660ff84168160ff0481118215151615614a4657614a4661464a565b029392505050565b600063ffffffff80831681811415614a6857614a6861464a565b6001019392505050565b600060ff821660ff811415614a8957614a8961464a565b60010192915050565b600063ffffffff808316818516808303821115614ab157614ab161464a565b01949350505050565b600061ffff83811690831681811015614ad557614ad561464a565b039392505050565b600061ffff808316818516808303821115614ab157614ab161464a565b600061ffff821680614b0e57614b0e61464a565b6000190192915050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212205877f9dc8475c5c3e927b4a98260f226ee8d0a3cad59eaaf71509bb93c78ba4364736f6c63430008090033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2787,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2790,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6549,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7087,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4405,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "__gap",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4346,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "__gap",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6838,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2665,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "_owner",
        "offset": 0,
        "slot": "251",
        "type": "t_address"
      },
      {
        "astId": 2779,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "__gap",
        "offset": 0,
        "slot": "252",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2875,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "_paused",
        "offset": 0,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 2966,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12059,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "admins",
        "offset": 0,
        "slot": "351",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12219,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "__gap",
        "offset": 0,
        "slot": "352",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 24471,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "world",
        "offset": 0,
        "slot": "402",
        "type": "t_contract(IWorld)26249"
      },
      {
        "astId": 24474,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "sacrificialAlter",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(ISacrificialAlter)20841"
      },
      {
        "astId": 24477,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "consumables",
        "offset": 0,
        "slot": "404",
        "type": "t_contract(IConsumables)20633"
      },
      {
        "astId": 24480,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "gp",
        "offset": 0,
        "slot": "405",
        "type": "t_contract(IGP)20793"
      },
      {
        "astId": 24483,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "wnd",
        "offset": 0,
        "slot": "406",
        "type": "t_contract(IWnD)22058"
      },
      {
        "astId": 24486,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "trainingProficiency",
        "offset": 0,
        "slot": "407",
        "type": "t_contract(ITrainingProficiency)25659"
      },
      {
        "astId": 24489,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "randomizer",
        "offset": 0,
        "slot": "408",
        "type": "t_contract(IRandomizerCL)12779"
      },
      {
        "astId": 24492,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "rift",
        "offset": 0,
        "slot": "409",
        "type": "t_contract(IRift)17251"
      },
      {
        "astId": 24495,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "graveyard",
        "offset": 0,
        "slot": "410",
        "type": "t_contract(IGraveyard)16917"
      },
      {
        "astId": 24497,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "ODDS_TOTAL",
        "offset": 0,
        "slot": "411",
        "type": "t_uint256"
      },
      {
        "astId": 24499,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "equipmentTokenId",
        "offset": 0,
        "slot": "412",
        "type": "t_uint256"
      },
      {
        "astId": 24502,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "rewardIds",
        "offset": 0,
        "slot": "413",
        "type": "t_struct(UintSet)7569_storage"
      },
      {
        "astId": 24506,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "rewardIdToOdds",
        "offset": 0,
        "slot": "415",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 24511,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "rewardIdToMultiplier",
        "offset": 0,
        "slot": "416",
        "type": "t_mapping(t_uint256,t_struct(RewardMultiplier)24457_storage)"
      },
      {
        "astId": 24514,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "gpAmts",
        "offset": 0,
        "slot": "417",
        "type": "t_struct(UintSet)7569_storage"
      },
      {
        "astId": 24518,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "gpAmtsToOdds",
        "offset": 0,
        "slot": "419",
        "type": "t_mapping(t_uint256,t_uint32)"
      },
      {
        "astId": 24523,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "tokenIdToInfo",
        "offset": 0,
        "slot": "420",
        "type": "t_mapping(t_uint256,t_struct(TokenTrainingInfo)24468_storage)"
      },
      {
        "astId": 24526,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "proficiencyToGamesPlayed",
        "offset": 0,
        "slot": "421",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 24528,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "gameCooldownTime",
        "offset": 0,
        "slot": "422",
        "type": "t_uint256"
      },
      {
        "astId": 24530,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "trainingFee",
        "offset": 0,
        "slot": "423",
        "type": "t_uint256"
      },
      {
        "astId": 24532,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "baseChanceWizardBurned",
        "offset": 0,
        "slot": "424",
        "type": "t_uint8"
      },
      {
        "astId": 24534,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "maxBurnReduction",
        "offset": 1,
        "slot": "424",
        "type": "t_uint8"
      },
      {
        "astId": 24536,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "damagePercentChance",
        "offset": 2,
        "slot": "424",
        "type": "t_uint8"
      },
      {
        "astId": 24538,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "baseHP",
        "offset": 3,
        "slot": "424",
        "type": "t_uint8"
      },
      {
        "astId": 24540,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "baseDamage",
        "offset": 4,
        "slot": "424",
        "type": "t_uint8"
      },
      {
        "astId": 24542,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "armorDamageReductionAmt",
        "offset": 5,
        "slot": "424",
        "type": "t_uint8"
      },
      {
        "astId": 24544,
        "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
        "label": "elixirOfHealingId",
        "offset": 6,
        "slot": "424",
        "type": "t_uint8"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint16)9_storage": {
        "base": "t_uint16",
        "encoding": "inplace",
        "label": "uint16[9]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IConsumables)20633": {
        "encoding": "inplace",
        "label": "contract IConsumables",
        "numberOfBytes": "20"
      },
      "t_contract(IGP)20793": {
        "encoding": "inplace",
        "label": "contract IGP",
        "numberOfBytes": "20"
      },
      "t_contract(IGraveyard)16917": {
        "encoding": "inplace",
        "label": "contract IGraveyard",
        "numberOfBytes": "20"
      },
      "t_contract(IRandomizerCL)12779": {
        "encoding": "inplace",
        "label": "contract IRandomizerCL",
        "numberOfBytes": "20"
      },
      "t_contract(IRift)17251": {
        "encoding": "inplace",
        "label": "contract IRift",
        "numberOfBytes": "20"
      },
      "t_contract(ISacrificialAlter)20841": {
        "encoding": "inplace",
        "label": "contract ISacrificialAlter",
        "numberOfBytes": "20"
      },
      "t_contract(ITrainingProficiency)25659": {
        "encoding": "inplace",
        "label": "contract ITrainingProficiency",
        "numberOfBytes": "20"
      },
      "t_contract(IWnD)22058": {
        "encoding": "inplace",
        "label": "contract IWnD",
        "numberOfBytes": "20"
      },
      "t_contract(IWorld)26249": {
        "encoding": "inplace",
        "label": "contract IWorld",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(RewardMultiplier)24457_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainingGameState.RewardMultiplier)",
        "numberOfBytes": "32",
        "value": "t_struct(RewardMultiplier)24457_storage"
      },
      "t_mapping(t_uint256,t_struct(TokenTrainingInfo)24468_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TrainingGameState.TokenTrainingInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenTrainingInfo)24468_storage"
      },
      "t_mapping(t_uint256,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_struct(RewardMultiplier)24457_storage": {
        "encoding": "inplace",
        "label": "struct TrainingGameState.RewardMultiplier",
        "members": [
          {
            "astId": 24452,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "min",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint16)9_storage"
          },
          {
            "astId": 24456,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint16)9_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)7111_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 7106,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7110,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenTrainingInfo)24468_storage": {
        "encoding": "inplace",
        "label": "struct TrainingGameState.TokenTrainingInfo",
        "members": [
          {
            "astId": 24459,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "requestId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 24461,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "timeNextPlay",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 24463,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "gamesPlayed",
            "offset": 8,
            "slot": "1",
            "type": "t_uint32"
          },
          {
            "astId": 24465,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "hp",
            "offset": 12,
            "slot": "1",
            "type": "t_uint8"
          },
          {
            "astId": 24467,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "hasArmor",
            "offset": 13,
            "slot": "1",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)7569_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 7568,
            "contract": "contracts/wnd/traininggame/TrainingGame.sol:TrainingGame",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7111_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}