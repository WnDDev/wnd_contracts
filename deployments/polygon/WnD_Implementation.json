{
  "address": "0x1c7eA19b5DE072770902083cCac106aa1B616405",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "adminTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areContractsSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getTokenTraits",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isWizard",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "body",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "head",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "spell",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "neck",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mouth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "wand",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "tail",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "rankIndex",
              "type": "uint8"
            }
          ],
          "internalType": "struct WizardDragon",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isWizard",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isWizard",
              "type": "bool"
            },
            {
              "internalType": "uint8",
              "name": "body",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "head",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "spell",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "eyes",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "neck",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "mouth",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "wand",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "tail",
              "type": "uint8"
            },
            {
              "internalType": "uint8",
              "name": "rankIndex",
              "type": "uint8"
            }
          ],
          "internalType": "struct WizardDragon",
          "name": "_traits",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_traits",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldPause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPaused",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traits",
      "outputs": [
        {
          "internalType": "contract ITraits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5de566e96154bccf670d53924337b26205f077332a567c3b8f4acbdee8d29dd2",
  "receipt": {
    "to": null,
    "from": "0xC7dEFA20Ec54917669f29e15D1ACB7c121b4780c",
    "contractAddress": "0x1c7eA19b5DE072770902083cCac106aa1B616405",
    "transactionIndex": 51,
    "gasUsed": "2440380",
    "logsBloom": "0x
    "blockHash": "0x7c8ff0fbb0c38d58b6fc8a8b8d109d743b994a1042d10990fb55c226a3d426bf",
    "transactionHash": "0x5de566e96154bccf670d53924337b26205f077332a567c3b8f4acbdee8d29dd2",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 27920060,
        "transactionHash": "0x5de566e96154bccf670d53924337b26205f077332a567c3b8f4acbdee8d29dd2",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c",
          "0x000000000000000000000000f0245f6251bef9447a08766b9da2b07b28ad80b0"
        ],
        "data": "0x000000000000000000000000000000000000000000000000014a3ef503450c6800000000000000000000000000000000000000000000008be610e1c4ea9238d1000000000000000000000000000000000000000000000108da26ad497ff0e0bf00000000000000000000000000000000000000000000008be4c6a2cfe74d2c69000000000000000000000000000000000000000000000108db70ec3e8335ed27",
        "logIndex": 203,
        "blockHash": "0x7c8ff0fbb0c38d58b6fc8a8b8d109d743b994a1042d10990fb55c226a3d426bf"
      }
    ],
    "blockNumber": 27920060,
    "cumulativeGasUsed": "10915970",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "414ef7e56515ad590a03e594319d7362",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"adminTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areContractsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getTokenTraits\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWizard\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"neck\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"wand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tail\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rankIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct WizardDragon\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isWizard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isWizard\",\"type\":\"bool\"},{\"internalType\":\"uint8\",\"name\":\"body\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"head\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"spell\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"eyes\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"neck\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"mouth\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"wand\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"tail\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"rankIndex\",\"type\":\"uint8\"}],\"internalType\":\"struct WizardDragon\",\"name\":\"_traits\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_traits\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPaused\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traits\",\"outputs\":[{\"internalType\":\"contract ITraits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"isWizard(uint256)\":{\"params\":{\"tokenId\":\"the ID of the token to check\"},\"returns\":{\"_0\":\"wizard - whether or not a token is a Wizards\"}},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burn a token - any game logic should be handled before this function.\"},\"getTokenTraits(uint256)\":{\"notice\":\"Traits \"},\"isWizard(uint256)\":{\"notice\":\"checks if a token is a Wizards\"},\"mint(address,uint256,(bool,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8))\":{\"notice\":\"Mint a token - any payment / game logic should be handled in the game contract. This will just generate random traits and mint a token to a designated address.\"},\"setPaused(bool)\":{\"notice\":\"enables owner to pause / unpause minting\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wnd/tokens/wnd/WnD.sol\":\"WnD\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC721MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC721Upgradeable, IERC721MetadataUpgradeable {\\n    using AddressUpgradeable for address;\\n    using StringsUpgradeable for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    function __ERC721_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC721_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return\\n            interfaceId == type(IERC721Upgradeable).interfaceId ||\\n            interfaceId == type(IERC721MetadataUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721Upgradeable.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721Upgradeable.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721Upgradeable.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721ReceiverUpgradeable(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721ReceiverUpgradeable.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x6c25d4211724a6f4cdc8d25397edc780f48d951fc81c1d507f59b3edb22afaf7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721Upgradeable.sol\\\";\\nimport \\\"./IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721EnumerableUpgradeable is Initializable, ERC721Upgradeable, IERC721EnumerableUpgradeable {\\n    function __ERC721Enumerable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC721Enumerable_init_unchained();\\n    }\\n\\n    function __ERC721Enumerable_init_unchained() internal onlyInitializing {\\n    }\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165Upgradeable, ERC721Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC721EnumerableUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Upgradeable.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721EnumerableUpgradeable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721Upgradeable.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721Upgradeable.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n    uint256[46] private __gap;\\n}\\n\",\"keccak256\":\"0x42b4ef85cb9cc2fc2d00bbdb638142a91fb7e6b191ad8923bfda9c90d3033a39\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4997774f1c7cd4f3596374621fc674b123a38e36e2ff1d17fbdc9d1111ed6a61\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x95a471796eb5f030fdc438660bebec121ad5d063763e64d92376ffb4b5ce8b70\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x398d3323c1932a5986bf36be7c57593e121e69d5db5b6574b4ee0d031443de37\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcd98895383d51dc86669a76ae3ad4419fc5dc079d01faea23498e80c1cf9f78a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"contracts/shared/AdminableUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./UtilitiesUpgradeable.sol\\\";\\n\\n// Do not add state to this contract.\\n//\\ncontract AdminableUpgradeable is UtilitiesUpgradeable {\\n\\n    mapping(address => bool) private admins;\\n\\n    function __Adminable_init() internal initializer {\\n        UtilitiesUpgradeable.__Utilities__init();\\n    }\\n\\n    function addAdmin(address _address) external onlyOwner {\\n        admins[_address] = true;\\n    }\\n\\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address _address) external onlyOwner {\\n        admins[_address] = false;\\n    }\\n\\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = false;\\n        }\\n    }\\n\\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\\n        if(_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function isAdmin(address _address) public view returns(bool) {\\n        return admins[_address];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(admins[msg.sender] || isOwner(), \\\"Not admin or owner\\\");\\n        _;\\n    }\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0xb9c7084cdb7d0cc6d4f3e7ce6e68e5f75c0a99bf311b1975ed27d8ff3088c7b6\",\"license\":\"MIT\"},\"contracts/shared/UtilitiesUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract UtilitiesUpgradeable is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n\\n    function __Utilities__init() internal initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        _pause();\\n    }\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"0 address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroLength(uint[] memory _array) {\\n        require(_array.length > 0, \\\"Empty array\\\");\\n        _;\\n    }\\n\\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\\n        require(_array1.length == _array2.length, \\\"Unequal lengths\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        /* solhint-disable avoid-tx-origin */\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    function isOwner() internal view returns(bool) {\\n        return owner() == msg.sender;\\n    }\\n}\",\"keccak256\":\"0x6d8894c4823d477c71487e9d325ab3d7a595723868621f522b664f717341769b\",\"license\":\"MIT\"},\"contracts/wnd/tokens/traits/ITraits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT LICENSE\\n\\npragma solidity ^0.8.0;\\n\\ninterface ITraits {\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xfebf7cfef26ed32ad67a63f48174978d6e9f7e6577d77359f8498ce1b9099d1f\",\"license\":\"MIT LICENSE\"},\"contracts/wnd/tokens/wnd/IWnD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\\ninterface IWnDRoot {\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function getTokenTraits(uint256 _tokenId) external returns(WizardDragon memory);\\n    function ownerOf(uint256 _tokenId) external returns(address);\\n    function approve(address _to, uint256 _tokenId) external;\\n}\\n\\ninterface IWnD is IERC721EnumerableUpgradeable {\\n    function mint(address _to, uint256 _tokenId, WizardDragon calldata _traits) external;\\n    function burn(uint256 _tokenId) external;\\n    function isWizard(uint256 _tokenId) external view returns(bool);\\n    function getTokenTraits(uint256 _tokenId) external view returns(WizardDragon memory);\\n    function exists(uint256 _tokenId) external view returns(bool);\\n    function adminTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\\nstruct WizardDragon {\\n    bool isWizard;\\n    uint8 body;\\n    uint8 head;\\n    uint8 spell;\\n    uint8 eyes;\\n    uint8 neck;\\n    uint8 mouth;\\n    uint8 wand;\\n    uint8 tail;\\n    uint8 rankIndex;\\n}\",\"keccak256\":\"0xd2b1e55a748db0f2b8d325ade1825479f655ed36e08ef977ffc1484cd9a403fa\",\"license\":\"MIT\"},\"contracts/wnd/tokens/wnd/WnD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./IWnD.sol\\\";\\nimport \\\"./WnDState.sol\\\";\\n\\ncontract WnD is Initializable, IWnD, WnDState {\\n\\n    function initialize() external initializer {\\n        ERC721Upgradeable.__ERC721_init(\\\"Wizards & Dragons Game\\\", \\\"WnD\\\");\\n        WnDState.__WnDState_init();\\n    }\\n\\n    /** CRITICAL TO SETUP / MODIFIERS */\\n\\n    modifier requireContractsSet() {\\n        require(areContractsSet(), \\\"WnD: Contracts not set\\\");\\n        _;\\n    }\\n\\n    function areContractsSet() public view returns(bool) {\\n        return address(traits) != address(0);\\n    }\\n\\n    function setContracts(address _traits) external onlyOwner {\\n        traits = ITraits(_traits);\\n    }\\n\\n    /** EXTERNAL */\\n\\n    /**\\n    * Mint a token - any payment / game logic should be handled in the game contract.\\n    * This will just generate random traits and mint a token to a designated address.\\n    */\\n    function mint(address _to, uint256 _tokenId, WizardDragon calldata _traits) external override whenNotPaused onlyAdminOrOwner {\\n        tokenTraits[_tokenId] = _traits;\\n        _safeMint(_to, _tokenId);\\n    }\\n\\n    /**\\n    * Burn a token - any game logic should be handled before this function.\\n    */\\n    function burn(uint256 _tokenId) external override whenNotPaused onlyAdminOrOwner {\\n        _burn(_tokenId);\\n    }\\n\\n    function adminTransferFrom(address _from, address _to, uint256 _tokenId) external override whenNotPaused onlyAdminOrOwner {\\n        _transfer(_from, _to, _tokenId);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override(ERC721Upgradeable, IERC721Upgradeable) onlyAdminOrOwner {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /** Lock down transfers for anything that isn't a game contract on L2.\\n    * You should only be able to play the game on L2, so any transfers should be from game logic.\\n    * This is crucial to ensure game state is preserved */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override onlyAdminOrOwner {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /** READ */\\n\\n    /**\\n    * checks if a token is a Wizards\\n    * @param tokenId the ID of the token to check\\n    * @return wizard - whether or not a token is a Wizards\\n    */\\n    function isWizard(uint256 tokenId) external view override returns (bool) {\\n        return tokenTraits[tokenId].isWizard;\\n    }\\n\\n    /** ADMIN */\\n\\n    /**\\n    * enables owner to pause / unpause minting\\n    */\\n    function setPaused(bool _paused) external requireContractsSet onlyAdminOrOwner {\\n        if(_paused) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    /** Traits */\\n\\n    function getTokenTraits(uint256 tokenId) external view override returns (WizardDragon memory) {\\n        return tokenTraits[tokenId];\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"Token ID does not exist\\\");\\n        return traits.tokenURI(tokenId);\\n    }\\n\\n    function exists(uint256 _tokenId) external view override returns(bool) {\\n        return _exists(_tokenId);\\n    }\\n\\n    function ownerOf(uint256 _tokenId) public view override(ERC721Upgradeable, IERC721Upgradeable) returns(address) {\\n        return super.ownerOf(_tokenId);\\n    }\\n\\n}\",\"keccak256\":\"0x585eaeb4554cc1076e48a1572919d6b5db5969332e2a94b49e6b522aa1a183f4\",\"license\":\"MIT\"},\"contracts/wnd/tokens/wnd/WnDState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"../../../shared/AdminableUpgradeable.sol\\\";\\nimport \\\"./IWnD.sol\\\";\\nimport \\\"../traits/ITraits.sol\\\";\\n\\nabstract contract WnDState is Initializable, AdminableUpgradeable, ERC721EnumerableUpgradeable {\\n\\n    // mapping from tokenId to a struct containing the token's traits\\n    mapping(uint256 => WizardDragon) internal tokenTraits;\\n\\n    // reference to Traits\\n    ITraits public traits;\\n\\n    function __WnDState_init() internal initializer {\\n        AdminableUpgradeable.__Adminable_init();\\n    }\\n}\",\"keccak256\":\"0x1f2702be500bde0fdfe43abc1100aa16dc318c5d372aec09599fb062f9e0b50c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612b35806100206000396000f3fe608060405234801561001057600080fd5b50600436106102275760003560e01c80636352211e116101305780639c54df64116100b8578063c87b56dd1161007c578063c87b56dd146105ca578063e1fc334f146105dd578063e985e9c5146105f1578063f2fde38b1461062e578063ff53f4731461064157600080fd5b80639c54df641461056b578063a22cb4651461057e578063b1197a3714610591578063b88d4fde146105a4578063bedb86fb146105b757600080fd5b80638129fc1c116100ff5780638129fc1c146104055780638cdcc4b41461040d5780638da5cb5b1461042157806394e568471461043257806395d89b411461056357600080fd5b80636352211e146103c457806370480275146103d757806370a08231146103ea578063715018a6146103fd57600080fd5b80632f745c59116101b35780634e5822af116101825780634e5822af1461036d5780634f558e79146103805780634f6ccce7146103935780635a2e2f47146103a65780635c975abb146103b957600080fd5b80632f745c5914610321578063377e11e01461033457806342842e0e1461034757806342966c681461035a57600080fd5b806316c38b3c116101fa57806316c38b3c146102a95780631785f53c146102bc57806318160ddd146102cf57806323b872dd146102e257806324d7806c146102f557600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610294575b600080fd5b61023f61023a3660046121b3565b610665565b60405190151581526020015b60405180910390f35b61025c610690565b60405161024b919061222f565b61027c610277366004612242565b610722565b6040516001600160a01b03909116815260200161024b565b6102a76102a2366004612277565b6107bd565b005b6102a76102b73660046122af565b6108d3565b6102a76102ca3660046122cc565b61097b565b610130545b60405190815260200161024b565b6102a76102f03660046122e7565b6109c6565b61023f6103033660046122cc565b6001600160a01b031660009081526097602052604090205460ff1690565b6102d461032f366004612277565b610a0e565b6102a7610342366004612323565b610aa5565b6102a76103553660046122e7565b610b41565b6102a7610368366004612242565b610b5c565b6102a761037b366004612398565b610bc5565b61023f61038e366004612242565b610c4d565b6102d46103a1366004612242565b610c6c565b6102a76103b43660046122cc565b610d01565b60655460ff1661023f565b61027c6103d2366004612242565b610d4e565b6102a76103e53660046122cc565b610d59565b6102d46103f83660046122cc565b610da7565b6102a7610e2e565b6102a7610e64565b610161546001600160a01b0316151561023f565b6033546001600160a01b031661027c565b610556610440366004612242565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091525060009081526101606020908152604091829020825161014081018452905460ff808216151583526101008083048216948401949094526201000082048116948301949094526301000000810484166060830152640100000000810484166080830152650100000000008104841660a083015266010000000000008104841660c08301526701000000000000008104841660e0830152680100000000000000008104841692820192909252690100000000000000000090910490911661012082015290565b60405161024b91906123e2565b61025c610f30565b6102a7610579366004612323565b610f3f565b6102a761058c3660046124a6565b610fdb565b6102a761059f3660046122e7565b610fea565b6102a76105b236600461254c565b61100d565b6102a76105c53660046122af565b610925565b61025c6105d8366004612242565b61108f565b6101615461027c906001600160a01b031681565b61023f6105ff3660046125f7565b6001600160a01b0391821660009081526101016020908152604080832093909416825291909152205460ff1690565b6102a761063c3660046122cc565b611177565b61023f61064f366004612242565b6000908152610160602052604090205460ff1690565b60006001600160e01b0319821663780e9d6360e01b148061068a575061068a8261120f565b92915050565b606060fc805461069f9061262a565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb9061262a565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b5050505050905090565b600081815260fe60205260408120546001600160a01b03166107a05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815261010060205260409020546001600160a01b031690565b60006107c88261125f565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610797565b336001600160a01b0382161480610852575061085281336105ff565b6108c45760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610797565b6108ce83836112d6565b505050565b610161546001600160a01b03166109255760405162461bcd60e51b815260206004820152601660248201527515db910e8810dbdb9d1c9858dd1cc81b9bdd081cd95d60521b6044820152606401610797565b3360009081526097602052604090205460ff16806109465750610946611345565b6109625760405162461bcd60e51b815260040161079790612665565b801561097357610970611369565b50565b6109706113de565b6033546001600160a01b031633146109a55760405162461bcd60e51b815260040161079790612691565b6001600160a01b03166000908152609760205260409020805460ff19169055565b3360009081526097602052604090205460ff16806109e757506109e7611345565b610a035760405162461bcd60e51b815260040161079790612665565b6108ce838383611458565b6000610a1983610da7565b8210610a7b5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610797565b506001600160a01b0391909116600090815261012e60209081526040808320938352929052205490565b6033546001600160a01b03163314610acf5760405162461bcd60e51b815260040161079790612691565b60005b818110156108ce57600060976000858585818110610af257610af26126c6565b9050602002016020810190610b0791906122cc565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610b39816126f2565b915050610ad2565b6108ce8383836040518060200160405280600081525061100d565b60655460ff1615610b7f5760405162461bcd60e51b81526004016107979061270d565b3360009081526097602052604090205460ff1680610ba05750610ba0611345565b610bbc5760405162461bcd60e51b815260040161079790612665565b61097081611603565b60655460ff1615610be85760405162461bcd60e51b81526004016107979061270d565b3360009081526097602052604090205460ff1680610c095750610c09611345565b610c255760405162461bcd60e51b815260040161079790612665565b6000828152610160602052604090208190610c40828261274a565b9050506108ce83836116aa565b600081815260fe60205260408120546001600160a01b0316151561068a565b6000610c786101305490565b8210610cdb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610797565b6101308281548110610cef57610cef6126c6565b90600052602060002001549050919050565b6033546001600160a01b03163314610d2b5760405162461bcd60e51b815260040161079790612691565b61016180546001600160a01b0319166001600160a01b0392909216919091179055565b600061068a8261125f565b6033546001600160a01b03163314610d835760405162461bcd60e51b815260040161079790612691565b6001600160a01b03166000908152609760205260409020805460ff19166001179055565b60006001600160a01b038216610e125760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610797565b506001600160a01b0316600090815260ff602052604090205490565b6033546001600160a01b03163314610e585760405162461bcd60e51b815260040161079790612691565b610e6260006116c4565b565b600054610100900460ff16610e7f5760005460ff1615610e83565b303b155b610e9f5760405162461bcd60e51b8152600401610797906128fe565b600054610100900460ff16158015610ec1576000805461ffff19166101011790555b610f146040518060400160405280601681526020017557697a61726473202620447261676f6e732047616d6560501b8152506040518060400160405280600381526020016215db9160ea1b815250611716565b610f1c611757565b8015610970576000805461ff001916905550565b606060fd805461069f9061262a565b6033546001600160a01b03163314610f695760405162461bcd60e51b815260040161079790612691565b60005b818110156108ce57600160976000858585818110610f8c57610f8c6126c6565b9050602002016020810190610fa191906122cc565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610fd3816126f2565b915050610f6c565b610fe63383836117bc565b5050565b60655460ff16156109c65760405162461bcd60e51b81526004016107979061270d565b611017338361188c565b61107d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610797565b61108984848484611984565b50505050565b600081815260fe60205260409020546060906001600160a01b03166110f65760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20494420646f6573206e6f742065786973740000000000000000006044820152606401610797565b6101615460405163c87b56dd60e01b8152600481018490526001600160a01b039091169063c87b56dd9060240160006040518083038186803b15801561113b57600080fd5b505afa15801561114f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261068a919081019061294c565b6033546001600160a01b031633146111a15760405162461bcd60e51b815260040161079790612691565b6001600160a01b0381166112065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610797565b610970816116c4565b60006001600160e01b031982166380ac58cd60e01b148061124057506001600160e01b03198216635b5e139f60e01b145b8061068a57506301ffc9a760e01b6001600160e01b031983161461068a565b600081815260fe60205260408120546001600160a01b03168061068a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610797565b60008181526101006020526040902080546001600160a01b0319166001600160a01b038416908117909155819061130c8261125f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60003361135a6033546001600160a01b031690565b6001600160a01b031614905090565b60655460ff161561138c5760405162461bcd60e51b81526004016107979061270d565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113c13390565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff166114275760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610797565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336113c1565b826001600160a01b031661146b8261125f565b6001600160a01b0316146114d35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610797565b6001600160a01b0382166115355760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610797565b6115408383836119b7565b61154b6000826112d6565b6001600160a01b038316600090815260ff602052604081208054600192906115749084906129c3565b90915550506001600160a01b038216600090815260ff602052604081208054600192906115a29084906129da565b9091555050600081815260fe602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061160e8261125f565b905061161c816000846119b7565b6116276000836112d6565b6001600160a01b038116600090815260ff602052604081208054600192906116509084906129c3565b9091555050600082815260fe602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610fe68282604051806020016040528060008152506119ff565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661173d5760405162461bcd60e51b8152600401610797906129f2565b611745611a32565b61174d611a32565b610fe68282611a59565b600054610100900460ff166117725760005460ff1615611776565b303b155b6117925760405162461bcd60e51b8152600401610797906128fe565b600054610100900460ff161580156117b4576000805461ffff19166101011790555b610f1c611aa7565b816001600160a01b0316836001600160a01b0316141561181e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610797565b6001600160a01b0383811660008181526101016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600081815260fe60205260408120546001600160a01b03166119055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610797565b60006119108361125f565b9050806001600160a01b0316846001600160a01b0316148061194b5750836001600160a01b031661194084610722565b6001600160a01b0316145b8061197c57506001600160a01b038082166000908152610101602090815260408083209388168352929052205460ff165b949350505050565b61198f848484611458565b61199b84848484611b0c565b6110895760405162461bcd60e51b815260040161079790612a3d565b3360009081526097602052604090205460ff16806119d857506119d8611345565b6119f45760405162461bcd60e51b815260040161079790612665565b6108ce838383611c19565b611a098383611cd3565b611a166000848484611b0c565b6108ce5760405162461bcd60e51b815260040161079790612a3d565b600054610100900460ff16610e625760405162461bcd60e51b8152600401610797906129f2565b600054610100900460ff16611a805760405162461bcd60e51b8152600401610797906129f2565b8151611a939060fc906020850190612104565b5080516108ce9060fd906020840190612104565b600054610100900460ff16611ac25760005460ff1615611ac6565b303b155b611ae25760405162461bcd60e51b8152600401610797906128fe565b600054610100900460ff16158015611b04576000805461ffff19166101011790555b610f1c611e21565b60006001600160a01b0384163b15611c0e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b50903390899088908890600401612a8f565b602060405180830381600087803b158015611b6a57600080fd5b505af1925050508015611b9a575060408051601f3d908101601f19168201909252611b9791810190612acc565b60015b611bf4573d808015611bc8576040519150601f19603f3d011682016040523d82523d6000602084013e611bcd565b606091505b508051611bec5760405162461bcd60e51b815260040161079790612a3d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061197c565b506001949350505050565b6001600160a01b038316611c7657611c71816101308054600083815261013160205260408120829055600182018355919091527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf340155565b611c99565b816001600160a01b0316836001600160a01b031614611c9957611c998382611e96565b6001600160a01b038216611cb0576108ce81611f38565b826001600160a01b0316826001600160a01b0316146108ce576108ce8282611fed565b6001600160a01b038216611d295760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610797565b600081815260fe60205260409020546001600160a01b031615611d8e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610797565b611d9a600083836119b7565b6001600160a01b038216600090815260ff60205260408120805460019290611dc39084906129da565b9091555050600081815260fe602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff16611e3c5760005460ff1615611e40565b303b155b611e5c5760405162461bcd60e51b8152600401610797906128fe565b600054610100900460ff16158015611e7e576000805461ffff19166101011790555b611e86612033565b611e8e61206a565b610f1c611369565b60006001611ea384610da7565b611ead91906129c3565b600083815261012f6020526040902054909150808214611f03576001600160a01b038416600090815261012e60209081526040808320858452825280832054848452818420819055835261012f90915290208190555b50600091825261012f602090815260408084208490556001600160a01b03909416835261012e81528383209183525290812055565b61013054600090611f4b906001906129c3565b600083815261013160205260408120546101308054939450909284908110611f7557611f756126c6565b90600052602060002001549050806101308381548110611f9757611f976126c6565b60009182526020808320909101929092558281526101319091526040808220849055858252812055610130805480611fd157611fd1612ae9565b6001900381819060005260206000200160009055905550505050565b6000611ff883610da7565b6001600160a01b03909316600090815261012e60209081526040808320868452825280832085905593825261012f9052919091209190915550565b600054610100900460ff1661205a5760405162461bcd60e51b8152600401610797906129f2565b612062611a32565b610e626120a1565b600054610100900460ff166120915760405162461bcd60e51b8152600401610797906129f2565b612099611a32565b610e626120d1565b600054610100900460ff166120c85760405162461bcd60e51b8152600401610797906129f2565b610e62336116c4565b600054610100900460ff166120f85760405162461bcd60e51b8152600401610797906129f2565b6065805460ff19169055565b8280546121109061262a565b90600052602060002090601f0160209004810192826121325760008555612178565b82601f1061214b57805160ff1916838001178555612178565b82800160010185558215612178579182015b8281111561217857825182559160200191906001019061215d565b50612184929150612188565b5090565b5b808211156121845760008155600101612189565b6001600160e01b03198116811461097057600080fd5b6000602082840312156121c557600080fd5b81356121d08161219d565b9392505050565b60005b838110156121f25781810151838201526020016121da565b838111156110895750506000910152565b6000815180845261221b8160208601602086016121d7565b601f01601f19169290920160200192915050565b6020815260006121d06020830184612203565b60006020828403121561225457600080fd5b5035919050565b80356001600160a01b038116811461227257600080fd5b919050565b6000806040838503121561228a57600080fd5b6122938361225b565b946020939093013593505050565b801515811461097057600080fd5b6000602082840312156122c157600080fd5b81356121d0816122a1565b6000602082840312156122de57600080fd5b6121d08261225b565b6000806000606084860312156122fc57600080fd5b6123058461225b565b92506123136020850161225b565b9150604084013590509250925092565b6000806020838503121561233657600080fd5b823567ffffffffffffffff8082111561234e57600080fd5b818501915085601f83011261236257600080fd5b81358181111561237157600080fd5b8660208260051b850101111561238657600080fd5b60209290920196919550909350505050565b60008060008385036101808112156123af57600080fd5b6123b88561225b565b935060208501359250610140603f19820112156123d457600080fd5b506040840190509250925092565b81511515815261014081016020830151612401602084018260ff169052565b506040830151612416604084018260ff169052565b50606083015161242b606084018260ff169052565b506080830151612440608084018260ff169052565b5060a083015161245560a084018260ff169052565b5060c083015161246a60c084018260ff169052565b5060e083015161247f60e084018260ff169052565b506101008381015160ff908116918401919091526101209384015116929091019190915290565b600080604083850312156124b957600080fd5b6124c28361225b565b915060208301356124d2816122a1565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561251c5761251c6124dd565b604052919050565b600067ffffffffffffffff82111561253e5761253e6124dd565b50601f01601f191660200190565b6000806000806080858703121561256257600080fd5b61256b8561225b565b93506125796020860161225b565b925060408501359150606085013567ffffffffffffffff81111561259c57600080fd5b8501601f810187136125ad57600080fd5b80356125c06125bb82612524565b6124f3565b8181528860208385010111156125d557600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561260a57600080fd5b6126138361225b565b91506126216020840161225b565b90509250929050565b600181811c9082168061263e57607f821691505b6020821081141561265f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612706576127066126dc565b5060010190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000813560ff8116811461068a57600080fd5b8135612755816122a1565b815490151560ff1660ff199190911617815561278c61277660208401612737565b825461ff00191660089190911b61ff0016178255565b6127b361279b60408401612737565b825462ff0000191660109190911b62ff000016178255565b6127dc6127c260608401612737565b825463ff000000191660189190911b63ff00000016178255565b6128076127eb60808401612737565b825464ff00000000191660209190911b64ff0000000016178255565b61283461281660a08401612737565b825465ff0000000000191660289190911b65ff000000000016178255565b61286361284360c08401612737565b825466ff000000000000191660309190911b66ff00000000000016178255565b61289461287260e08401612737565b825467ff00000000000000191660389190911b67ff0000000000000016178255565b6128c86128a46101008401612737565b825468ff0000000000000000191660409190911b68ff000000000000000016178255565b610fe66128d86101208401612737565b825469ff000000000000000000191660489190911b69ff00000000000000000016178255565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561295e57600080fd5b815167ffffffffffffffff81111561297557600080fd5b8201601f8101841361298657600080fd5b80516129946125bb82612524565b8181528560208385010111156129a957600080fd5b6129ba8260208301602086016121d7565b95945050505050565b6000828210156129d5576129d56126dc565b500390565b600082198211156129ed576129ed6126dc565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ac290830184612203565b9695505050505050565b600060208284031215612ade57600080fd5b81516121d08161219d565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200d0122224a160eeda617f10644c07bd9a01181bdfb0a15885b5f27c9736cfc5564736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c80636352211e116101305780639c54df64116100b8578063c87b56dd1161007c578063c87b56dd146105ca578063e1fc334f146105dd578063e985e9c5146105f1578063f2fde38b1461062e578063ff53f4731461064157600080fd5b80639c54df641461056b578063a22cb4651461057e578063b1197a3714610591578063b88d4fde146105a4578063bedb86fb146105b757600080fd5b80638129fc1c116100ff5780638129fc1c146104055780638cdcc4b41461040d5780638da5cb5b1461042157806394e568471461043257806395d89b411461056357600080fd5b80636352211e146103c457806370480275146103d757806370a08231146103ea578063715018a6146103fd57600080fd5b80632f745c59116101b35780634e5822af116101825780634e5822af1461036d5780634f558e79146103805780634f6ccce7146103935780635a2e2f47146103a65780635c975abb146103b957600080fd5b80632f745c5914610321578063377e11e01461033457806342842e0e1461034757806342966c681461035a57600080fd5b806316c38b3c116101fa57806316c38b3c146102a95780631785f53c146102bc57806318160ddd146102cf57806323b872dd146102e257806324d7806c146102f557600080fd5b806301ffc9a71461022c57806306fdde0314610254578063081812fc14610269578063095ea7b314610294575b600080fd5b61023f61023a3660046121b3565b610665565b60405190151581526020015b60405180910390f35b61025c610690565b60405161024b919061222f565b61027c610277366004612242565b610722565b6040516001600160a01b03909116815260200161024b565b6102a76102a2366004612277565b6107bd565b005b6102a76102b73660046122af565b6108d3565b6102a76102ca3660046122cc565b61097b565b610130545b60405190815260200161024b565b6102a76102f03660046122e7565b6109c6565b61023f6103033660046122cc565b6001600160a01b031660009081526097602052604090205460ff1690565b6102d461032f366004612277565b610a0e565b6102a7610342366004612323565b610aa5565b6102a76103553660046122e7565b610b41565b6102a7610368366004612242565b610b5c565b6102a761037b366004612398565b610bc5565b61023f61038e366004612242565b610c4d565b6102d46103a1366004612242565b610c6c565b6102a76103b43660046122cc565b610d01565b60655460ff1661023f565b61027c6103d2366004612242565b610d4e565b6102a76103e53660046122cc565b610d59565b6102d46103f83660046122cc565b610da7565b6102a7610e2e565b6102a7610e64565b610161546001600160a01b0316151561023f565b6033546001600160a01b031661027c565b610556610440366004612242565b6040805161014081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e0810182905261010081018290526101208101919091525060009081526101606020908152604091829020825161014081018452905460ff808216151583526101008083048216948401949094526201000082048116948301949094526301000000810484166060830152640100000000810484166080830152650100000000008104841660a083015266010000000000008104841660c08301526701000000000000008104841660e0830152680100000000000000008104841692820192909252690100000000000000000090910490911661012082015290565b60405161024b91906123e2565b61025c610f30565b6102a7610579366004612323565b610f3f565b6102a761058c3660046124a6565b610fdb565b6102a761059f3660046122e7565b610fea565b6102a76105b236600461254c565b61100d565b6102a76105c53660046122af565b610925565b61025c6105d8366004612242565b61108f565b6101615461027c906001600160a01b031681565b61023f6105ff3660046125f7565b6001600160a01b0391821660009081526101016020908152604080832093909416825291909152205460ff1690565b6102a761063c3660046122cc565b611177565b61023f61064f366004612242565b6000908152610160602052604090205460ff1690565b60006001600160e01b0319821663780e9d6360e01b148061068a575061068a8261120f565b92915050565b606060fc805461069f9061262a565b80601f01602080910402602001604051908101604052809291908181526020018280546106cb9061262a565b80156107185780601f106106ed57610100808354040283529160200191610718565b820191906000526020600020905b8154815290600101906020018083116106fb57829003601f168201915b5050505050905090565b600081815260fe60205260408120546001600160a01b03166107a05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b50600090815261010060205260409020546001600160a01b031690565b60006107c88261125f565b9050806001600160a01b0316836001600160a01b031614156108365760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610797565b336001600160a01b0382161480610852575061085281336105ff565b6108c45760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610797565b6108ce83836112d6565b505050565b610161546001600160a01b03166109255760405162461bcd60e51b815260206004820152601660248201527515db910e8810dbdb9d1c9858dd1cc81b9bdd081cd95d60521b6044820152606401610797565b3360009081526097602052604090205460ff16806109465750610946611345565b6109625760405162461bcd60e51b815260040161079790612665565b801561097357610970611369565b50565b6109706113de565b6033546001600160a01b031633146109a55760405162461bcd60e51b815260040161079790612691565b6001600160a01b03166000908152609760205260409020805460ff19169055565b3360009081526097602052604090205460ff16806109e757506109e7611345565b610a035760405162461bcd60e51b815260040161079790612665565b6108ce838383611458565b6000610a1983610da7565b8210610a7b5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610797565b506001600160a01b0391909116600090815261012e60209081526040808320938352929052205490565b6033546001600160a01b03163314610acf5760405162461bcd60e51b815260040161079790612691565b60005b818110156108ce57600060976000858585818110610af257610af26126c6565b9050602002016020810190610b0791906122cc565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610b39816126f2565b915050610ad2565b6108ce8383836040518060200160405280600081525061100d565b60655460ff1615610b7f5760405162461bcd60e51b81526004016107979061270d565b3360009081526097602052604090205460ff1680610ba05750610ba0611345565b610bbc5760405162461bcd60e51b815260040161079790612665565b61097081611603565b60655460ff1615610be85760405162461bcd60e51b81526004016107979061270d565b3360009081526097602052604090205460ff1680610c095750610c09611345565b610c255760405162461bcd60e51b815260040161079790612665565b6000828152610160602052604090208190610c40828261274a565b9050506108ce83836116aa565b600081815260fe60205260408120546001600160a01b0316151561068a565b6000610c786101305490565b8210610cdb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610797565b6101308281548110610cef57610cef6126c6565b90600052602060002001549050919050565b6033546001600160a01b03163314610d2b5760405162461bcd60e51b815260040161079790612691565b61016180546001600160a01b0319166001600160a01b0392909216919091179055565b600061068a8261125f565b6033546001600160a01b03163314610d835760405162461bcd60e51b815260040161079790612691565b6001600160a01b03166000908152609760205260409020805460ff19166001179055565b60006001600160a01b038216610e125760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610797565b506001600160a01b0316600090815260ff602052604090205490565b6033546001600160a01b03163314610e585760405162461bcd60e51b815260040161079790612691565b610e6260006116c4565b565b600054610100900460ff16610e7f5760005460ff1615610e83565b303b155b610e9f5760405162461bcd60e51b8152600401610797906128fe565b600054610100900460ff16158015610ec1576000805461ffff19166101011790555b610f146040518060400160405280601681526020017557697a61726473202620447261676f6e732047616d6560501b8152506040518060400160405280600381526020016215db9160ea1b815250611716565b610f1c611757565b8015610970576000805461ff001916905550565b606060fd805461069f9061262a565b6033546001600160a01b03163314610f695760405162461bcd60e51b815260040161079790612691565b60005b818110156108ce57600160976000858585818110610f8c57610f8c6126c6565b9050602002016020810190610fa191906122cc565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610fd3816126f2565b915050610f6c565b610fe63383836117bc565b5050565b60655460ff16156109c65760405162461bcd60e51b81526004016107979061270d565b611017338361188c565b61107d5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6044820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b6064820152608401610797565b61108984848484611984565b50505050565b600081815260fe60205260409020546060906001600160a01b03166110f65760405162461bcd60e51b815260206004820152601760248201527f546f6b656e20494420646f6573206e6f742065786973740000000000000000006044820152606401610797565b6101615460405163c87b56dd60e01b8152600481018490526001600160a01b039091169063c87b56dd9060240160006040518083038186803b15801561113b57600080fd5b505afa15801561114f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261068a919081019061294c565b6033546001600160a01b031633146111a15760405162461bcd60e51b815260040161079790612691565b6001600160a01b0381166112065760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610797565b610970816116c4565b60006001600160e01b031982166380ac58cd60e01b148061124057506001600160e01b03198216635b5e139f60e01b145b8061068a57506301ffc9a760e01b6001600160e01b031983161461068a565b600081815260fe60205260408120546001600160a01b03168061068a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610797565b60008181526101006020526040902080546001600160a01b0319166001600160a01b038416908117909155819061130c8261125f565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60003361135a6033546001600160a01b031690565b6001600160a01b031614905090565b60655460ff161561138c5760405162461bcd60e51b81526004016107979061270d565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586113c13390565b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff166114275760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610797565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336113c1565b826001600160a01b031661146b8261125f565b6001600160a01b0316146114d35760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610797565b6001600160a01b0382166115355760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610797565b6115408383836119b7565b61154b6000826112d6565b6001600160a01b038316600090815260ff602052604081208054600192906115749084906129c3565b90915550506001600160a01b038216600090815260ff602052604081208054600192906115a29084906129da565b9091555050600081815260fe602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600061160e8261125f565b905061161c816000846119b7565b6116276000836112d6565b6001600160a01b038116600090815260ff602052604081208054600192906116509084906129c3565b9091555050600082815260fe602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610fe68282604051806020016040528060008152506119ff565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661173d5760405162461bcd60e51b8152600401610797906129f2565b611745611a32565b61174d611a32565b610fe68282611a59565b600054610100900460ff166117725760005460ff1615611776565b303b155b6117925760405162461bcd60e51b8152600401610797906128fe565b600054610100900460ff161580156117b4576000805461ffff19166101011790555b610f1c611aa7565b816001600160a01b0316836001600160a01b0316141561181e5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610797565b6001600160a01b0383811660008181526101016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600081815260fe60205260408120546001600160a01b03166119055760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610797565b60006119108361125f565b9050806001600160a01b0316846001600160a01b0316148061194b5750836001600160a01b031661194084610722565b6001600160a01b0316145b8061197c57506001600160a01b038082166000908152610101602090815260408083209388168352929052205460ff165b949350505050565b61198f848484611458565b61199b84848484611b0c565b6110895760405162461bcd60e51b815260040161079790612a3d565b3360009081526097602052604090205460ff16806119d857506119d8611345565b6119f45760405162461bcd60e51b815260040161079790612665565b6108ce838383611c19565b611a098383611cd3565b611a166000848484611b0c565b6108ce5760405162461bcd60e51b815260040161079790612a3d565b600054610100900460ff16610e625760405162461bcd60e51b8152600401610797906129f2565b600054610100900460ff16611a805760405162461bcd60e51b8152600401610797906129f2565b8151611a939060fc906020850190612104565b5080516108ce9060fd906020840190612104565b600054610100900460ff16611ac25760005460ff1615611ac6565b303b155b611ae25760405162461bcd60e51b8152600401610797906128fe565b600054610100900460ff16158015611b04576000805461ffff19166101011790555b610f1c611e21565b60006001600160a01b0384163b15611c0e57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290611b50903390899088908890600401612a8f565b602060405180830381600087803b158015611b6a57600080fd5b505af1925050508015611b9a575060408051601f3d908101601f19168201909252611b9791810190612acc565b60015b611bf4573d808015611bc8576040519150601f19603f3d011682016040523d82523d6000602084013e611bcd565b606091505b508051611bec5760405162461bcd60e51b815260040161079790612a3d565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061197c565b506001949350505050565b6001600160a01b038316611c7657611c71816101308054600083815261013160205260408120829055600182018355919091527f2f605e086faac1d93117bbfbc18835d434e9405fadc1ca66faf4b864746daf340155565b611c99565b816001600160a01b0316836001600160a01b031614611c9957611c998382611e96565b6001600160a01b038216611cb0576108ce81611f38565b826001600160a01b0316826001600160a01b0316146108ce576108ce8282611fed565b6001600160a01b038216611d295760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610797565b600081815260fe60205260409020546001600160a01b031615611d8e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610797565b611d9a600083836119b7565b6001600160a01b038216600090815260ff60205260408120805460019290611dc39084906129da565b9091555050600081815260fe602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600054610100900460ff16611e3c5760005460ff1615611e40565b303b155b611e5c5760405162461bcd60e51b8152600401610797906128fe565b600054610100900460ff16158015611e7e576000805461ffff19166101011790555b611e86612033565b611e8e61206a565b610f1c611369565b60006001611ea384610da7565b611ead91906129c3565b600083815261012f6020526040902054909150808214611f03576001600160a01b038416600090815261012e60209081526040808320858452825280832054848452818420819055835261012f90915290208190555b50600091825261012f602090815260408084208490556001600160a01b03909416835261012e81528383209183525290812055565b61013054600090611f4b906001906129c3565b600083815261013160205260408120546101308054939450909284908110611f7557611f756126c6565b90600052602060002001549050806101308381548110611f9757611f976126c6565b60009182526020808320909101929092558281526101319091526040808220849055858252812055610130805480611fd157611fd1612ae9565b6001900381819060005260206000200160009055905550505050565b6000611ff883610da7565b6001600160a01b03909316600090815261012e60209081526040808320868452825280832085905593825261012f9052919091209190915550565b600054610100900460ff1661205a5760405162461bcd60e51b8152600401610797906129f2565b612062611a32565b610e626120a1565b600054610100900460ff166120915760405162461bcd60e51b8152600401610797906129f2565b612099611a32565b610e626120d1565b600054610100900460ff166120c85760405162461bcd60e51b8152600401610797906129f2565b610e62336116c4565b600054610100900460ff166120f85760405162461bcd60e51b8152600401610797906129f2565b6065805460ff19169055565b8280546121109061262a565b90600052602060002090601f0160209004810192826121325760008555612178565b82601f1061214b57805160ff1916838001178555612178565b82800160010185558215612178579182015b8281111561217857825182559160200191906001019061215d565b50612184929150612188565b5090565b5b808211156121845760008155600101612189565b6001600160e01b03198116811461097057600080fd5b6000602082840312156121c557600080fd5b81356121d08161219d565b9392505050565b60005b838110156121f25781810151838201526020016121da565b838111156110895750506000910152565b6000815180845261221b8160208601602086016121d7565b601f01601f19169290920160200192915050565b6020815260006121d06020830184612203565b60006020828403121561225457600080fd5b5035919050565b80356001600160a01b038116811461227257600080fd5b919050565b6000806040838503121561228a57600080fd5b6122938361225b565b946020939093013593505050565b801515811461097057600080fd5b6000602082840312156122c157600080fd5b81356121d0816122a1565b6000602082840312156122de57600080fd5b6121d08261225b565b6000806000606084860312156122fc57600080fd5b6123058461225b565b92506123136020850161225b565b9150604084013590509250925092565b6000806020838503121561233657600080fd5b823567ffffffffffffffff8082111561234e57600080fd5b818501915085601f83011261236257600080fd5b81358181111561237157600080fd5b8660208260051b850101111561238657600080fd5b60209290920196919550909350505050565b60008060008385036101808112156123af57600080fd5b6123b88561225b565b935060208501359250610140603f19820112156123d457600080fd5b506040840190509250925092565b81511515815261014081016020830151612401602084018260ff169052565b506040830151612416604084018260ff169052565b50606083015161242b606084018260ff169052565b506080830151612440608084018260ff169052565b5060a083015161245560a084018260ff169052565b5060c083015161246a60c084018260ff169052565b5060e083015161247f60e084018260ff169052565b506101008381015160ff908116918401919091526101209384015116929091019190915290565b600080604083850312156124b957600080fd5b6124c28361225b565b915060208301356124d2816122a1565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561251c5761251c6124dd565b604052919050565b600067ffffffffffffffff82111561253e5761253e6124dd565b50601f01601f191660200190565b6000806000806080858703121561256257600080fd5b61256b8561225b565b93506125796020860161225b565b925060408501359150606085013567ffffffffffffffff81111561259c57600080fd5b8501601f810187136125ad57600080fd5b80356125c06125bb82612524565b6124f3565b8181528860208385010111156125d557600080fd5b8160208401602083013760006020838301015280935050505092959194509250565b6000806040838503121561260a57600080fd5b6126138361225b565b91506126216020840161225b565b90509250929050565b600181811c9082168061263e57607f821691505b6020821081141561265f57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415612706576127066126dc565b5060010190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6000813560ff8116811461068a57600080fd5b8135612755816122a1565b815490151560ff1660ff199190911617815561278c61277660208401612737565b825461ff00191660089190911b61ff0016178255565b6127b361279b60408401612737565b825462ff0000191660109190911b62ff000016178255565b6127dc6127c260608401612737565b825463ff000000191660189190911b63ff00000016178255565b6128076127eb60808401612737565b825464ff00000000191660209190911b64ff0000000016178255565b61283461281660a08401612737565b825465ff0000000000191660289190911b65ff000000000016178255565b61286361284360c08401612737565b825466ff000000000000191660309190911b66ff00000000000016178255565b61289461287260e08401612737565b825467ff00000000000000191660389190911b67ff0000000000000016178255565b6128c86128a46101008401612737565b825468ff0000000000000000191660409190911b68ff000000000000000016178255565b610fe66128d86101208401612737565b825469ff000000000000000000191660489190911b69ff00000000000000000016178255565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60006020828403121561295e57600080fd5b815167ffffffffffffffff81111561297557600080fd5b8201601f8101841361298657600080fd5b80516129946125bb82612524565b8181528560208385010111156129a957600080fd5b6129ba8260208301602086016121d7565b95945050505050565b6000828210156129d5576129d56126dc565b500390565b600082198211156129ed576129ed6126dc565b500190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612ac290830184612203565b9695505050505050565b600060208284031215612ade57600080fd5b81516121d08161219d565b634e487b7160e01b600052603160045260246000fdfea26469706673582212200d0122224a160eeda617f10644c07bd9a01181bdfb0a15885b5f27c9736cfc5564736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "isWizard(uint256)": {
        "params": {
          "tokenId": "the ID of the token to check"
        },
        "returns": {
          "_0": "wizard - whether or not a token is a Wizards"
        }
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(uint256)": {
        "notice": "Burn a token - any game logic should be handled before this function."
      },
      "getTokenTraits(uint256)": {
        "notice": "Traits "
      },
      "isWizard(uint256)": {
        "notice": "checks if a token is a Wizards"
      },
      "mint(address,uint256,(bool,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8))": {
        "notice": "Mint a token - any payment / game logic should be handled in the game contract. This will just generate random traits and mint a token to a designated address."
      },
      "setPaused(bool)": {
        "notice": "enables owner to pause / unpause minting"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2787,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2790,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6838,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2665,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 2779,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2875,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 2966,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12019,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "admins",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12179,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7087,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5111,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_name",
        "offset": 0,
        "slot": "252",
        "type": "t_string_storage"
      },
      {
        "astId": 5113,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_symbol",
        "offset": 0,
        "slot": "253",
        "type": "t_string_storage"
      },
      {
        "astId": 5117,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_owners",
        "offset": 0,
        "slot": "254",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5121,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_balances",
        "offset": 0,
        "slot": "255",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5125,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5131,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5942,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "__gap",
        "offset": 0,
        "slot": "258",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 6116,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "302",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 6120,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "303",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6123,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_allTokens",
        "offset": 0,
        "slot": "304",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6127,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "305",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6442,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "__gap",
        "offset": 0,
        "slot": "306",
        "type": "t_array(t_uint256)46_storage"
      },
      {
        "astId": 20642,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "tokenTraits",
        "offset": 0,
        "slot": "352",
        "type": "t_mapping(t_uint256,t_struct(WizardDragon)20344_storage)"
      },
      {
        "astId": 20645,
        "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
        "label": "traits",
        "offset": 0,
        "slot": "353",
        "type": "t_contract(ITraits)19556"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)46_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[46]",
        "numberOfBytes": "1472"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ITraits)19556": {
        "encoding": "inplace",
        "label": "contract ITraits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(WizardDragon)20344_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct WizardDragon)",
        "numberOfBytes": "32",
        "value": "t_struct(WizardDragon)20344_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(WizardDragon)20344_storage": {
        "encoding": "inplace",
        "label": "struct WizardDragon",
        "members": [
          {
            "astId": 20325,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "isWizard",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 20327,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "body",
            "offset": 1,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20329,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "head",
            "offset": 2,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20331,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "spell",
            "offset": 3,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20333,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "eyes",
            "offset": 4,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20335,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "neck",
            "offset": 5,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20337,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "mouth",
            "offset": 6,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20339,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "wand",
            "offset": 7,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20341,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "tail",
            "offset": 8,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 20343,
            "contract": "contracts/wnd/tokens/wnd/WnD.sol:WnD",
            "label": "rankIndex",
            "offset": 9,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}