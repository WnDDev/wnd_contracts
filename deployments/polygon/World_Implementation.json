{
  "address": "0x58f9E54c10ebd74EDd71cdC15ec36EB780f1aDaD",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "addAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "addDragonToWorld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "addWizardToWorld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "areContractsSet",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "changeLocationOfWizard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_rankIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "dragonAtLocationAtRankAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dragonBonusForSameLocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "finishStakeWizards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "finishUnstakeWizards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getDragonsAtLocationForOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_randomSeed",
          "type": "uint256"
        },
        {
          "internalType": "enum Location",
          "name": "_locationOfEvent",
          "type": "uint8"
        }
      ],
      "name": "getRandomDragonOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeableDragonLocations",
      "outputs": [
        {
          "internalType": "enum Location[]",
          "name": "",
          "type": "uint8[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalRankStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "getWizardsAtLocationForOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "isOwnerOfTokenId",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTokenInWorld",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "locationOfToken",
      "outputs": [
        {
          "internalType": "enum Location",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_rankIndex",
          "type": "uint256"
        }
      ],
      "name": "numberOfDragonsStakedAtLocationAtRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rankIndex",
          "type": "uint256"
        }
      ],
      "name": "numberOfDragonsStakedAtRank",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "numStaked",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "numberOfWizardsStakedAtLocation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOfTokenId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "removeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_addresses",
          "type": "address[]"
        }
      ],
      "name": "removeAdmins",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "removeDragonFromWorld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "removeWizardFromWorld",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rift",
      "outputs": [
        {
          "internalType": "contract IRift",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trainingGroundsAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_wndAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_riftAddress",
          "type": "address"
        }
      ],
      "name": "setContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_dragonBonusForSameLocation",
          "type": "uint256"
        }
      ],
      "name": "setDragonBonus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_shouldPause",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ranks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_points",
          "type": "uint256[]"
        }
      ],
      "name": "setRankToPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Location[]",
          "name": "_locations",
          "type": "uint8[]"
        }
      ],
      "name": "setStakeableDragonLocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rankStaked",
          "type": "uint256"
        }
      ],
      "name": "setTotalRankStaked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setTotalRankStakedCalculated",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "stakeDragons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "startStakeWizards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "startUnstakeWizards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfDragons",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNumberOfWizards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trainingGrounds",
      "outputs": [
        {
          "internalType": "contract ITrainingGrounds",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        }
      ],
      "name": "unstakeDragons",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Location",
          "name": "_location",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "wizardAtLocationAtIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wnd",
      "outputs": [
        {
          "internalType": "contract IWnD",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3487d931dd5e4c041478cbcc43f2822e48e7720f8946d71b85281a95de74af9a",
  "receipt": {
    "to": null,
    "from": "0xC7dEFA20Ec54917669f29e15D1ACB7c121b4780c",
    "contractAddress": "0x58f9E54c10ebd74EDd71cdC15ec36EB780f1aDaD",
    "transactionIndex": 30,
    "gasUsed": "3703975",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000800000000000000000000100000000000000000000000000000000080000000000000000000000000080000000000100000000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000800000000000000000000000000004000000000000000000001000000000000000000000000000000100000000000000000000000000000100000000020000000000000000000200000000000100000",
    "blockHash": "0x100a0bff5875770972744435e43ff051b3e2ad42aef60371ca2964cec2067516",
    "transactionHash": "0x3487d931dd5e4c041478cbcc43f2822e48e7720f8946d71b85281a95de74af9a",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 27983167,
        "transactionHash": "0x3487d931dd5e4c041478cbcc43f2822e48e7720f8946d71b85281a95de74af9a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c",
          "0x000000000000000000000000b9ede6f94d192073d8eaf85f8db677133d483249"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002ac46c5e44358b00000000000000000000000000000000000000000000000651668bc28933dea5c000000000000000000000000000000000000000000001d45ad6f2d844a592deb00000000000000000000000000000000000000000000006513bc7562aefa91ac000000000000000000000000000000000000000000001d45b01b744a2e9c869b",
        "logIndex": 120,
        "blockHash": "0x100a0bff5875770972744435e43ff051b3e2ad42aef60371ca2964cec2067516"
      }
    ],
    "blockNumber": 27983167,
    "cumulativeGasUsed": "8558320",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e8638f95f269f94a04f40d09821c37a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"addDragonToWorld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"addWizardToWorld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"areContractsSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"changeLocationOfWizard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rankIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"dragonAtLocationAtRankAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dragonBonusForSameLocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"finishStakeWizards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"finishUnstakeWizards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getDragonsAtLocationForOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randomSeed\",\"type\":\"uint256\"},{\"internalType\":\"enum Location\",\"name\":\"_locationOfEvent\",\"type\":\"uint8\"}],\"name\":\"getRandomDragonOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeableDragonLocations\",\"outputs\":[{\"internalType\":\"enum Location[]\",\"name\":\"\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalRankStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"getWizardsAtLocationForOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"isOwnerOfTokenId\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTokenInWorld\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"locationOfToken\",\"outputs\":[{\"internalType\":\"enum Location\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_rankIndex\",\"type\":\"uint256\"}],\"name\":\"numberOfDragonsStakedAtLocationAtRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rankIndex\",\"type\":\"uint256\"}],\"name\":\"numberOfDragonsStakedAtRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"numStaked\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"numberOfWizardsStakedAtLocation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOfTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"removeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"}],\"name\":\"removeAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeDragonFromWorld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"removeWizardFromWorld\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rift\",\"outputs\":[{\"internalType\":\"contract IRift\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trainingGroundsAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wndAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_riftAddress\",\"type\":\"address\"}],\"name\":\"setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_dragonBonusForSameLocation\",\"type\":\"uint256\"}],\"name\":\"setDragonBonus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_shouldPause\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ranks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_points\",\"type\":\"uint256[]\"}],\"name\":\"setRankToPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Location[]\",\"name\":\"_locations\",\"type\":\"uint8[]\"}],\"name\":\"setStakeableDragonLocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rankStaked\",\"type\":\"uint256\"}],\"name\":\"setTotalRankStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTotalRankStakedCalculated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"stakeDragons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"startStakeWizards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"startUnstakeWizards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfDragons\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNumberOfWizards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trainingGrounds\",\"outputs\":[{\"internalType\":\"contract ITrainingGrounds\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"}],\"name\":\"unstakeDragons\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Location\",\"name\":\"_location\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"wizardAtLocationAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wnd\",\"outputs\":[{\"internalType\":\"contract IWnD\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setTotalRankStaked(uint256)\":{\"notice\":\"This function is only here in case it is required to tweak the rankToPoints mapping for probability distribution on random dragon selection. In the most perfect of worlds, this will never be called. If it does, it assumes that the _rankStaked parameter is calculated by new rankToPoints mappings for each dragon staked. \"},\"setTotalRankStakedCalculated()\":{\"notice\":\"This function is only here in case it is required to tweak the rankToPoints mapping for probability distribution on random dragon selection. In the most perfect of worlds, this will never be called. If it does, it assumes that the _rankStaked parameter is calculated by new rankToPoints mappings for each dragon staked. \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/wnd/world/World.sol\":\"World\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x9ffedb33e192f8821cbaead72596c79ea87fb28a73f8d3a9f5004449799f8e1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xf93da311a3b34a8363a759c404d575746fa38351fb29ecd646c608e27219ebec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4997774f1c7cd4f3596374621fc674b123a38e36e2ff1d17fbdc9d1111ed6a61\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x663079de534a3b3b4952558df1027a2698c793cc5032a21ad6767764e8de834f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x0b0d548f6381370d394f7a434f994dc678b3ef3e755de106109d61343a685ea7\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0004699ba89fa356eb0d58d815b42dcf52eccd2765e95256631b838bce2556bc\",\"license\":\"MIT\"},\"contracts/shared/AdminableUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./UtilitiesUpgradeable.sol\\\";\\n\\n// Do not add state to this contract.\\n//\\ncontract AdminableUpgradeable is UtilitiesUpgradeable {\\n\\n    mapping(address => bool) private admins;\\n\\n    function __Adminable_init() internal initializer {\\n        UtilitiesUpgradeable.__Utilities__init();\\n    }\\n\\n    function addAdmin(address _address) external onlyOwner {\\n        admins[_address] = true;\\n    }\\n\\n    function addAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = true;\\n        }\\n    }\\n\\n    function removeAdmin(address _address) external onlyOwner {\\n        admins[_address] = false;\\n    }\\n\\n    function removeAdmins(address[] calldata _addresses) external onlyOwner {\\n        for(uint256 i = 0; i < _addresses.length; i++) {\\n            admins[_addresses[i]] = false;\\n        }\\n    }\\n\\n    function setPause(bool _shouldPause) external onlyAdminOrOwner {\\n        if(_shouldPause) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    function isAdmin(address _address) public view returns(bool) {\\n        return admins[_address];\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(admins[msg.sender], \\\"Not admin\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(admins[msg.sender] || isOwner(), \\\"Not admin or owner\\\");\\n        _;\\n    }\\n    uint256[50] private __gap;\\n}\",\"keccak256\":\"0xb9c7084cdb7d0cc6d4f3e7ce6e68e5f75c0a99bf311b1975ed27d8ff3088c7b6\",\"license\":\"MIT\"},\"contracts/shared/UtilitiesUpgradeable.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract UtilitiesUpgradeable is Initializable, OwnableUpgradeable, PausableUpgradeable {\\n\\n    function __Utilities__init() internal initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        _pause();\\n    }\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(address(0) != _address, \\\"0 address\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroLength(uint[] memory _array) {\\n        require(_array.length > 0, \\\"Empty array\\\");\\n        _;\\n    }\\n\\n    modifier lengthsAreEqual(uint[] memory _array1, uint[] memory _array2) {\\n        require(_array1.length == _array2.length, \\\"Unequal lengths\\\");\\n        _;\\n    }\\n\\n    modifier onlyEOA() {\\n        /* solhint-disable avoid-tx-origin */\\n        require(msg.sender == tx.origin, \\\"No contracts\\\");\\n        _;\\n    }\\n\\n    function isOwner() internal view returns(bool) {\\n        return owner() == msg.sender;\\n    }\\n}\",\"keccak256\":\"0x6d8894c4823d477c71487e9d325ab3d7a595723868621f522b664f717341769b\",\"license\":\"MIT\"},\"contracts/shared/randomizercl/IRandomizerCL.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRandomizerCL {\\n    // Returns a request ID for the random number. This should be kept and mapped to whatever the contract\\n    // is tracking randoms for.\\n    // Admin only.\\n    function getRandomNumber() external returns(bytes32);\\n\\n    // Returns the random for the given request ID.\\n    // Will revert if the random is not ready.\\n    function randomForRequestID(bytes32 _requestID) external view returns(uint256);\\n\\n    // Returns if the request ID has been fulfilled yet.\\n    function isRequestIDFulfilled(bytes32 _requestID) external view returns(bool);\\n}\",\"keccak256\":\"0x0543974321e677f332060f68731869f3904fb63c2a430945905ce639a441aca7\",\"license\":\"MIT\"},\"contracts/wnd/rift/IRift.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../shared/IDragonStakable.sol\\\";\\n\\ninterface IRift is IDragonStakable {\\n\\n    // Returns the rift tier for the given user based on how much GP is staked at the rift.\\n    function getRiftTier(address _address) external view returns(uint256);\\n}\",\"keccak256\":\"0xda50f9362b0d1afec30ad7082dc3f805e6712e561d9b97f902f5c81debf66828\",\"license\":\"MIT\"},\"contracts/wnd/shared/IDragonStakable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDragonStakable {\\n    function stake(uint256 _tokenId, address _owner) external;\\n    // doTransfer handles whether or not the NFT should change wallet owners\\n    // Set to false when 'moving locations' without having to transfer the NFT twice.\\n    function unstake(uint256 _tokenId, bool doTransfer) external;\\n}\",\"keccak256\":\"0xdae4f4ec350a6ad2a2ca839503128107d7ef3316f4c5d92c26d0cd1cfac544e0\",\"license\":\"MIT\"},\"contracts/wnd/shared/IWizardStakable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWizardStakable {\\n    function startStake(uint256 _tokenId, address _owner) external;\\n    function finishStake(uint256 _tokenId) external;\\n\\n    function startUnstake(uint256 _tokenId) external;\\n    function finishUnstake(uint256 _tokenId) external;\\n}\",\"keccak256\":\"0xf4968bebca820fecb932d92581785172e2c60b1f124fbc02ad929b6ef4fe250e\",\"license\":\"MIT\"},\"contracts/wnd/tokens/wnd/IWnD.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\\ninterface IWnDRoot {\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n    function getTokenTraits(uint256 _tokenId) external returns(WizardDragon memory);\\n    function ownerOf(uint256 _tokenId) external returns(address);\\n    function approve(address _to, uint256 _tokenId) external;\\n}\\n\\ninterface IWnD is IERC721EnumerableUpgradeable {\\n    function mint(address _to, uint256 _tokenId, WizardDragon calldata _traits) external;\\n    function burn(uint256 _tokenId) external;\\n    function isWizard(uint256 _tokenId) external view returns(bool);\\n    function getTokenTraits(uint256 _tokenId) external view returns(WizardDragon memory);\\n    function exists(uint256 _tokenId) external view returns(bool);\\n    function adminTransferFrom(address _from, address _to, uint256 _tokenId) external;\\n}\\n\\nstruct WizardDragon {\\n    bool isWizard;\\n    uint8 body;\\n    uint8 head;\\n    uint8 spell;\\n    uint8 eyes;\\n    uint8 neck;\\n    uint8 mouth;\\n    uint8 wand;\\n    uint8 tail;\\n    uint8 rankIndex;\\n}\",\"keccak256\":\"0xd2b1e55a748db0f2b8d325ade1825479f655ed36e08ef977ffc1484cd9a403fa\",\"license\":\"MIT\"},\"contracts/wnd/traininggrounds/ITrainingGrounds.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../shared/IWizardStakable.sol\\\";\\nimport \\\"../shared/IDragonStakable.sol\\\";\\n\\ninterface ITrainingGrounds is IWizardStakable, IDragonStakable {\\n\\n}\",\"keccak256\":\"0x86dce2512455a86d45374c938d5f0e40eacf9e44cc193746b4b73af824d0cfd6\",\"license\":\"MIT\"},\"contracts/wnd/trainingproficiency/ITrainingProficiency.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITrainingProficiency {\\n\\n    // Returns the proficiency for the given Wizard.\\n    function proficiencyForWizard(uint256 _tokenId) external view returns(uint8);\\n\\n    // Increases the proficiency of the given wizard by 1.\\n    // Only admin.\\n    function increaseProficiencyForWizard(uint256 _tokenId) external;\\n    // Resets the proficiency of the given wizard.\\n    // Only admin.\\n    function resetProficiencyForWizard(uint256 _tokenId) external;\\n}\",\"keccak256\":\"0x9f92fd6efc02720c267e68ac94d4484420697f8ef44ad4a11a461b6ef8cfde89\",\"license\":\"MIT\"},\"contracts/wnd/world/IWorld.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWorldReadOnly {\\n    // Returns the total number of wizards staked somewhere in the world. Does not include in route wizards.\\n    function totalNumberOfWizards() external view returns(uint256);\\n\\n    // Returns the total number of dragons staked somewhere in the world.\\n    function totalNumberOfDragons() external view returns(uint256);\\n\\n    // Returns the location of the token. If it returns NONEXISTENT, the token is not staked in the world.\\n    function locationOfToken(uint256 _tokenId) external view returns(Location);\\n\\n    // Returns if the token exists in the world. This also means the world contract holds the token.\\n    function isTokenInWorld(uint256 _tokenId) external view returns(bool);\\n\\n    function getStakeableDragonLocations() external view returns(Location[] memory);\\n\\n    function numberOfDragonsStakedAtRank(uint256 _rank) external view returns(uint256);\\n\\n    // Returns the number of dragons that are staked at the given location and rank.\\n    function numberOfDragonsStakedAtLocationAtRank(Location _location, uint256 _rank) external view returns(uint256);\\n\\n    // Returns the number of wizards that are staked at the given location.\\n    function numberOfWizardsStakedAtLocation(Location _location) external view returns(uint256);\\n\\n    // Returns the dragon ID that is at the given location at the given index. Will revert if invalid index.\\n    function dragonAtLocationAtRankAtIndex(Location _location, uint256 _rank, uint256 _index) external view returns(uint256);\\n\\n    // Returns the wizard ID that is at the given location at the given index. Will revert if invalid index.\\n    function wizardAtLocationAtIndex(Location _location, uint256 _index) external view returns(uint256);\\n\\n    // Returns all dragons at the given location for the given owner. Avoid using in a contract-to-contract call.\\n    function getDragonsAtLocationForOwner(Location _location, address _owner) external view returns(uint256[] memory);\\n\\n    // Returns all dragons at the given location for the given owner. Avoid using in a contract-to-contract call.\\n    function getWizardsAtLocationForOwner(Location _location, address _owner) external view returns(uint256[] memory);\\n\\n    // The owner of the given token.\\n    function ownerOfTokenId(uint256 _tokenId) external view returns(address);\\n\\n    // Returns if the passed in address is the owner of the token id.\\n    function isOwnerOfTokenId(uint256 _tokenId, address _owner) external view returns(bool);\\n\\n    // Returns a random dragon owner based on the given seed.\\n    // Dragons that are staked at the given location have an increased odds of being selected.\\n    // If _locationOfEvent is set to NONEXISTENT, all dragons staked in the world will have the same odds.\\n    // If this function returns 0, there was not a random dragon staked.\\n    function getRandomDragonOwner(uint256 _randomSeed, Location _locationOfEvent) external view returns(address);\\n}\\n\\ninterface IWorldEditable {\\n\\n    // Begins staking the given wizard at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function startStakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Finishes the stake for the given wizard ID. Must be called after the random has been seeded.\\n    function finishStakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Unstakes the given wizard from the given location.\\n    // May revert for various reasons.\\n    function startUnstakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Finishes the unstake process for the given wizard id. Must be called after the random has been seeded.\\n    function finishUnstakeWizards(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Stakes the given dragon at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function stakeDragons(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // Unstakes the given dragon at the given location. Must be approved to transfer from their wallet to this contract.\\n    // May revert for various reasons.\\n    function unstakeDragons(uint256[] calldata _tokenIds, Location _location) external;\\n\\n    // When calling, should already have ensured this is a wizard and is not in the world already.\\n    // Transfers the 721 to the world contract.\\n    // Admin only.\\n    function addWizardToWorld(uint256 _tokenId, address _owner, Location _location) external;\\n\\n    // When calling, should already have ensured this is a wizard and is not in the world already.\\n    // Transfers the 721 to the world contract.\\n    // Admin only.\\n    function addDragonToWorld(uint256 _tokenId, address _owner, Location _location) external;\\n\\n    // Game logic should already validate that this is an option.\\n    // Transfers the 721 to the _owner.\\n    // Admin only.\\n    function removeWizardFromWorld(uint256 _tokenId, address _owner) external;\\n\\n    // Game logic should already validate that this is an option.\\n    // Transfers the 721 to the _owner.\\n    // Admin only.\\n    function removeDragonFromWorld(uint256 _tokenId, address _owner) external;\\n\\n    // When calling, game logic should already validate who owns the token, if they have permission, and that\\n    // the destination location makes sense.\\n    // Only callable by admin/owner.\\n    function changeLocationOfWizard(uint256 _tokenId, Location _location) external;\\n\\n    function setStakeableDragonLocations(Location[] calldata _locations) external;\\n}\\n\\ninterface IWorld is IWorldEditable, IWorldReadOnly {\\n\\n}\\n\\nenum Location {\\n    NONEXISTENT,\\n    RIFT,\\n    TRAINING_GROUNDS_ENTERING,\\n    TRAINING_GROUNDS,\\n    TRAINING_GROUNDS_LEAVING\\n}\",\"keccak256\":\"0x12e6461ca64e6f68e85202709870e24156b39e34a1a2d7023883b3de30823e0a\",\"license\":\"MIT\"},\"contracts/wnd/world/World.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./WorldRandomDragon.sol\\\";\\nimport \\\"./WorldRouter.sol\\\";\\n\\ncontract World is Initializable, WorldRandomDragon, WorldRouter {\\n\\n    function initialize() external initializer {\\n        WorldRandomDragon.__WorldRandomDragon_init();\\n        WorldRouter.__WorldRouter_init();\\n    }\\n}\",\"keccak256\":\"0x4c810bd0ef98e02ece00e08152d0133ab1051f2776832d8485f91c770fe0c8d8\",\"license\":\"MIT\"},\"contracts/wnd/world/WorldContracts.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./WorldState.sol\\\";\\nimport \\\"./IWorld.sol\\\";\\nimport \\\"../rift/IRift.sol\\\";\\nimport \\\"../traininggrounds/ITrainingGrounds.sol\\\";\\nimport \\\"../tokens/wnd/IWnD.sol\\\";\\n\\n// Contains the storage for where dragons and wizards are and how many of them there are.\\nabstract contract WorldContracts is Initializable, IWorld, WorldState {\\n\\n    function __WorldContracts_init() internal initializer {\\n        WorldState.__WorldState_init();\\n    }\\n\\n    function setContracts(address _trainingGroundsAddress, address _wndAddress, address _riftAddress) external onlyAdminOrOwner {\\n        require(_trainingGroundsAddress != address(0)\\n            && _riftAddress != address(0)\\n            && _wndAddress != address(0), \\\"Bad addresses\\\");\\n\\n        trainingGrounds = ITrainingGrounds(_trainingGroundsAddress);\\n        wnd = IWnD(_wndAddress);\\n        rift = IRift(_riftAddress);\\n    }\\n\\n    modifier contractsAreSet() {\\n        require(areContractsSet(), \\\"World: Contracts not set\\\");\\n\\n        _;\\n    }\\n\\n    function areContractsSet() public view returns(bool) {\\n        return address(trainingGrounds) != address(0)\\n            && address(rift) != address(0)\\n            && address(wnd) != address(0);\\n    }\\n}\",\"keccak256\":\"0x8aa331c3227171072fc4ed730490f9df47ce629d3044b30c3256d3ec2af49895\",\"license\":\"MIT\"},\"contracts/wnd/world/WorldRandomDragon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./WorldStorage.sol\\\";\\n\\nabstract contract WorldRandomDragon is WorldStorage {\\n\\n    function __WorldRandomDragon_init() internal initializer {\\n        WorldStorage.__WorldStorage_init();\\n    }\\n\\n    function setDragonBonus(uint256 _dragonBonusForSameLocation) external onlyAdminOrOwner {\\n        require(_dragonBonusForSameLocation >= 0 && _dragonBonusForSameLocation <= 100, \\\"Bad dragon bonus\\\");\\n        dragonBonusForSameLocation = _dragonBonusForSameLocation;\\n    }\\n\\n    function getRandomDragonOwner(uint256 _randomSeed, Location _locationOfEvent) external view override returns(address) {\\n        if(totalRankStaked == 0) {\\n            return address(0x0);\\n        }\\n        uint256 bucket = _randomSeed % totalRankStaked; // choose a value from 0 to total rank staked\\n        uint256 cumulative;\\n        _randomSeed >>= 32; // shuffle seed for new random\\n        uint256 rankIndexPicked;\\n        // loop through each bucket of Dragons with the same rank score\\n        for (uint i = 4; i > 0; i--) {\\n            // have to go backwards but can't have i == 0 or it will underflow, so decrement i by 1\\n            uint256 idx = i - 1;\\n            cumulative += numberOfDragonsStakedAtRank(idx) * rankToPoints[idx];\\n            // if the value is not inside of that bucket, keep going\\n            if (bucket >= cumulative) {\\n                continue;\\n            }\\n            rankIndexPicked = idx;\\n            break;\\n        }\\n        if(rankIndexPicked == 0) {\\n            return address(0);\\n        }\\n        // Guaranteed to have a dragon in at least 1 location because we found a rank above.\\n\\n        uint256 _dragonsAtTG = numberOfDragonsStakedAtLocationAtRank(Location.TRAINING_GROUNDS, rankIndexPicked);\\n        uint256 _dragonsAtRift = numberOfDragonsStakedAtLocationAtRank(Location.RIFT, rankIndexPicked);\\n\\n        // Assign bonus allocation points to dragons staked in the event's location. This allows for these dragons to have a higher chance of being selected over dragons NOT in this area.\\n        // We will use the same logic as above, cumulative point selection to determine the bucket to choose from.\\n\\n        // Math is not at risk of overflowing because there are only 4000 dragons and the allocation points are small.\\n        uint256 _rangePerTGDragon = (100 + (_locationOfEvent == Location.TRAINING_GROUNDS ? dragonBonusForSameLocation : 0));\\n        uint256 _dragonsAtTGRange = _dragonsAtTG * _rangePerTGDragon;\\n\\n        uint256 _rangePerRiftDragon = (100 + (_locationOfEvent == Location.RIFT ? dragonBonusForSameLocation : 0));\\n        uint256 _dragonsAtRiftRange = _dragonsAtRift * _rangePerRiftDragon;\\n\\n        uint256 _totalRange = _dragonsAtTGRange + _dragonsAtRiftRange;\\n\\n        uint256 _numberInRange = _randomSeed % _totalRange;\\n\\n        uint256 _chosenDragonId;\\n        if(_numberInRange < _dragonsAtTGRange) {\\n            // One of the TG dragons got it. Use integer division to figure out WHICH dragon got it.\\n            uint256 _indexOfChosenDragon = _numberInRange / _rangePerTGDragon;\\n            _chosenDragonId = dragonAtLocationAtRankAtIndex(Location.TRAINING_GROUNDS, rankIndexPicked, _indexOfChosenDragon);\\n        } else if(_numberInRange < _dragonsAtTGRange + _dragonsAtRiftRange) {\\n            uint256 _indexOfChosenDragon = (_numberInRange - _dragonsAtTGRange) / _rangePerRiftDragon;\\n            _chosenDragonId = dragonAtLocationAtRankAtIndex(Location.RIFT, rankIndexPicked, _indexOfChosenDragon);\\n        } else {\\n            revert(\\\"Not possible currently.\\\");\\n        }\\n\\n        return ownerOfTokenId(_chosenDragonId);\\n    }\\n}\",\"keccak256\":\"0x29e5c014256055a3557e6a5686b6e62e8e488c4bbbf449742a77ab0cc2ad3e41\",\"license\":\"MIT\"},\"contracts/wnd/world/WorldRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./WorldStorage.sol\\\";\\n\\nabstract contract WorldRouter is WorldStorage {\\n\\n    function __WorldRouter_init() internal initializer {\\n        WorldStorage.__WorldStorage_init();\\n    }\\n\\n    function startStakeWizards(uint256[] calldata _tokenIds, Location _location) external override contractsAreSet whenNotPaused {\\n        require(_isValidWizardLocation(_location), \\\"Invalid wizard location\\\");\\n        require(_tokenIds.length > 0, \\\"no token ids specified\\\");\\n\\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n\\n            require(!isTokenInWorld(_tokenId), \\\"Token already in world\\\");\\n            require(wnd.isWizard(_tokenId), \\\"Token is not wizard\\\");\\n\\n            address _tokenOwner = wnd.ownerOf(_tokenId);\\n            require(_tokenOwner == msg.sender || isAdmin(msg.sender), \\\"Invalid permission\\\");\\n\\n            _getWizardStakableForLocation(_location).startStake(_tokenId, _tokenOwner);\\n        }\\n    }\\n\\n    function finishStakeWizards(uint256[] calldata _tokenIds, Location _location) external override contractsAreSet whenNotPaused {\\n        require(_isValidWizardLocation(_location), \\\"Invalid location\\\");\\n        require(_tokenIds.length > 0, \\\"no token ids specified\\\");\\n\\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n\\n            require(locationOfToken(_tokenId) == _getStartStakeLocation(_location), \\\"Bad location\\\");\\n            require(isOwnerOfTokenId(_tokenId, msg.sender) || isAdmin(msg.sender), \\\"Invalid permission\\\");\\n\\n            _getWizardStakableForLocation(_location).finishStake(_tokenId);\\n        }\\n    }\\n\\n    function startUnstakeWizards(uint256[] calldata _tokenIds, Location _location) external override contractsAreSet whenNotPaused {\\n        require(_isValidWizardLocation(_location), \\\"Invalid wizard location\\\");\\n        require(_tokenIds.length > 0, \\\"no token ids specified\\\");\\n\\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n\\n            require(locationOfToken(_tokenId) == _location, \\\"Invalid wizard location\\\");\\n            require(isOwnerOfTokenId(_tokenId, msg.sender) || isAdmin(msg.sender), \\\"Invalid permission\\\");\\n\\n            _getWizardStakableForLocation(_location).startUnstake(_tokenId);\\n        }\\n    }\\n\\n    function finishUnstakeWizards(uint256[] calldata _tokenIds, Location _location) external override contractsAreSet whenNotPaused {\\n        require(_isValidWizardLocation(_location), \\\"Invalid location\\\");\\n        require(_tokenIds.length > 0, \\\"no token ids specified\\\");\\n\\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n            require(locationOfToken(_tokenId) == _getStartUnstakeLocation(_location), \\\"Bad location\\\");\\n            require(isOwnerOfTokenId(_tokenId, msg.sender) || isAdmin(msg.sender), \\\"Invalid permission\\\");\\n\\n            _getWizardStakableForLocation(_location).finishUnstake(_tokenId);\\n        }\\n    }\\n\\n    function stakeDragons(uint256[] calldata _tokenIds, Location _location) external override contractsAreSet whenNotPaused {\\n        require(_isValidDragonLocation(_location), \\\"Invalid location\\\");\\n        require(_tokenIds.length > 0, \\\"no token ids specified\\\");\\n\\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n\\n            require(!wnd.isWizard(_tokenId), \\\"Token is not dragon\\\");\\n\\n            address _tokenOwner;\\n\\n            if(isTokenInWorld(_tokenId)) {\\n                // Call unstake event but don't transfer NFT to owner's wallet because it \\n                // will be staked in new location\\n                _getDragonStakableForLocation(locationOfToken(_tokenId)).unstake(_tokenId, false);\\n                _tokenOwner = ownerOfTokenId(_tokenId);\\n            }\\n            else {\\n                _tokenOwner = wnd.ownerOf(_tokenId);\\n            }\\n\\n            require(_tokenOwner == msg.sender || isAdmin(msg.sender), \\\"Not owner or admin\\\");\\n\\n            _getDragonStakableForLocation(_location).stake(_tokenId, _tokenOwner);\\n        }\\n    }\\n\\n    function unstakeDragons(uint256[] calldata _tokenIds, Location _location) external override contractsAreSet whenNotPaused {\\n        require(_isValidDragonLocation(_location), \\\"Invalid location\\\");\\n        require(_tokenIds.length > 0, \\\"no token ids specified\\\");\\n\\n        for(uint256 i = 0; i < _tokenIds.length; i++) {\\n            uint256 _tokenId = _tokenIds[i];\\n\\n            require(locationOfToken(_tokenId) == _location, \\\"Bad location\\\");\\n            require(isOwnerOfTokenId(_tokenId, msg.sender) || isAdmin(msg.sender), \\\"Invalid permission\\\");\\n\\n            _getDragonStakableForLocation(_location).unstake(_tokenId, true);\\n        }\\n    }\\n\\n    function _isValidWizardLocation(Location _location) private pure returns(bool) {\\n        return _location == Location.TRAINING_GROUNDS;\\n    }\\n\\n    function _isValidDragonLocation(Location _location) private pure returns(bool) {\\n        return _location == Location.TRAINING_GROUNDS || _location == Location.RIFT;\\n    }\\n\\n    function _getStartStakeLocation(Location _location) private pure returns(Location) {\\n        if(_location == Location.TRAINING_GROUNDS) {\\n            return Location.TRAINING_GROUNDS_ENTERING;\\n        } else {\\n            revert(\\\"Bad location\\\");\\n        }\\n    }\\n\\n    function _getStartUnstakeLocation(Location _location) private pure returns(Location) {\\n        if(_location == Location.TRAINING_GROUNDS) {\\n            return Location.TRAINING_GROUNDS_LEAVING;\\n        } else {\\n            revert(\\\"Bad location\\\");\\n        }\\n    }\\n\\n    function _getWizardStakableForLocation(Location _location) private view returns(IWizardStakable) {\\n        if(_location == Location.TRAINING_GROUNDS_ENTERING || _location == Location.TRAINING_GROUNDS_LEAVING || _location == Location.TRAINING_GROUNDS) {\\n            return trainingGrounds;\\n        } else {\\n            revert(\\\"Unable to find stakable\\\");\\n        }\\n    }\\n\\n    function _getDragonStakableForLocation(Location _location) private view returns(IDragonStakable) {\\n        if(_location == Location.TRAINING_GROUNDS) {\\n            return trainingGrounds;\\n        } else if(_location == Location.RIFT) {\\n            return rift;\\n        } else {\\n            revert(\\\"Unable to find stkable\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x7e11586bb86362d5a9fa9a3172ff834b8f6f9ad04e09efc49e06df21c925f377\",\"license\":\"MIT\"},\"contracts/wnd/world/WorldState.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\n\\nimport \\\"../../shared/AdminableUpgradeable.sol\\\";\\nimport \\\"../tokens/wnd/IWnD.sol\\\";\\nimport \\\"../world/IWorld.sol\\\";\\nimport \\\"../rift/IRift.sol\\\";\\nimport \\\"../traininggrounds/ITrainingGrounds.sol\\\";\\nimport \\\"../trainingproficiency/ITrainingProficiency.sol\\\";\\nimport \\\"../../shared/randomizercl/IRandomizerCL.sol\\\";\\n\\ncontract WorldState is Initializable, ERC721HolderUpgradeable, AdminableUpgradeable {\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    EnumerableSetUpgradeable.UintSet internal dragonIdSet;\\n    EnumerableSetUpgradeable.UintSet internal wizardIdSet;\\n    mapping(uint256 => Location) internal tokenIdToLocation;\\n    mapping(uint256 => address) internal tokenIdToOwner;\\n    // Location enum -> rank -> id set\\n    mapping(Location => mapping(uint256 => EnumerableSetUpgradeable.UintSet)) internal locationToRankToDragonIdSet;\\n    mapping(Location => EnumerableSetUpgradeable.UintSet) internal locationToWizardIdSet;\\n    uint256 internal totalRankStaked;\\n    Location[] internal stakeableDragonLocations;\\n    // rank -> number of points to add the the total staked values for picking random dragons with.\\n    // This is needed to ensure a fair probability of selection is achieved per rank correlating with its rareness.\\n    mapping(uint256 => uint256) internal rankToPoints;\\n\\n    ITrainingGrounds public trainingGrounds;\\n    IWnD public wnd;\\n    IRift public rift;\\n\\n    // A number from 0-100 which is the bonus dragons staked at a given location receive.\\n    uint256 public dragonBonusForSameLocation;\\n\\n    function __WorldState_init() internal initializer {\\n        AdminableUpgradeable.__Adminable_init();\\n        ERC721HolderUpgradeable.__ERC721Holder_init();\\n\\n        dragonBonusForSameLocation = 15;\\n        stakeableDragonLocations = [Location.RIFT, Location.TRAINING_GROUNDS];\\n        rankToPoints[5] = 4;\\n        rankToPoints[6] = 7;\\n        rankToPoints[7] = 11;\\n        rankToPoints[8] = 20;\\n    }\\n}\",\"keccak256\":\"0x6750d47f36b0e42719ab60ccc5b4c4f28df02189fcf79692389b7278cf9ba442\",\"license\":\"MIT\"},\"contracts/wnd/world/WorldStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\\\";\\n\\nimport \\\"./WorldContracts.sol\\\";\\n\\n// Contains the storage for where dragons and wizards are and how many of them there are.\\nabstract contract WorldStorage is Initializable, WorldContracts {\\n\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.UintSet;\\n\\n    function __WorldStorage_init() internal initializer {\\n        WorldContracts.__WorldContracts_init();\\n    }\\n\\n    function addWizardToWorld(uint256 _tokenId, address _owner, Location _location) external override onlyAdminOrOwner contractsAreSet {\\n        wizardIdSet.add(_tokenId);\\n        tokenIdToLocation[_tokenId] = _location;\\n        locationToWizardIdSet[_location].add(_tokenId);\\n        tokenIdToOwner[_tokenId] = _owner;\\n\\n        wnd.adminTransferFrom(_owner, address(this), _tokenId);\\n    }\\n\\n    function addDragonToWorld(uint256 _tokenId, address _owner, Location _location) external override onlyAdminOrOwner contractsAreSet {\\n        WizardDragon memory s = wnd.getTokenTraits(_tokenId);\\n        require(!s.isWizard, \\\"Token not a dragon\\\");\\n        if(isTokenInWorld(_tokenId)) {\\n            require(tokenIdToOwner[_tokenId] == _owner, \\\"Owner mismatch moving dragon\\\");\\n            Location _oldLocation = tokenIdToLocation[_tokenId];\\n            //Remove from old location so it can be added to new location\\n            locationToRankToDragonIdSet[_oldLocation][s.rankIndex].remove(_tokenId);\\n        }\\n        locationToRankToDragonIdSet[_location][s.rankIndex].add(_tokenId);\\n        tokenIdToLocation[_tokenId] = _location;\\n        if(!isTokenInWorld(_tokenId)) {\\n            tokenIdToOwner[_tokenId] = _owner;\\n            totalRankStaked += rankToPoints[s.rankIndex];\\n            dragonIdSet.add(_tokenId);\\n            wnd.adminTransferFrom(_owner, address(this), _tokenId);\\n        }\\n    }\\n\\n    function removeWizardFromWorld(uint256 _tokenId, address _owner) external override onlyAdminOrOwner contractsAreSet {\\n        wizardIdSet.remove(_tokenId);\\n        Location _oldLocation = tokenIdToLocation[_tokenId];\\n        delete tokenIdToLocation[_tokenId];\\n        locationToWizardIdSet[_oldLocation].remove(_tokenId);\\n        delete tokenIdToOwner[_tokenId];\\n\\n        wnd.adminTransferFrom(address(this), _owner, _tokenId);\\n    }\\n\\n    function removeDragonFromWorld(uint256 _tokenId, address _owner) external override onlyAdminOrOwner contractsAreSet {\\n        WizardDragon memory s = wnd.getTokenTraits(_tokenId);\\n        require(!s.isWizard, \\\"Token not a dragon\\\");\\n        totalRankStaked -= rankToPoints[s.rankIndex];\\n        dragonIdSet.remove(_tokenId);\\n        Location _oldLocation = tokenIdToLocation[_tokenId];\\n        delete tokenIdToLocation[_tokenId];\\n        locationToRankToDragonIdSet[_oldLocation][s.rankIndex].remove(_tokenId);\\n        delete tokenIdToOwner[_tokenId];\\n\\n        wnd.adminTransferFrom(address(this), _owner, _tokenId);\\n    }\\n\\n    function changeLocationOfWizard(uint256 _tokenId, Location _location) external override onlyAdminOrOwner {\\n        require(wizardIdSet.contains(_tokenId), \\\"Wizard not in world\\\");\\n        Location _currentLocation = tokenIdToLocation[_tokenId];\\n        if(_currentLocation == _location) {\\n            return;\\n        }\\n\\n        locationToWizardIdSet[_currentLocation].remove(_tokenId);\\n        locationToWizardIdSet[_location].add(_tokenId);\\n        tokenIdToLocation[_tokenId] = _location;\\n    }\\n\\n    function totalNumberOfWizards() external view override returns(uint256) {\\n        return wizardIdSet.length();\\n    }\\n\\n    function totalNumberOfDragons() public view override returns(uint256) {\\n        return dragonIdSet.length();\\n    }\\n\\n    function locationOfToken(uint256 _tokenId) public view override returns(Location) {\\n        return tokenIdToLocation[_tokenId];\\n    }\\n\\n    function setStakeableDragonLocations(Location[] calldata _locations) public override {\\n        stakeableDragonLocations = _locations;\\n    }\\n\\n    function getStakeableDragonLocations() public view override returns(Location[] memory) {\\n        return stakeableDragonLocations;\\n    }\\n\\n    function numberOfDragonsStakedAtRank(uint256 _rankIndex) public view override returns(uint256 numStaked) {\\n        for (uint256 i = 0; i < stakeableDragonLocations.length; i++) {\\n            numStaked += locationToRankToDragonIdSet[stakeableDragonLocations[i]][_rankIndex].length();\\n        }\\n    }\\n\\n    function numberOfDragonsStakedAtLocationAtRank(Location _location, uint256 _rankIndex) public view override returns(uint256) {\\n        return locationToRankToDragonIdSet[_location][_rankIndex].length();\\n    }\\n\\n    function numberOfWizardsStakedAtLocation(Location _location) public view override returns(uint256) {\\n        return locationToWizardIdSet[_location].length();\\n    }\\n\\n    function dragonAtLocationAtRankAtIndex(Location _location, uint256 _rankIndex, uint256 _index) public view override returns(uint256) {\\n        return locationToRankToDragonIdSet[_location][_rankIndex].at(_index);\\n    }\\n\\n    // Do not call via another contract. Should be strictly UI, as this is a gassy operation.\\n    function getDragonsAtLocationForOwner(Location _location, address _owner) external view override returns(uint256[] memory){\\n        uint256 totalCount = totalNumberOfDragons();\\n        uint256 count;\\n        for (uint256 i = 0; i < totalCount; i++) {\\n            uint256 _tokenId = dragonIdSet.at(i);\\n            if(isOwnerOfTokenId(_tokenId, _owner) && locationOfToken(_tokenId) == _location){\\n                count++;\\n            }\\n        }\\n\\n        uint256[] memory tokenIds = new uint256[](count);\\n        uint256 temp = 0;\\n        for (uint256 i = 0; i < totalCount; i++) {\\n            uint256 _tokenId = dragonIdSet.at(i);\\n            if(isOwnerOfTokenId(_tokenId, _owner) && locationOfToken(_tokenId) == _location){\\n                tokenIds[temp] = _tokenId;\\n                temp++;\\n            }\\n        }\\n        return tokenIds;\\n    }\\n\\n    // Do not call via another contract. Should be strictly UI, as this is a gassy operation.\\n    function getWizardsAtLocationForOwner(Location _location, address _owner) external view override returns(uint256[] memory){\\n        uint256 totalCount = numberOfWizardsStakedAtLocation(_location);\\n        uint256 count;\\n        for (uint256 i = 0; i < totalCount; i++) {\\n            uint256 _tokenId = wizardAtLocationAtIndex(_location, i);\\n            if(isOwnerOfTokenId(_tokenId, _owner)){\\n                count++;\\n            }\\n        }\\n\\n        uint256[] memory tokenIds = new uint256[](count);\\n        uint256 temp = 0;\\n        for (uint256 i = 0; i < totalCount; i++) {\\n            uint256 _tokenId = wizardAtLocationAtIndex(_location, i);\\n            if(isOwnerOfTokenId(_tokenId, _owner)){\\n                tokenIds[temp] = _tokenId;\\n                temp++;\\n            }\\n        }\\n        return tokenIds;\\n    }\\n\\n    function wizardAtLocationAtIndex(Location _location, uint256 _index) public view override returns(uint256) {\\n        return locationToWizardIdSet[_location].at(_index);\\n    }\\n\\n    function ownerOfTokenId(uint256 _tokenId) public view override returns(address) {\\n        return tokenIdToOwner[_tokenId];\\n    }\\n\\n    function isOwnerOfTokenId(uint256 _tokenId, address _owner) public view override returns(bool) {\\n        return ownerOfTokenId(_tokenId) == _owner;\\n    }\\n\\n    function isTokenInWorld(uint256 _tokenId) public view override returns(bool) {\\n        return tokenIdToOwner[_tokenId] != address(0);\\n    }\\n\\n    /** This function is only here in case it is required to tweak the rankToPoints mapping for probability distribution on random dragon selection.\\n      * In the most perfect of worlds, this will never be called. If it does, it assumes that the _rankStaked parameter is calculated by new rankToPoints mappings for each dragon staked. */\\n    function setTotalRankStaked(uint256 _rankStaked) external onlyAdminOrOwner {\\n        totalRankStaked = _rankStaked;\\n    }\\n\\n    function getTotalRankStaked() external view returns(uint256) {\\n        return totalRankStaked;\\n    }\\n\\n    /** This function is only here in case it is required to tweak the rankToPoints mapping for probability distribution on random dragon selection.\\n      * In the most perfect of worlds, this will never be called. If it does, it assumes that the _rankStaked parameter is calculated by new rankToPoints mappings for each dragon staked. */\\n    function setTotalRankStakedCalculated() external onlyAdminOrOwner {\\n        uint256 r5index = 3;\\n        uint256 r6index = 2;\\n        uint256 r7index = 1;\\n        uint256 r8index = 0;\\n\\n        uint256 _rankStaked;\\n        _rankStaked += numberOfDragonsStakedAtRank(r5index) * rankToPoints[r5index];\\n        _rankStaked += numberOfDragonsStakedAtRank(r6index) * rankToPoints[r6index];\\n        _rankStaked += numberOfDragonsStakedAtRank(r7index) * rankToPoints[r7index];\\n        _rankStaked += numberOfDragonsStakedAtRank(r8index) * rankToPoints[r8index];\\n        totalRankStaked = _rankStaked;\\n    }\\n\\n    function setRankToPoints(uint256[] calldata _ranks, uint256[] calldata _points) external onlyAdminOrOwner {\\n        require(_ranks.length == _points.length, \\\"invalid input\\\");\\n        for (uint256 i = 0; i < _ranks.length; i++) {\\n            uint256 _rank = _ranks[i];\\n            for (uint256 j = 0; j < _points.length; j++) {\\n                rankToPoints[_rank] = _points[j];\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x391e3da967badd69200cb10f37457e2e1fcd79691f90a0fd1ff05c752efe0728\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061420e806100206000396000f3fe608060405234801561001057600080fd5b50600436106102d65760003560e01c806385664e8011610182578063a4bd4390116100e9578063bedb86fb116100a2578063d826cbe11161007c578063d826cbe11461068d578063e7399777146106a0578063f2fde38b146106b3578063ff5cbc74146106c657600080fd5b8063bedb86fb1461065e578063cd2b9a9514610671578063d099df0b1461067a57600080fd5b8063a4bd4390146105cc578063a6444c2f146105df578063b3066d49146105f2578063b428181e14610605578063b610d06914610636578063ba1fe7bb1461064b57600080fd5b80639679b3b51161013b5780639679b3b51461055a5780639a9917151461056d5780639c4b8510146105805780639c54df64146105935780639d425a17146105a65780639e3b8fe3146105b957600080fd5b806385664e801461050b57806386a497871461051e57806386e556a9146105265780638b81826d1461052e5780638cdcc4b4146105415780638da5cb5b1461054957600080fd5b8063377e11e011610241578063715018a6116101fa5780637e9a0c18116101d45780637e9a0c18146104c957806380a59707146104dc5780638129fc1c146104f05780638481cc88146104f857600080fd5b8063715018a61461049b57806375a1285c146104a357806379e6597b146104b657600080fd5b8063377e11e01461042d57806352fb5e24146104405780635392f1c0146104605780635c975abb1461046a578063704802751461047557806370fb4a271461048857600080fd5b80631d2b3063116102935780631d2b3063146103a857806322b5cfee146103bb57806324d7806c146103ce57806329dc5210146103f157806329e02b05146104125780633411d6db1461042557600080fd5b806303dee4a2146102db578063078e8be7146102f057806312e8ac0614610321578063150b7a021461034b5780631785f53c1461038257806318afa9f414610395575b600080fd5b6102ee6102e9366004613828565b6106da565b005b61010754610304906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61030461032f366004613858565b600090815261010160205260409020546001600160a01b031690565b6103696103593660046138e2565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610318565b6102ee6103903660046139a6565b610956565b6102ee6103a3366004613a1e565b6109a1565b6102ee6103b6366004613858565b610d2e565b6102ee6103c9366004613a72565b610db5565b6103e16103dc3660046139a6565b610dc7565b6040519015158152602001610318565b6104046103ff366004613ab4565b610de5565b604051908152602001610318565b610404610420366004613ae7565b610e48565b610404610e8e565b6102ee61043b366004613a72565b610e9f565b61045361044e366004613b02565b610f3b565b6040516103189190613b2e565b61040461010a5481565b60975460ff166103e1565b6102ee6104833660046139a6565b611050565b6102ee610496366004613858565b61109e565b6102ee6110e1565b6102ee6104b1366004613828565b611117565b6104536104c4366004613b02565b611275565b6102ee6104d7366004613a1e565b6113fd565b61010854610304906001600160a01b031681565b6102ee6115b2565b6102ee610506366004613a1e565b611634565b610404610519366004613858565b61192f565b6102ee6119e4565b610404611b10565b61040461053c366004613b66565b611b1c565b6103e1611b74565b6065546001600160a01b0316610304565b6102ee610568366004613a1e565b611bb7565b6102ee61057b366004613b90565b611d70565b6102ee61058e366004613bbc565b611ed7565b6102ee6105a1366004613a72565b611feb565b6103e16105b4366004613828565b612087565b6102ee6105c7366004613a1e565b6120a9565b6102ee6105da366004613a1e565b612266565b6103046105ed366004613b90565b612423565b6102ee610600366004613bf1565b612669565b610629610613366004613858565b6000908152610100602052604090205460ff1690565b6040516103189190613c74565b61063e612758565b6040516103189190613c82565b6103e1610659366004613858565b6127e1565b6102ee61066c366004613ccf565b6127ff565b61010454610404565b610404610688366004613b66565b612852565b6102ee61069b366004613bbc565b61289c565b6102ee6106ae366004613cec565b612ba8565b6102ee6106c13660046139a6565b612cb4565b61010954610304906001600160a01b031681565b33600090815260c9602052604090205460ff16806106fb57506106fb612d4c565b6107205760405162461bcd60e51b815260040161071790613d58565b60405180910390fd5b610728611b74565b6107445760405162461bcd60e51b815260040161071790613d84565b610108546040516394e5684760e01b8152600481018490526000916001600160a01b0316906394e56847906024016101406040518083038186803b15801561078b57600080fd5b505afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190613dd7565b80519091501561080a5760405162461bcd60e51b81526020600482015260126024820152712a37b5b2b7103737ba103090323930b3b7b760711b6044820152606401610717565b610106600082610120015160ff1681526020019081526020016000205461010460008282546108399190613eb5565b9091555061084a905060fc84612d70565b50600083815261010060205260408120805460ff19811690915560ff16906108ca9085906101029084600481111561088457610884613c3c565b600481111561089557610895613c3c565b8152602001908152602001600020600085610120015160ff168152602001908152602001600020612d7090919063ffffffff16565b50600084815261010160205260409081902080546001600160a01b031916905561010854905163b1197a3760e01b81526001600160a01b039091169063b1197a379061091e90309087908990600401613ecc565b600060405180830381600087803b15801561093857600080fd5b505af115801561094c573d6000803e3d6000fd5b5050505050505050565b6065546001600160a01b031633146109805760405162461bcd60e51b815260040161071790613ef0565b6001600160a01b0316600090815260c960205260409020805460ff19169055565b6109a9611b74565b6109c55760405162461bcd60e51b815260040161071790613d84565b60975460ff16156109e85760405162461bcd60e51b815260040161071790613f25565b6109f181612d7c565b610a0d5760405162461bcd60e51b815260040161071790613f4f565b81610a2a5760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d28576000848483818110610a4957610a49613fa9565b61010854604051600162ac0b8d60e01b0319815260209290920293909301356004820181905293506001600160a01b039092169163ff53f473915060240160206040518083038186803b158015610a9f57600080fd5b505afa158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190613fbf565b15610b1a5760405162461bcd60e51b81526020600482015260136024820152722a37b5b2b71034b9903737ba10323930b3b7b760691b6044820152606401610717565b6000610b25826127e1565b15610bca5760008281526101006020526040902054610b469060ff16612db5565b6040516327afaa2360e21b815260048101849052600060248201526001600160a01b039190911690639ebea88c90604401600060405180830381600087803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b505050600083815261010160205260409020546001600160a01b031690509050610c4a565b610108546040516331a9108f60e11b8152600481018490526001600160a01b0390911690636352211e9060240160206040518083038186803b158015610c0f57600080fd5b505afa158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c479190613fdc565b90505b6001600160a01b038116331480610c655750610c6533610dc7565b610ca65760405162461bcd60e51b81526020600482015260126024820152712737ba1037bbb732b91037b91030b236b4b760711b6044820152606401610717565b610caf84612db5565b604051637acb775760e01b8152600481018490526001600160a01b0383811660248301529190911690637acb775790604401600060405180830381600087803b158015610cfb57600080fd5b505af1158015610d0f573d6000803e3d6000fd5b5050505050508080610d2090613ff9565b915050610a2d565b50505050565b33600090815260c9602052604090205460ff1680610d4f5750610d4f612d4c565b610d6b5760405162461bcd60e51b815260040161071790613d58565b6064811115610daf5760405162461bcd60e51b815260206004820152601060248201526f42616420647261676f6e20626f6e757360801b6044820152606401610717565b61010a55565b610dc261010583836136c5565b505050565b6001600160a01b0316600090815260c9602052604090205460ff1690565b6000610e40826101026000876004811115610e0257610e02613c3c565b6004811115610e1357610e13613c3c565b81526020019081526020016000206000868152602001908152602001600020612e5590919063ffffffff16565b949350505050565b6000610e886101036000846004811115610e6457610e64613c3c565b6004811115610e7557610e75613c3c565b8152602001908152602001600020612e61565b92915050565b6000610e9a60fe612e61565b905090565b6065546001600160a01b03163314610ec95760405162461bcd60e51b815260040161071790613ef0565b60005b81811015610dc257600060c96000858585818110610eec57610eec613fa9565b9050602002016020810190610f0191906139a6565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610f3381613ff9565b915050610ecc565b60606000610f4884610e48565b90506000805b82811015610f94576000610f628783612852565b9050610f6e8187612087565b15610f815782610f7d81613ff9565b9350505b5080610f8c81613ff9565b915050610f4e565b5060008167ffffffffffffffff811115610fb057610fb0613871565b604051908082528060200260200182016040528015610fd9578160200160208202803683370190505b5090506000805b84811015611044576000610ff48983612852565b90506110008189612087565b15611031578084848151811061101857611018613fa9565b60209081029190910101528261102d81613ff9565b9350505b508061103c81613ff9565b915050610fe0565b50909695505050505050565b6065546001600160a01b0316331461107a5760405162461bcd60e51b815260040161071790613ef0565b6001600160a01b0316600090815260c960205260409020805460ff19166001179055565b33600090815260c9602052604090205460ff16806110bf57506110bf612d4c565b6110db5760405162461bcd60e51b815260040161071790613d58565b61010455565b6065546001600160a01b0316331461110b5760405162461bcd60e51b815260040161071790613ef0565b6111156000612e6b565b565b33600090815260c9602052604090205460ff16806111385750611138612d4c565b6111545760405162461bcd60e51b815260040161071790613d58565b61115c611b74565b6111785760405162461bcd60e51b815260040161071790613d84565b61118360fe83612d70565b50600082815261010060205260408120805460ff19811690915560ff16906111ea908490610103908460048111156111bd576111bd613c3c565b60048111156111ce576111ce613c3c565b8152602001908152602001600020612d7090919063ffffffff16565b50600083815261010160205260409081902080546001600160a01b031916905561010854905163b1197a3760e01b81526001600160a01b039091169063b1197a379061123e90309086908890600401613ecc565b600060405180830381600087803b15801561125857600080fd5b505af115801561126c573d6000803e3d6000fd5b50505050505050565b60606000611281611b10565b90506000805b8281101561130d57600061129c60fc83612e55565b90506112a88187612087565b80156112e757508660048111156112c1576112c1613c3c565b6000828152610100602052604090205460ff1660048111156112e5576112e5613c3c565b145b156112fa57826112f681613ff9565b9350505b508061130581613ff9565b915050611287565b5060008167ffffffffffffffff81111561132957611329613871565b604051908082528060200260200182016040528015611352578160200160208202803683370190505b5090506000805b8481101561104457600061136e60fc83612e55565b905061137a8189612087565b80156113b9575088600481111561139357611393613c3c565b6000828152610100602052604090205460ff1660048111156113b7576113b7613c3c565b145b156113ea57808484815181106113d1576113d1613fa9565b6020908102919091010152826113e681613ff9565b9350505b50806113f581613ff9565b915050611359565b611405611b74565b6114215760405162461bcd60e51b815260040161071790613d84565b60975460ff16156114445760405162461bcd60e51b815260040161071790613f25565b61144d81612ebd565b6114695760405162461bcd60e51b815260040161071790614014565b816114865760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d285760008484838181106114a5576114a5613fa9565b9050602002013590508260048111156114c0576114c0613c3c565b6000828152610100602052604090205460ff1660048111156114e4576114e4613c3c565b146115015760405162461bcd60e51b815260040161071790614014565b61150b8133612087565b8061151a575061151a33610dc7565b6115365760405162461bcd60e51b81526004016107179061404b565b61153f83612ec6565b6001600160a01b03166334dfb268826040518263ffffffff1660e01b815260040161156c91815260200190565b600060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b505050505080806115aa90613ff9565b915050611489565b600054610100900460ff166115cd5760005460ff16156115d1565b303b155b6115ed5760405162461bcd60e51b815260040161071790614077565b600054610100900460ff1615801561160f576000805461ffff19166101011790555b611617612f74565b61161f612f74565b8015611631576000805461ff00191690555b50565b61163c611b74565b6116585760405162461bcd60e51b815260040161071790613d84565b60975460ff161561167b5760405162461bcd60e51b815260040161071790613f25565b61168481612ebd565b6116a05760405162461bcd60e51b815260040161071790614014565b816116bd5760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d285760008484838181106116dc576116dc613fa9565b9050602002013590506116ee816127e1565b156117345760405162461bcd60e51b8152602060048201526016602482015275151bdad95b88185b1c9958591e481a5b881ddbdc9b1960521b6044820152606401610717565b61010854604051600162ac0b8d60e01b03198152600481018390526001600160a01b039091169063ff53f4739060240160206040518083038186803b15801561177c57600080fd5b505afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190613fbf565b6117f65760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881a5cc81b9bdd081dda5e985c99606a1b6044820152606401610717565b610108546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e9060240160206040518083038186803b15801561183c57600080fd5b505afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190613fdc565b90506001600160a01b038116331480611891575061189133610dc7565b6118ad5760405162461bcd60e51b81526004016107179061404b565b6118b684612ec6565b604051638a61b02760e01b8152600481018490526001600160a01b0383811660248301529190911690638a61b02790604401600060405180830381600087803b15801561190257600080fd5b505af1158015611916573d6000803e3d6000fd5b505050505050808061192790613ff9565b9150506116c0565b6000805b610105548110156119de576119c06101026000610105848154811061195a5761195a613fa9565b90600052602060002090602091828204019190069054906101000a900460ff16600481111561198b5761198b613c3c565b600481111561199c5761199c613c3c565b81526020019081526020016000206000858152602001908152602001600020612e61565b6119ca90836140c5565b9150806119d681613ff9565b915050611933565b50919050565b33600090815260c9602052604090205460ff1680611a055750611a05612d4c565b611a215760405162461bcd60e51b815260040161071790613d58565b600360008181526101066020527f02029c55f9e39d554ef1956e7f946f5d20dd840a58a3da90e1a05d1aba8b2deb546002916001918190611a618661192f565b611a6b91906140dd565b611a7590826140c5565b60008581526101066020526040902054909150611a918561192f565b611a9b91906140dd565b611aa590826140c5565b60008481526101066020526040902054909150611ac18461192f565b611acb91906140dd565b611ad590826140c5565b60008381526101066020526040902054909150611af18361192f565b611afb91906140dd565b611b0590826140c5565b610104555050505050565b6000610e9a60fc612e61565b6000611b6d6101026000856004811115611b3857611b38613c3c565b6004811115611b4957611b49613c3c565b81526020019081526020016000206000848152602001908152602001600020612e61565b9392505050565b610107546000906001600160a01b031615801590611b9d5750610109546001600160a01b031615155b8015610e9a575050610108546001600160a01b0316151590565b611bbf611b74565b611bdb5760405162461bcd60e51b815260040161071790613d84565b60975460ff1615611bfe5760405162461bcd60e51b815260040161071790613f25565b611c0781612d7c565b611c235760405162461bcd60e51b815260040161071790613f4f565b81611c405760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d28576000848483818110611c5f57611c5f613fa9565b905060200201359050826004811115611c7a57611c7a613c3c565b6000828152610100602052604090205460ff166004811115611c9e57611c9e613c3c565b14611cbb5760405162461bcd60e51b8152600401610717906140fc565b611cc58133612087565b80611cd45750611cd433610dc7565b611cf05760405162461bcd60e51b81526004016107179061404b565b611cf983612db5565b6040516327afaa2360e21b815260048101839052600160248201526001600160a01b039190911690639ebea88c90604401600060405180830381600087803b158015611d4457600080fd5b505af1158015611d58573d6000803e3d6000fd5b50505050508080611d6890613ff9565b915050611c43565b33600090815260c9602052604090205460ff1680611d915750611d91612d4c565b611dad5760405162461bcd60e51b815260040161071790613d58565b611db860fe83612fd9565b611dfa5760405162461bcd60e51b815260206004820152601360248201527215da5e985c99081b9bdd081a5b881ddbdc9b19606a1b6044820152606401610717565b6000828152610100602052604090205460ff16816004811115611e1f57611e1f613c3c565b816004811115611e3157611e31613c3c565b1415611e3c57505050565b611e578361010360008460048111156111bd576111bd613c3c565b50611ea0836101036000856004811115611e7357611e73613c3c565b6004811115611e8457611e84613c3c565b8152602001908152602001600020612ff190919063ffffffff16565b50600083815261010060205260409020805483919060ff19166001836004811115611ecd57611ecd613c3c565b0217905550505050565b33600090815260c9602052604090205460ff1680611ef85750611ef8612d4c565b611f145760405162461bcd60e51b815260040161071790613d58565b611f1c611b74565b611f385760405162461bcd60e51b815260040161071790613d84565b611f4360fe84612ff1565b50600083815261010060205260409020805482919060ff19166001836004811115611f7057611f70613c3c565b0217905550611f90836101036000846004811115611e7357611e73613c3c565b50600083815261010160205260409081902080546001600160a01b0319166001600160a01b038581169190911790915561010854915163b1197a3760e01b815291169063b1197a379061123e90859030908890600401613ecc565b6065546001600160a01b031633146120155760405162461bcd60e51b815260040161071790613ef0565b60005b81811015610dc257600160c9600085858581811061203857612038613fa9565b905060200201602081019061204d91906139a6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061207f81613ff9565b915050612018565b60009182526101016020526040909120546001600160a01b0390811691161490565b6120b1611b74565b6120cd5760405162461bcd60e51b815260040161071790613d84565b60975460ff16156120f05760405162461bcd60e51b815260040161071790613f25565b6120f981612ebd565b6121155760405162461bcd60e51b815260040161071790613f4f565b816121325760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d2857600084848381811061215157612151613fa9565b90506020020135905061216383612ffd565b600481111561217457612174613c3c565b6000828152610100602052604090205460ff16600481111561219857612198613c3c565b146121b55760405162461bcd60e51b8152600401610717906140fc565b6121bf8133612087565b806121ce57506121ce33610dc7565b6121ea5760405162461bcd60e51b81526004016107179061404b565b6121f383612ec6565b6001600160a01b0316636d27ff61826040518263ffffffff1660e01b815260040161222091815260200190565b600060405180830381600087803b15801561223a57600080fd5b505af115801561224e573d6000803e3d6000fd5b5050505050808061225e90613ff9565b915050612135565b61226e611b74565b61228a5760405162461bcd60e51b815260040161071790613d84565b60975460ff16156122ad5760405162461bcd60e51b815260040161071790613f25565b6122b681612ebd565b6122d25760405162461bcd60e51b815260040161071790613f4f565b816122ef5760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d2857600084848381811061230e5761230e613fa9565b90506020020135905061232083613039565b600481111561233157612331613c3c565b6000828152610100602052604090205460ff16600481111561235557612355613c3c565b146123725760405162461bcd60e51b8152600401610717906140fc565b61237c8133612087565b8061238b575061238b33610dc7565b6123a75760405162461bcd60e51b81526004016107179061404b565b6123b083612ec6565b6001600160a01b0316639c2fa04b826040518263ffffffff1660e01b81526004016123dd91815260200190565b600060405180830381600087803b1580156123f757600080fd5b505af115801561240b573d6000803e3d6000fd5b5050505050808061241b90613ff9565b9150506122f2565b6000610104546000141561243957506000610e88565b6000610104548461244a9190614138565b60209490941c93905060008060045b80156124c457600061246c600183613eb5565b600081815261010660205260409020549091506124888261192f565b61249291906140dd565b61249c90856140c5565b93508385106124ab57506124b2565b91506124c4565b806124bc8161414c565b915050612459565b50806124d65760009350505050610e88565b60006124e3600383611b1c565b905060006124f2600184611b1c565b90506000600388600481111561250a5761250a613c3c565b1461251657600061251b565b61010a545b6125269060646140c5565b9050600061253482856140dd565b9050600060018a600481111561254c5761254c613c3c565b1461255857600061255d565b61010a545b6125689060646140c5565b9050600061257682866140dd565b9050600061258482856140c5565b90506000612592828f614138565b90506000858210156125c05760006125aa8884614163565b90506125b860038c83610de5565b91505061263e565b6125ca84876140c5565b8210156125f6576000856125de8885613eb5565b6125e89190614163565b90506125b860018c83610de5565b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420706f737369626c652063757272656e746c792e0000000000000000006044820152606401610717565b600090815261010160205260409020546001600160a01b03169e9d5050505050505050505050505050565b33600090815260c9602052604090205460ff168061268a575061268a612d4c565b6126a65760405162461bcd60e51b815260040161071790613d58565b6001600160a01b038316158015906126c657506001600160a01b03811615155b80156126da57506001600160a01b03821615155b6127165760405162461bcd60e51b815260206004820152600d60248201526c4261642061646472657373657360981b6044820152606401610717565b61010780546001600160a01b039485166001600160a01b0319918216179091556101088054938516938216939093179092556101098054919093169116179055565b60606101058054806020026020016040519081016040528092919081815260200182805480156127d757602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156127b5576127b5613c3c565b8152602060019283018181049485019490930390920291018084116127965790505b5050505050905090565b600090815261010160205260409020546001600160a01b0316151590565b33600090815260c9602052604090205460ff16806128205750612820612d4c565b61283c5760405162461bcd60e51b815260040161071790613d58565b801561284a5761163161305d565b6116316130d2565b6000611b6d82610103600086600481111561286f5761286f613c3c565b600481111561288057612880613c3c565b8152602001908152602001600020612e5590919063ffffffff16565b33600090815260c9602052604090205460ff16806128bd57506128bd612d4c565b6128d95760405162461bcd60e51b815260040161071790613d58565b6128e1611b74565b6128fd5760405162461bcd60e51b815260040161071790613d84565b610108546040516394e5684760e01b8152600481018590526000916001600160a01b0316906394e56847906024016101406040518083038186803b15801561294457600080fd5b505afa158015612958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297c9190613dd7565b8051909150156129c35760405162461bcd60e51b81526020600482015260126024820152712a37b5b2b7103737ba103090323930b3b7b760711b6044820152606401610717565b6129cc846127e1565b15612a6e57600084815261010160205260409020546001600160a01b03848116911614612a3b5760405162461bcd60e51b815260206004820152601c60248201527f4f776e6572206d69736d61746368206d6f76696e6720647261676f6e000000006044820152606401610717565b6000848152610100602052604081205460ff1690612a6b9086906101029084600481111561088457610884613c3c565b50505b612acf846101026000856004811115612a8957612a89613c3c565b6004811115612a9a57612a9a613c3c565b8152602001908152602001600020600084610120015160ff168152602001908152602001600020612ff190919063ffffffff16565b50600084815261010060205260409020805483919060ff19166001836004811115612afc57612afc613c3c565b0217905550612b0a846127e1565b610d285760008481526101016020908152604080832080546001600160a01b0319166001600160a01b03881617905561012084015160ff168352610106909152812054610104805491929091612b619084906140c5565b90915550612b72905060fc85612ff1565b506101085460405163b1197a3760e01b81526001600160a01b039091169063b1197a379061091e90869030908990600401613ecc565b33600090815260c9602052604090205460ff1680612bc95750612bc9612d4c565b612be55760405162461bcd60e51b815260040161071790613d58565b828114612c245760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610717565b60005b83811015612cad576000858583818110612c4357612c43613fa9565b90506020020135905060005b83811015612c9857848482818110612c6957612c69613fa9565b600085815261010660209081526040909120910292909201359091555080612c9081613ff9565b915050612c4f565b50508080612ca590613ff9565b915050612c27565b5050505050565b6065546001600160a01b03163314612cde5760405162461bcd60e51b815260040161071790613ef0565b6001600160a01b038116612d435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610717565b61163181612e6b565b600033612d616065546001600160a01b031690565b6001600160a01b031614905090565b6000611b6d838361314c565b60006003826004811115612d9257612d92613c3c565b1480610e88575060015b826004811115612dae57612dae613c3c565b1492915050565b60006003826004811115612dcb57612dcb613c3c565b1415612de3575050610107546001600160a01b031690565b6001826004811115612df757612df7613c3c565b1415612e0f575050610109546001600160a01b031690565b60405162461bcd60e51b8152602060048201526016602482015275556e61626c6520746f2066696e642073746b61626c6560501b6044820152606401610717565b919050565b6000611b6d838361323f565b6000610e88825490565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006003612d9c565b60006002826004811115612edc57612edc613c3c565b1480612ef957506004826004811115612ef757612ef7613c3c565b145b80612f1557506003826004811115612f1357612f13613c3c565b145b15612f2c575050610107546001600160a01b031690565b60405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f2066696e64207374616b61626c650000000000000000006044820152606401610717565b600054610100900460ff16612f8f5760005460ff1615612f93565b303b155b612faf5760405162461bcd60e51b815260040161071790614077565b600054610100900460ff16158015612fd1576000805461ffff19166101011790555b61161f613269565b60008181526001830160205260408120541515611b6d565b6000611b6d83836132ce565b6000600382600481111561301357613013613c3c565b141561302157506002919050565b60405162461bcd60e51b8152600401610717906140fc565b6000600382600481111561304f5761304f613c3c565b141561302157506004919050565b60975460ff16156130805760405162461bcd60e51b815260040161071790613f25565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130b53390565b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff1661311b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610717565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336130b5565b60008181526001830160205260408120548015613235576000613170600183613eb5565b855490915060009061318490600190613eb5565b90508181146131e95760008660000182815481106131a4576131a4613fa9565b90600052602060002001549050808760000184815481106131c7576131c7613fa9565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806131fa576131fa614177565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e88565b6000915050610e88565b600082600001828154811061325657613256613fa9565b9060005260206000200154905092915050565b600054610100900460ff166132845760005460ff1615613288565b303b155b6132a45760405162461bcd60e51b815260040161071790614077565b600054610100900460ff161580156132c6576000805461ffff19166101011790555b61161f61331d565b600081815260018301602052604081205461331557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e88565b506000610e88565b600054610100900460ff166133385760005460ff161561333c565b303b155b6133585760405162461bcd60e51b815260040161071790614077565b600054610100900460ff1615801561337a576000805461ffff19166101011790555b61161f600054610100900460ff166133985760005460ff161561339c565b303b155b6133b85760405162461bcd60e51b815260040161071790614077565b600054610100900460ff161580156133da576000805461ffff19166101011790555b6133e26134c4565b6133ea613529565b600f61010a5560408051808201909152600181526003602082015261341490610105906002613789565b5061010660205260047fa834c146e355490ead4d56c877861d17fc10d12708043d26a0e228bf41aa7c165560077f0b7895cf0331f180492896bb0e7241bca2e8dcd9fbbc740402024bf7e0b3a2ba55600b7f08c4b710c75cff9e2338e88a18752208814eb84ead52050459bb293d71b60e6c55600860005260147fcb6818396f2ca5786edaf6d1dc2e7c105e708fee7851079db957b01516396f2b558015611631576000805461ff001916905550565b600054610100900460ff166134df5760005460ff16156134e3565b303b155b6134ff5760405162461bcd60e51b815260040161071790614077565b600054610100900460ff16158015613521576000805461ffff19166101011790555b61161f613558565b600054610100900460ff166135505760405162461bcd60e51b81526004016107179061418d565b6111156135cd565b600054610100900460ff166135735760005460ff1615613577565b303b155b6135935760405162461bcd60e51b815260040161071790614077565b600054610100900460ff161580156135b5576000805461ffff19166101011790555b6135bd6135f4565b6135c561362b565b61161f61305d565b600054610100900460ff166111155760405162461bcd60e51b81526004016107179061418d565b600054610100900460ff1661361b5760405162461bcd60e51b81526004016107179061418d565b6136236135cd565b611115613662565b600054610100900460ff166136525760405162461bcd60e51b81526004016107179061418d565b61365a6135cd565b611115613692565b600054610100900460ff166136895760405162461bcd60e51b81526004016107179061418d565b61111533612e6b565b600054610100900460ff166136b95760405162461bcd60e51b81526004016107179061418d565b6097805460ff19169055565b82805482825590600052602060002090601f016020900481019282156137795791602002820160005b8382111561374a57833560048111801561370757600080fd5b5083826101000a81548160ff0219169083600481111561372957613729613c3c565b021790555092602001926001016020816000010492830192600103026136ee565b80156137775782816101000a81549060ff021916905560010160208160000104928301926001030261374a565b505b506137859291506137fe565b5090565b82805482825590600052602060002090601f016020900481019282156137795791602002820160005b8382111561374a57835183826101000a81548160ff021916908360048111156137dd576137dd613c3c565b021790555092602001926001016020816000010492830192600103026137b2565b5b8082111561378557600081556001016137ff565b6001600160a01b038116811461163157600080fd5b6000806040838503121561383b57600080fd5b82359150602083013561384d81613813565b809150509250929050565b60006020828403121561386a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156138ab576138ab613871565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156138da576138da613871565b604052919050565b600080600080608085870312156138f857600080fd5b843561390381613813565b935060208581013561391481613813565b935060408601359250606086013567ffffffffffffffff8082111561393857600080fd5b818801915088601f83011261394c57600080fd5b81358181111561395e5761395e613871565b613970601f8201601f191685016138b1565b9150808252898482850101111561398657600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000602082840312156139b857600080fd5b8135611b6d81613813565b60008083601f8401126139d557600080fd5b50813567ffffffffffffffff8111156139ed57600080fd5b6020830191508360208260051b8501011115613a0857600080fd5b9250929050565b803560058110612e5057600080fd5b600080600060408486031215613a3357600080fd5b833567ffffffffffffffff811115613a4a57600080fd5b613a56868287016139c3565b9094509250613a69905060208501613a0f565b90509250925092565b60008060208385031215613a8557600080fd5b823567ffffffffffffffff811115613a9c57600080fd5b613aa8858286016139c3565b90969095509350505050565b600080600060608486031215613ac957600080fd5b613ad284613a0f565b95602085013595506040909401359392505050565b600060208284031215613af957600080fd5b611b6d82613a0f565b60008060408385031215613b1557600080fd5b613b1e83613a0f565b9150602083013561384d81613813565b6020808252825182820181905260009190848201906040850190845b8181101561104457835183529284019291840191600101613b4a565b60008060408385031215613b7957600080fd5b613b8283613a0f565b946020939093013593505050565b60008060408385031215613ba357600080fd5b82359150613bb360208401613a0f565b90509250929050565b600080600060608486031215613bd157600080fd5b833592506020840135613be381613813565b9150613a6960408501613a0f565b600080600060608486031215613c0657600080fd5b8335613c1181613813565b92506020840135613c2181613813565b91506040840135613c3181613813565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60058110613c7057634e487b7160e01b600052602160045260246000fd5b9052565b60208101610e888284613c52565b6020808252825182820181905260009190848201906040850190845b8181101561104457613cb1838551613c52565b9284019291840191600101613c9e565b801515811461163157600080fd5b600060208284031215613ce157600080fd5b8135611b6d81613cc1565b60008060008060408587031215613d0257600080fd5b843567ffffffffffffffff80821115613d1a57600080fd5b613d26888389016139c3565b90965094506020870135915080821115613d3f57600080fd5b50613d4c878288016139c3565b95989497509550505050565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b60208082526018908201527f576f726c643a20436f6e747261637473206e6f74207365740000000000000000604082015260600190565b8051612e5081613cc1565b805160ff81168114612e5057600080fd5b60006101408284031215613dea57600080fd5b613df2613887565b613dfb83613dbb565b8152613e0960208401613dc6565b6020820152613e1a60408401613dc6565b6040820152613e2b60608401613dc6565b6060820152613e3c60808401613dc6565b6080820152613e4d60a08401613dc6565b60a0820152613e5e60c08401613dc6565b60c0820152613e6f60e08401613dc6565b60e0820152610100613e82818501613dc6565b90820152610120613e94848201613dc6565b908201529392505050565b634e487b7160e01b600052601160045260246000fd5b600082821015613ec757613ec7613e9f565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526010908201526f24b73b30b634b2103637b1b0ba34b7b760811b604082015260600190565b6020808252601690820152751b9bc81d1bdad95b881a591cc81cdc1958da599a595960521b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613fd157600080fd5b8151611b6d81613cc1565b600060208284031215613fee57600080fd5b8151611b6d81613813565b600060001982141561400d5761400d613e9f565b5060010190565b60208082526017908201527f496e76616c69642077697a617264206c6f636174696f6e000000000000000000604082015260600190565b60208082526012908201527124b73b30b634b2103832b936b4b9b9b4b7b760711b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082198211156140d8576140d8613e9f565b500190565b60008160001904831182151516156140f7576140f7613e9f565b500290565b6020808252600c908201526b2130b2103637b1b0ba34b7b760a11b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60008261414757614147614122565b500690565b60008161415b5761415b613e9f565b506000190190565b60008261417257614172614122565b500490565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220dd42776c8fd51692cecaeda9c10f43d5b00eb68815b9c0c788f5c1560ae57f4064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d65760003560e01c806385664e8011610182578063a4bd4390116100e9578063bedb86fb116100a2578063d826cbe11161007c578063d826cbe11461068d578063e7399777146106a0578063f2fde38b146106b3578063ff5cbc74146106c657600080fd5b8063bedb86fb1461065e578063cd2b9a9514610671578063d099df0b1461067a57600080fd5b8063a4bd4390146105cc578063a6444c2f146105df578063b3066d49146105f2578063b428181e14610605578063b610d06914610636578063ba1fe7bb1461064b57600080fd5b80639679b3b51161013b5780639679b3b51461055a5780639a9917151461056d5780639c4b8510146105805780639c54df64146105935780639d425a17146105a65780639e3b8fe3146105b957600080fd5b806385664e801461050b57806386a497871461051e57806386e556a9146105265780638b81826d1461052e5780638cdcc4b4146105415780638da5cb5b1461054957600080fd5b8063377e11e011610241578063715018a6116101fa5780637e9a0c18116101d45780637e9a0c18146104c957806380a59707146104dc5780638129fc1c146104f05780638481cc88146104f857600080fd5b8063715018a61461049b57806375a1285c146104a357806379e6597b146104b657600080fd5b8063377e11e01461042d57806352fb5e24146104405780635392f1c0146104605780635c975abb1461046a578063704802751461047557806370fb4a271461048857600080fd5b80631d2b3063116102935780631d2b3063146103a857806322b5cfee146103bb57806324d7806c146103ce57806329dc5210146103f157806329e02b05146104125780633411d6db1461042557600080fd5b806303dee4a2146102db578063078e8be7146102f057806312e8ac0614610321578063150b7a021461034b5780631785f53c1461038257806318afa9f414610395575b600080fd5b6102ee6102e9366004613828565b6106da565b005b61010754610304906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61030461032f366004613858565b600090815261010160205260409020546001600160a01b031690565b6103696103593660046138e2565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610318565b6102ee6103903660046139a6565b610956565b6102ee6103a3366004613a1e565b6109a1565b6102ee6103b6366004613858565b610d2e565b6102ee6103c9366004613a72565b610db5565b6103e16103dc3660046139a6565b610dc7565b6040519015158152602001610318565b6104046103ff366004613ab4565b610de5565b604051908152602001610318565b610404610420366004613ae7565b610e48565b610404610e8e565b6102ee61043b366004613a72565b610e9f565b61045361044e366004613b02565b610f3b565b6040516103189190613b2e565b61040461010a5481565b60975460ff166103e1565b6102ee6104833660046139a6565b611050565b6102ee610496366004613858565b61109e565b6102ee6110e1565b6102ee6104b1366004613828565b611117565b6104536104c4366004613b02565b611275565b6102ee6104d7366004613a1e565b6113fd565b61010854610304906001600160a01b031681565b6102ee6115b2565b6102ee610506366004613a1e565b611634565b610404610519366004613858565b61192f565b6102ee6119e4565b610404611b10565b61040461053c366004613b66565b611b1c565b6103e1611b74565b6065546001600160a01b0316610304565b6102ee610568366004613a1e565b611bb7565b6102ee61057b366004613b90565b611d70565b6102ee61058e366004613bbc565b611ed7565b6102ee6105a1366004613a72565b611feb565b6103e16105b4366004613828565b612087565b6102ee6105c7366004613a1e565b6120a9565b6102ee6105da366004613a1e565b612266565b6103046105ed366004613b90565b612423565b6102ee610600366004613bf1565b612669565b610629610613366004613858565b6000908152610100602052604090205460ff1690565b6040516103189190613c74565b61063e612758565b6040516103189190613c82565b6103e1610659366004613858565b6127e1565b6102ee61066c366004613ccf565b6127ff565b61010454610404565b610404610688366004613b66565b612852565b6102ee61069b366004613bbc565b61289c565b6102ee6106ae366004613cec565b612ba8565b6102ee6106c13660046139a6565b612cb4565b61010954610304906001600160a01b031681565b33600090815260c9602052604090205460ff16806106fb57506106fb612d4c565b6107205760405162461bcd60e51b815260040161071790613d58565b60405180910390fd5b610728611b74565b6107445760405162461bcd60e51b815260040161071790613d84565b610108546040516394e5684760e01b8152600481018490526000916001600160a01b0316906394e56847906024016101406040518083038186803b15801561078b57600080fd5b505afa15801561079f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c39190613dd7565b80519091501561080a5760405162461bcd60e51b81526020600482015260126024820152712a37b5b2b7103737ba103090323930b3b7b760711b6044820152606401610717565b610106600082610120015160ff1681526020019081526020016000205461010460008282546108399190613eb5565b9091555061084a905060fc84612d70565b50600083815261010060205260408120805460ff19811690915560ff16906108ca9085906101029084600481111561088457610884613c3c565b600481111561089557610895613c3c565b8152602001908152602001600020600085610120015160ff168152602001908152602001600020612d7090919063ffffffff16565b50600084815261010160205260409081902080546001600160a01b031916905561010854905163b1197a3760e01b81526001600160a01b039091169063b1197a379061091e90309087908990600401613ecc565b600060405180830381600087803b15801561093857600080fd5b505af115801561094c573d6000803e3d6000fd5b5050505050505050565b6065546001600160a01b031633146109805760405162461bcd60e51b815260040161071790613ef0565b6001600160a01b0316600090815260c960205260409020805460ff19169055565b6109a9611b74565b6109c55760405162461bcd60e51b815260040161071790613d84565b60975460ff16156109e85760405162461bcd60e51b815260040161071790613f25565b6109f181612d7c565b610a0d5760405162461bcd60e51b815260040161071790613f4f565b81610a2a5760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d28576000848483818110610a4957610a49613fa9565b61010854604051600162ac0b8d60e01b0319815260209290920293909301356004820181905293506001600160a01b039092169163ff53f473915060240160206040518083038186803b158015610a9f57600080fd5b505afa158015610ab3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ad79190613fbf565b15610b1a5760405162461bcd60e51b81526020600482015260136024820152722a37b5b2b71034b9903737ba10323930b3b7b760691b6044820152606401610717565b6000610b25826127e1565b15610bca5760008281526101006020526040902054610b469060ff16612db5565b6040516327afaa2360e21b815260048101849052600060248201526001600160a01b039190911690639ebea88c90604401600060405180830381600087803b158015610b9157600080fd5b505af1158015610ba5573d6000803e3d6000fd5b505050600083815261010160205260409020546001600160a01b031690509050610c4a565b610108546040516331a9108f60e11b8152600481018490526001600160a01b0390911690636352211e9060240160206040518083038186803b158015610c0f57600080fd5b505afa158015610c23573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c479190613fdc565b90505b6001600160a01b038116331480610c655750610c6533610dc7565b610ca65760405162461bcd60e51b81526020600482015260126024820152712737ba1037bbb732b91037b91030b236b4b760711b6044820152606401610717565b610caf84612db5565b604051637acb775760e01b8152600481018490526001600160a01b0383811660248301529190911690637acb775790604401600060405180830381600087803b158015610cfb57600080fd5b505af1158015610d0f573d6000803e3d6000fd5b5050505050508080610d2090613ff9565b915050610a2d565b50505050565b33600090815260c9602052604090205460ff1680610d4f5750610d4f612d4c565b610d6b5760405162461bcd60e51b815260040161071790613d58565b6064811115610daf5760405162461bcd60e51b815260206004820152601060248201526f42616420647261676f6e20626f6e757360801b6044820152606401610717565b61010a55565b610dc261010583836136c5565b505050565b6001600160a01b0316600090815260c9602052604090205460ff1690565b6000610e40826101026000876004811115610e0257610e02613c3c565b6004811115610e1357610e13613c3c565b81526020019081526020016000206000868152602001908152602001600020612e5590919063ffffffff16565b949350505050565b6000610e886101036000846004811115610e6457610e64613c3c565b6004811115610e7557610e75613c3c565b8152602001908152602001600020612e61565b92915050565b6000610e9a60fe612e61565b905090565b6065546001600160a01b03163314610ec95760405162461bcd60e51b815260040161071790613ef0565b60005b81811015610dc257600060c96000858585818110610eec57610eec613fa9565b9050602002016020810190610f0191906139a6565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610f3381613ff9565b915050610ecc565b60606000610f4884610e48565b90506000805b82811015610f94576000610f628783612852565b9050610f6e8187612087565b15610f815782610f7d81613ff9565b9350505b5080610f8c81613ff9565b915050610f4e565b5060008167ffffffffffffffff811115610fb057610fb0613871565b604051908082528060200260200182016040528015610fd9578160200160208202803683370190505b5090506000805b84811015611044576000610ff48983612852565b90506110008189612087565b15611031578084848151811061101857611018613fa9565b60209081029190910101528261102d81613ff9565b9350505b508061103c81613ff9565b915050610fe0565b50909695505050505050565b6065546001600160a01b0316331461107a5760405162461bcd60e51b815260040161071790613ef0565b6001600160a01b0316600090815260c960205260409020805460ff19166001179055565b33600090815260c9602052604090205460ff16806110bf57506110bf612d4c565b6110db5760405162461bcd60e51b815260040161071790613d58565b61010455565b6065546001600160a01b0316331461110b5760405162461bcd60e51b815260040161071790613ef0565b6111156000612e6b565b565b33600090815260c9602052604090205460ff16806111385750611138612d4c565b6111545760405162461bcd60e51b815260040161071790613d58565b61115c611b74565b6111785760405162461bcd60e51b815260040161071790613d84565b61118360fe83612d70565b50600082815261010060205260408120805460ff19811690915560ff16906111ea908490610103908460048111156111bd576111bd613c3c565b60048111156111ce576111ce613c3c565b8152602001908152602001600020612d7090919063ffffffff16565b50600083815261010160205260409081902080546001600160a01b031916905561010854905163b1197a3760e01b81526001600160a01b039091169063b1197a379061123e90309086908890600401613ecc565b600060405180830381600087803b15801561125857600080fd5b505af115801561126c573d6000803e3d6000fd5b50505050505050565b60606000611281611b10565b90506000805b8281101561130d57600061129c60fc83612e55565b90506112a88187612087565b80156112e757508660048111156112c1576112c1613c3c565b6000828152610100602052604090205460ff1660048111156112e5576112e5613c3c565b145b156112fa57826112f681613ff9565b9350505b508061130581613ff9565b915050611287565b5060008167ffffffffffffffff81111561132957611329613871565b604051908082528060200260200182016040528015611352578160200160208202803683370190505b5090506000805b8481101561104457600061136e60fc83612e55565b905061137a8189612087565b80156113b9575088600481111561139357611393613c3c565b6000828152610100602052604090205460ff1660048111156113b7576113b7613c3c565b145b156113ea57808484815181106113d1576113d1613fa9565b6020908102919091010152826113e681613ff9565b9350505b50806113f581613ff9565b915050611359565b611405611b74565b6114215760405162461bcd60e51b815260040161071790613d84565b60975460ff16156114445760405162461bcd60e51b815260040161071790613f25565b61144d81612ebd565b6114695760405162461bcd60e51b815260040161071790614014565b816114865760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d285760008484838181106114a5576114a5613fa9565b9050602002013590508260048111156114c0576114c0613c3c565b6000828152610100602052604090205460ff1660048111156114e4576114e4613c3c565b146115015760405162461bcd60e51b815260040161071790614014565b61150b8133612087565b8061151a575061151a33610dc7565b6115365760405162461bcd60e51b81526004016107179061404b565b61153f83612ec6565b6001600160a01b03166334dfb268826040518263ffffffff1660e01b815260040161156c91815260200190565b600060405180830381600087803b15801561158657600080fd5b505af115801561159a573d6000803e3d6000fd5b505050505080806115aa90613ff9565b915050611489565b600054610100900460ff166115cd5760005460ff16156115d1565b303b155b6115ed5760405162461bcd60e51b815260040161071790614077565b600054610100900460ff1615801561160f576000805461ffff19166101011790555b611617612f74565b61161f612f74565b8015611631576000805461ff00191690555b50565b61163c611b74565b6116585760405162461bcd60e51b815260040161071790613d84565b60975460ff161561167b5760405162461bcd60e51b815260040161071790613f25565b61168481612ebd565b6116a05760405162461bcd60e51b815260040161071790614014565b816116bd5760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d285760008484838181106116dc576116dc613fa9565b9050602002013590506116ee816127e1565b156117345760405162461bcd60e51b8152602060048201526016602482015275151bdad95b88185b1c9958591e481a5b881ddbdc9b1960521b6044820152606401610717565b61010854604051600162ac0b8d60e01b03198152600481018390526001600160a01b039091169063ff53f4739060240160206040518083038186803b15801561177c57600080fd5b505afa158015611790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b49190613fbf565b6117f65760405162461bcd60e51b8152602060048201526013602482015272151bdad95b881a5cc81b9bdd081dda5e985c99606a1b6044820152606401610717565b610108546040516331a9108f60e11b8152600481018390526000916001600160a01b031690636352211e9060240160206040518083038186803b15801561183c57600080fd5b505afa158015611850573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118749190613fdc565b90506001600160a01b038116331480611891575061189133610dc7565b6118ad5760405162461bcd60e51b81526004016107179061404b565b6118b684612ec6565b604051638a61b02760e01b8152600481018490526001600160a01b0383811660248301529190911690638a61b02790604401600060405180830381600087803b15801561190257600080fd5b505af1158015611916573d6000803e3d6000fd5b505050505050808061192790613ff9565b9150506116c0565b6000805b610105548110156119de576119c06101026000610105848154811061195a5761195a613fa9565b90600052602060002090602091828204019190069054906101000a900460ff16600481111561198b5761198b613c3c565b600481111561199c5761199c613c3c565b81526020019081526020016000206000858152602001908152602001600020612e61565b6119ca90836140c5565b9150806119d681613ff9565b915050611933565b50919050565b33600090815260c9602052604090205460ff1680611a055750611a05612d4c565b611a215760405162461bcd60e51b815260040161071790613d58565b600360008181526101066020527f02029c55f9e39d554ef1956e7f946f5d20dd840a58a3da90e1a05d1aba8b2deb546002916001918190611a618661192f565b611a6b91906140dd565b611a7590826140c5565b60008581526101066020526040902054909150611a918561192f565b611a9b91906140dd565b611aa590826140c5565b60008481526101066020526040902054909150611ac18461192f565b611acb91906140dd565b611ad590826140c5565b60008381526101066020526040902054909150611af18361192f565b611afb91906140dd565b611b0590826140c5565b610104555050505050565b6000610e9a60fc612e61565b6000611b6d6101026000856004811115611b3857611b38613c3c565b6004811115611b4957611b49613c3c565b81526020019081526020016000206000848152602001908152602001600020612e61565b9392505050565b610107546000906001600160a01b031615801590611b9d5750610109546001600160a01b031615155b8015610e9a575050610108546001600160a01b0316151590565b611bbf611b74565b611bdb5760405162461bcd60e51b815260040161071790613d84565b60975460ff1615611bfe5760405162461bcd60e51b815260040161071790613f25565b611c0781612d7c565b611c235760405162461bcd60e51b815260040161071790613f4f565b81611c405760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d28576000848483818110611c5f57611c5f613fa9565b905060200201359050826004811115611c7a57611c7a613c3c565b6000828152610100602052604090205460ff166004811115611c9e57611c9e613c3c565b14611cbb5760405162461bcd60e51b8152600401610717906140fc565b611cc58133612087565b80611cd45750611cd433610dc7565b611cf05760405162461bcd60e51b81526004016107179061404b565b611cf983612db5565b6040516327afaa2360e21b815260048101839052600160248201526001600160a01b039190911690639ebea88c90604401600060405180830381600087803b158015611d4457600080fd5b505af1158015611d58573d6000803e3d6000fd5b50505050508080611d6890613ff9565b915050611c43565b33600090815260c9602052604090205460ff1680611d915750611d91612d4c565b611dad5760405162461bcd60e51b815260040161071790613d58565b611db860fe83612fd9565b611dfa5760405162461bcd60e51b815260206004820152601360248201527215da5e985c99081b9bdd081a5b881ddbdc9b19606a1b6044820152606401610717565b6000828152610100602052604090205460ff16816004811115611e1f57611e1f613c3c565b816004811115611e3157611e31613c3c565b1415611e3c57505050565b611e578361010360008460048111156111bd576111bd613c3c565b50611ea0836101036000856004811115611e7357611e73613c3c565b6004811115611e8457611e84613c3c565b8152602001908152602001600020612ff190919063ffffffff16565b50600083815261010060205260409020805483919060ff19166001836004811115611ecd57611ecd613c3c565b0217905550505050565b33600090815260c9602052604090205460ff1680611ef85750611ef8612d4c565b611f145760405162461bcd60e51b815260040161071790613d58565b611f1c611b74565b611f385760405162461bcd60e51b815260040161071790613d84565b611f4360fe84612ff1565b50600083815261010060205260409020805482919060ff19166001836004811115611f7057611f70613c3c565b0217905550611f90836101036000846004811115611e7357611e73613c3c565b50600083815261010160205260409081902080546001600160a01b0319166001600160a01b038581169190911790915561010854915163b1197a3760e01b815291169063b1197a379061123e90859030908890600401613ecc565b6065546001600160a01b031633146120155760405162461bcd60e51b815260040161071790613ef0565b60005b81811015610dc257600160c9600085858581811061203857612038613fa9565b905060200201602081019061204d91906139a6565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061207f81613ff9565b915050612018565b60009182526101016020526040909120546001600160a01b0390811691161490565b6120b1611b74565b6120cd5760405162461bcd60e51b815260040161071790613d84565b60975460ff16156120f05760405162461bcd60e51b815260040161071790613f25565b6120f981612ebd565b6121155760405162461bcd60e51b815260040161071790613f4f565b816121325760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d2857600084848381811061215157612151613fa9565b90506020020135905061216383612ffd565b600481111561217457612174613c3c565b6000828152610100602052604090205460ff16600481111561219857612198613c3c565b146121b55760405162461bcd60e51b8152600401610717906140fc565b6121bf8133612087565b806121ce57506121ce33610dc7565b6121ea5760405162461bcd60e51b81526004016107179061404b565b6121f383612ec6565b6001600160a01b0316636d27ff61826040518263ffffffff1660e01b815260040161222091815260200190565b600060405180830381600087803b15801561223a57600080fd5b505af115801561224e573d6000803e3d6000fd5b5050505050808061225e90613ff9565b915050612135565b61226e611b74565b61228a5760405162461bcd60e51b815260040161071790613d84565b60975460ff16156122ad5760405162461bcd60e51b815260040161071790613f25565b6122b681612ebd565b6122d25760405162461bcd60e51b815260040161071790613f4f565b816122ef5760405162461bcd60e51b815260040161071790613f79565b60005b82811015610d2857600084848381811061230e5761230e613fa9565b90506020020135905061232083613039565b600481111561233157612331613c3c565b6000828152610100602052604090205460ff16600481111561235557612355613c3c565b146123725760405162461bcd60e51b8152600401610717906140fc565b61237c8133612087565b8061238b575061238b33610dc7565b6123a75760405162461bcd60e51b81526004016107179061404b565b6123b083612ec6565b6001600160a01b0316639c2fa04b826040518263ffffffff1660e01b81526004016123dd91815260200190565b600060405180830381600087803b1580156123f757600080fd5b505af115801561240b573d6000803e3d6000fd5b5050505050808061241b90613ff9565b9150506122f2565b6000610104546000141561243957506000610e88565b6000610104548461244a9190614138565b60209490941c93905060008060045b80156124c457600061246c600183613eb5565b600081815261010660205260409020549091506124888261192f565b61249291906140dd565b61249c90856140c5565b93508385106124ab57506124b2565b91506124c4565b806124bc8161414c565b915050612459565b50806124d65760009350505050610e88565b60006124e3600383611b1c565b905060006124f2600184611b1c565b90506000600388600481111561250a5761250a613c3c565b1461251657600061251b565b61010a545b6125269060646140c5565b9050600061253482856140dd565b9050600060018a600481111561254c5761254c613c3c565b1461255857600061255d565b61010a545b6125689060646140c5565b9050600061257682866140dd565b9050600061258482856140c5565b90506000612592828f614138565b90506000858210156125c05760006125aa8884614163565b90506125b860038c83610de5565b91505061263e565b6125ca84876140c5565b8210156125f6576000856125de8885613eb5565b6125e89190614163565b90506125b860018c83610de5565b60405162461bcd60e51b815260206004820152601760248201527f4e6f7420706f737369626c652063757272656e746c792e0000000000000000006044820152606401610717565b600090815261010160205260409020546001600160a01b03169e9d5050505050505050505050505050565b33600090815260c9602052604090205460ff168061268a575061268a612d4c565b6126a65760405162461bcd60e51b815260040161071790613d58565b6001600160a01b038316158015906126c657506001600160a01b03811615155b80156126da57506001600160a01b03821615155b6127165760405162461bcd60e51b815260206004820152600d60248201526c4261642061646472657373657360981b6044820152606401610717565b61010780546001600160a01b039485166001600160a01b0319918216179091556101088054938516938216939093179092556101098054919093169116179055565b60606101058054806020026020016040519081016040528092919081815260200182805480156127d757602002820191906000526020600020906000905b82829054906101000a900460ff1660048111156127b5576127b5613c3c565b8152602060019283018181049485019490930390920291018084116127965790505b5050505050905090565b600090815261010160205260409020546001600160a01b0316151590565b33600090815260c9602052604090205460ff16806128205750612820612d4c565b61283c5760405162461bcd60e51b815260040161071790613d58565b801561284a5761163161305d565b6116316130d2565b6000611b6d82610103600086600481111561286f5761286f613c3c565b600481111561288057612880613c3c565b8152602001908152602001600020612e5590919063ffffffff16565b33600090815260c9602052604090205460ff16806128bd57506128bd612d4c565b6128d95760405162461bcd60e51b815260040161071790613d58565b6128e1611b74565b6128fd5760405162461bcd60e51b815260040161071790613d84565b610108546040516394e5684760e01b8152600481018590526000916001600160a01b0316906394e56847906024016101406040518083038186803b15801561294457600080fd5b505afa158015612958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297c9190613dd7565b8051909150156129c35760405162461bcd60e51b81526020600482015260126024820152712a37b5b2b7103737ba103090323930b3b7b760711b6044820152606401610717565b6129cc846127e1565b15612a6e57600084815261010160205260409020546001600160a01b03848116911614612a3b5760405162461bcd60e51b815260206004820152601c60248201527f4f776e6572206d69736d61746368206d6f76696e6720647261676f6e000000006044820152606401610717565b6000848152610100602052604081205460ff1690612a6b9086906101029084600481111561088457610884613c3c565b50505b612acf846101026000856004811115612a8957612a89613c3c565b6004811115612a9a57612a9a613c3c565b8152602001908152602001600020600084610120015160ff168152602001908152602001600020612ff190919063ffffffff16565b50600084815261010060205260409020805483919060ff19166001836004811115612afc57612afc613c3c565b0217905550612b0a846127e1565b610d285760008481526101016020908152604080832080546001600160a01b0319166001600160a01b03881617905561012084015160ff168352610106909152812054610104805491929091612b619084906140c5565b90915550612b72905060fc85612ff1565b506101085460405163b1197a3760e01b81526001600160a01b039091169063b1197a379061091e90869030908990600401613ecc565b33600090815260c9602052604090205460ff1680612bc95750612bc9612d4c565b612be55760405162461bcd60e51b815260040161071790613d58565b828114612c245760405162461bcd60e51b815260206004820152600d60248201526c1a5b9d985b1a59081a5b9c1d5d609a1b6044820152606401610717565b60005b83811015612cad576000858583818110612c4357612c43613fa9565b90506020020135905060005b83811015612c9857848482818110612c6957612c69613fa9565b600085815261010660209081526040909120910292909201359091555080612c9081613ff9565b915050612c4f565b50508080612ca590613ff9565b915050612c27565b5050505050565b6065546001600160a01b03163314612cde5760405162461bcd60e51b815260040161071790613ef0565b6001600160a01b038116612d435760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610717565b61163181612e6b565b600033612d616065546001600160a01b031690565b6001600160a01b031614905090565b6000611b6d838361314c565b60006003826004811115612d9257612d92613c3c565b1480610e88575060015b826004811115612dae57612dae613c3c565b1492915050565b60006003826004811115612dcb57612dcb613c3c565b1415612de3575050610107546001600160a01b031690565b6001826004811115612df757612df7613c3c565b1415612e0f575050610109546001600160a01b031690565b60405162461bcd60e51b8152602060048201526016602482015275556e61626c6520746f2066696e642073746b61626c6560501b6044820152606401610717565b919050565b6000611b6d838361323f565b6000610e88825490565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006003612d9c565b60006002826004811115612edc57612edc613c3c565b1480612ef957506004826004811115612ef757612ef7613c3c565b145b80612f1557506003826004811115612f1357612f13613c3c565b145b15612f2c575050610107546001600160a01b031690565b60405162461bcd60e51b815260206004820152601760248201527f556e61626c6520746f2066696e64207374616b61626c650000000000000000006044820152606401610717565b600054610100900460ff16612f8f5760005460ff1615612f93565b303b155b612faf5760405162461bcd60e51b815260040161071790614077565b600054610100900460ff16158015612fd1576000805461ffff19166101011790555b61161f613269565b60008181526001830160205260408120541515611b6d565b6000611b6d83836132ce565b6000600382600481111561301357613013613c3c565b141561302157506002919050565b60405162461bcd60e51b8152600401610717906140fc565b6000600382600481111561304f5761304f613c3c565b141561302157506004919050565b60975460ff16156130805760405162461bcd60e51b815260040161071790613f25565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586130b53390565b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff1661311b5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610717565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa336130b5565b60008181526001830160205260408120548015613235576000613170600183613eb5565b855490915060009061318490600190613eb5565b90508181146131e95760008660000182815481106131a4576131a4613fa9565b90600052602060002001549050808760000184815481106131c7576131c7613fa9565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806131fa576131fa614177565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610e88565b6000915050610e88565b600082600001828154811061325657613256613fa9565b9060005260206000200154905092915050565b600054610100900460ff166132845760005460ff1615613288565b303b155b6132a45760405162461bcd60e51b815260040161071790614077565b600054610100900460ff161580156132c6576000805461ffff19166101011790555b61161f61331d565b600081815260018301602052604081205461331557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610e88565b506000610e88565b600054610100900460ff166133385760005460ff161561333c565b303b155b6133585760405162461bcd60e51b815260040161071790614077565b600054610100900460ff1615801561337a576000805461ffff19166101011790555b61161f600054610100900460ff166133985760005460ff161561339c565b303b155b6133b85760405162461bcd60e51b815260040161071790614077565b600054610100900460ff161580156133da576000805461ffff19166101011790555b6133e26134c4565b6133ea613529565b600f61010a5560408051808201909152600181526003602082015261341490610105906002613789565b5061010660205260047fa834c146e355490ead4d56c877861d17fc10d12708043d26a0e228bf41aa7c165560077f0b7895cf0331f180492896bb0e7241bca2e8dcd9fbbc740402024bf7e0b3a2ba55600b7f08c4b710c75cff9e2338e88a18752208814eb84ead52050459bb293d71b60e6c55600860005260147fcb6818396f2ca5786edaf6d1dc2e7c105e708fee7851079db957b01516396f2b558015611631576000805461ff001916905550565b600054610100900460ff166134df5760005460ff16156134e3565b303b155b6134ff5760405162461bcd60e51b815260040161071790614077565b600054610100900460ff16158015613521576000805461ffff19166101011790555b61161f613558565b600054610100900460ff166135505760405162461bcd60e51b81526004016107179061418d565b6111156135cd565b600054610100900460ff166135735760005460ff1615613577565b303b155b6135935760405162461bcd60e51b815260040161071790614077565b600054610100900460ff161580156135b5576000805461ffff19166101011790555b6135bd6135f4565b6135c561362b565b61161f61305d565b600054610100900460ff166111155760405162461bcd60e51b81526004016107179061418d565b600054610100900460ff1661361b5760405162461bcd60e51b81526004016107179061418d565b6136236135cd565b611115613662565b600054610100900460ff166136525760405162461bcd60e51b81526004016107179061418d565b61365a6135cd565b611115613692565b600054610100900460ff166136895760405162461bcd60e51b81526004016107179061418d565b61111533612e6b565b600054610100900460ff166136b95760405162461bcd60e51b81526004016107179061418d565b6097805460ff19169055565b82805482825590600052602060002090601f016020900481019282156137795791602002820160005b8382111561374a57833560048111801561370757600080fd5b5083826101000a81548160ff0219169083600481111561372957613729613c3c565b021790555092602001926001016020816000010492830192600103026136ee565b80156137775782816101000a81549060ff021916905560010160208160000104928301926001030261374a565b505b506137859291506137fe565b5090565b82805482825590600052602060002090601f016020900481019282156137795791602002820160005b8382111561374a57835183826101000a81548160ff021916908360048111156137dd576137dd613c3c565b021790555092602001926001016020816000010492830192600103026137b2565b5b8082111561378557600081556001016137ff565b6001600160a01b038116811461163157600080fd5b6000806040838503121561383b57600080fd5b82359150602083013561384d81613813565b809150509250929050565b60006020828403121561386a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156138ab576138ab613871565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156138da576138da613871565b604052919050565b600080600080608085870312156138f857600080fd5b843561390381613813565b935060208581013561391481613813565b935060408601359250606086013567ffffffffffffffff8082111561393857600080fd5b818801915088601f83011261394c57600080fd5b81358181111561395e5761395e613871565b613970601f8201601f191685016138b1565b9150808252898482850101111561398657600080fd5b808484018584013760008482840101525080935050505092959194509250565b6000602082840312156139b857600080fd5b8135611b6d81613813565b60008083601f8401126139d557600080fd5b50813567ffffffffffffffff8111156139ed57600080fd5b6020830191508360208260051b8501011115613a0857600080fd5b9250929050565b803560058110612e5057600080fd5b600080600060408486031215613a3357600080fd5b833567ffffffffffffffff811115613a4a57600080fd5b613a56868287016139c3565b9094509250613a69905060208501613a0f565b90509250925092565b60008060208385031215613a8557600080fd5b823567ffffffffffffffff811115613a9c57600080fd5b613aa8858286016139c3565b90969095509350505050565b600080600060608486031215613ac957600080fd5b613ad284613a0f565b95602085013595506040909401359392505050565b600060208284031215613af957600080fd5b611b6d82613a0f565b60008060408385031215613b1557600080fd5b613b1e83613a0f565b9150602083013561384d81613813565b6020808252825182820181905260009190848201906040850190845b8181101561104457835183529284019291840191600101613b4a565b60008060408385031215613b7957600080fd5b613b8283613a0f565b946020939093013593505050565b60008060408385031215613ba357600080fd5b82359150613bb360208401613a0f565b90509250929050565b600080600060608486031215613bd157600080fd5b833592506020840135613be381613813565b9150613a6960408501613a0f565b600080600060608486031215613c0657600080fd5b8335613c1181613813565b92506020840135613c2181613813565b91506040840135613c3181613813565b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b60058110613c7057634e487b7160e01b600052602160045260246000fd5b9052565b60208101610e888284613c52565b6020808252825182820181905260009190848201906040850190845b8181101561104457613cb1838551613c52565b9284019291840191600101613c9e565b801515811461163157600080fd5b600060208284031215613ce157600080fd5b8135611b6d81613cc1565b60008060008060408587031215613d0257600080fd5b843567ffffffffffffffff80821115613d1a57600080fd5b613d26888389016139c3565b90965094506020870135915080821115613d3f57600080fd5b50613d4c878288016139c3565b95989497509550505050565b6020808252601290820152712737ba1030b236b4b71037b91037bbb732b960711b604082015260600190565b60208082526018908201527f576f726c643a20436f6e747261637473206e6f74207365740000000000000000604082015260600190565b8051612e5081613cc1565b805160ff81168114612e5057600080fd5b60006101408284031215613dea57600080fd5b613df2613887565b613dfb83613dbb565b8152613e0960208401613dc6565b6020820152613e1a60408401613dc6565b6040820152613e2b60608401613dc6565b6060820152613e3c60808401613dc6565b6080820152613e4d60a08401613dc6565b60a0820152613e5e60c08401613dc6565b60c0820152613e6f60e08401613dc6565b60e0820152610100613e82818501613dc6565b90820152610120613e94848201613dc6565b908201529392505050565b634e487b7160e01b600052601160045260246000fd5b600082821015613ec757613ec7613e9f565b500390565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526010908201526f24b73b30b634b2103637b1b0ba34b7b760811b604082015260600190565b6020808252601690820152751b9bc81d1bdad95b881a591cc81cdc1958da599a595960521b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215613fd157600080fd5b8151611b6d81613cc1565b600060208284031215613fee57600080fd5b8151611b6d81613813565b600060001982141561400d5761400d613e9f565b5060010190565b60208082526017908201527f496e76616c69642077697a617264206c6f636174696f6e000000000000000000604082015260600190565b60208082526012908201527124b73b30b634b2103832b936b4b9b9b4b7b760711b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b600082198211156140d8576140d8613e9f565b500190565b60008160001904831182151516156140f7576140f7613e9f565b500290565b6020808252600c908201526b2130b2103637b1b0ba34b7b760a11b604082015260600190565b634e487b7160e01b600052601260045260246000fd5b60008261414757614147614122565b500690565b60008161415b5761415b613e9f565b506000190190565b60008261417257614172614122565b500490565b634e487b7160e01b600052603160045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220dd42776c8fd51692cecaeda9c10f43d5b00eb68815b9c0c788f5c1560ae57f4064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setTotalRankStaked(uint256)": {
        "notice": "This function is only here in case it is required to tweak the rankToPoints mapping for probability distribution on random dragon selection. In the most perfect of worlds, this will never be called. If it does, it assumes that the _rankStaked parameter is calculated by new rankToPoints mappings for each dragon staked. "
      },
      "setTotalRankStakedCalculated()": {
        "notice": "This function is only here in case it is required to tweak the rankToPoints mapping for probability distribution on random dragon selection. In the most perfect of worlds, this will never be called. If it does, it assumes that the _rankStaked parameter is calculated by new rankToPoints mappings for each dragon staked. "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2787,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2790,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6549,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 6838,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2665,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 2779,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2875,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 2966,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 12019,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "admins",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 12179,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "__gap",
        "offset": 0,
        "slot": "202",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 25777,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "dragonIdSet",
        "offset": 0,
        "slot": "252",
        "type": "t_struct(UintSet)7569_storage"
      },
      {
        "astId": 25780,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "wizardIdSet",
        "offset": 0,
        "slot": "254",
        "type": "t_struct(UintSet)7569_storage"
      },
      {
        "astId": 25785,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "tokenIdToLocation",
        "offset": 0,
        "slot": "256",
        "type": "t_mapping(t_uint256,t_enum(Location)24656)"
      },
      {
        "astId": 25789,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "tokenIdToOwner",
        "offset": 0,
        "slot": "257",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 25797,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "locationToRankToDragonIdSet",
        "offset": 0,
        "slot": "258",
        "type": "t_mapping(t_enum(Location)24656,t_mapping(t_uint256,t_struct(UintSet)7569_storage))"
      },
      {
        "astId": 25803,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "locationToWizardIdSet",
        "offset": 0,
        "slot": "259",
        "type": "t_mapping(t_enum(Location)24656,t_struct(UintSet)7569_storage)"
      },
      {
        "astId": 25805,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "totalRankStaked",
        "offset": 0,
        "slot": "260",
        "type": "t_uint256"
      },
      {
        "astId": 25809,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "stakeableDragonLocations",
        "offset": 0,
        "slot": "261",
        "type": "t_array(t_enum(Location)24656)dyn_storage"
      },
      {
        "astId": 25813,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "rankToPoints",
        "offset": 0,
        "slot": "262",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 25816,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "trainingGrounds",
        "offset": 0,
        "slot": "263",
        "type": "t_contract(ITrainingGrounds)23129"
      },
      {
        "astId": 25819,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "wnd",
        "offset": 0,
        "slot": "264",
        "type": "t_contract(IWnD)20459"
      },
      {
        "astId": 25822,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "rift",
        "offset": 0,
        "slot": "265",
        "type": "t_contract(IRift)15674"
      },
      {
        "astId": 25824,
        "contract": "contracts/wnd/world/World.sol:World",
        "label": "dragonBonusForSameLocation",
        "offset": 0,
        "slot": "266",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_enum(Location)24656)dyn_storage": {
        "base": "t_enum(Location)24656",
        "encoding": "dynamic_array",
        "label": "enum Location[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IRift)15674": {
        "encoding": "inplace",
        "label": "contract IRift",
        "numberOfBytes": "20"
      },
      "t_contract(ITrainingGrounds)23129": {
        "encoding": "inplace",
        "label": "contract ITrainingGrounds",
        "numberOfBytes": "20"
      },
      "t_contract(IWnD)20459": {
        "encoding": "inplace",
        "label": "contract IWnD",
        "numberOfBytes": "20"
      },
      "t_enum(Location)24656": {
        "encoding": "inplace",
        "label": "enum Location",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Location)24656,t_mapping(t_uint256,t_struct(UintSet)7569_storage))": {
        "encoding": "mapping",
        "key": "t_enum(Location)24656",
        "label": "mapping(enum Location => mapping(uint256 => struct EnumerableSetUpgradeable.UintSet))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(UintSet)7569_storage)"
      },
      "t_mapping(t_enum(Location)24656,t_struct(UintSet)7569_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Location)24656",
        "label": "mapping(enum Location => struct EnumerableSetUpgradeable.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)7569_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_enum(Location)24656)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => enum Location)",
        "numberOfBytes": "32",
        "value": "t_enum(Location)24656"
      },
      "t_mapping(t_uint256,t_struct(UintSet)7569_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSetUpgradeable.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)7569_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Set)7111_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 7106,
            "contract": "contracts/wnd/world/World.sol:World",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 7110,
            "contract": "contracts/wnd/world/World.sol:World",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)7569_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.UintSet",
        "members": [
          {
            "astId": 7568,
            "contract": "contracts/wnd/world/World.sol:World",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)7111_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}