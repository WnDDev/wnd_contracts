import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { DeployFunction } from 'hardhat-deploy/types';
import { BigNumber } from 'ethers';
const CSV = require("comma-separated-values");
const fsPromises = require("fs/promises");

const func: DeployFunction = async function (hre: HardhatRuntimeEnvironment) {

    const { deployments, network } = hre;
    const { deploy, read, execute, getOrNull } = deployments;
    const [deployer] = await hre.ethers.getSigners();

    let isUnitTests = network.name === "hardhat";
    let isTestNet = network.name === "arbitrumtestnet"
        || network.name === "arbitrum-rinkeby"
        || network.name === "goerli"
        || network.name === "mumbai";
    let forceSetContracts = false;

    let tokenId: number = 35090;

    await main();

    async function main() {

        const iface = new hre.ethers.utils.Interface([
            {
                "inputs": [
                  {
                    "internalType": "uint256[]",
                    "name": "_rewardIds",
                    "type": "uint256[]"
                  },
                  {
                    "internalType": "uint32[]",
                    "name": "_rewardOdds",
                    "type": "uint32[]"
                  },
                  {
                    "components": [
                      {
                        "internalType": "uint16[9]",
                        "name": "min",
                        "type": "uint16[9]"
                      },
                      {
                        "internalType": "uint16[9]",
                        "name": "max",
                        "type": "uint16[9]"
                      }
                    ],
                    "internalType": "struct TrainingGameState.RewardMultiplier[]",
                    "name": "_rewardMultipliers",
                    "type": "tuple[]"
                  }
                ],
                "name": "setRewardSettings",
                "outputs": [],
                "stateMutability": "nonpayable",
                "type": "function"
              }
        ]);

        // const res = iface.decodeFunctionData('setRewardSettings', '

        const res = iface.parseTransaction({data: '0x08a864fc000000000000000000000000000000000000000000000000000000000000493e000000000000000000000000000000000000000000000000000000000000927c0000000000000000000000000000000000000000000000000000000000001838000000000000000000000000000000000000000000000000000000000000002dvalue: 0});
        console.log(JSON.stringify(res));
        return;

        // run decoder with recorderDataTypes, take the data and run it 1 more time
        // then run decover with riftDataTypes to get the input bytes
        const data = "0x000000000000000000000000c7defa20ec54917669f29e15d1acb7c121b4780c00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000300000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000062bb0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
        const abiCoder = hre.ethers.utils.defaultAbiCoder;

        const recorderDataTypes = ["address", "address", "bytes"];
        const riftDataTypes = ["address", "uint256", "uint256[]", "tuple(bool,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8,uint8)[]", "uint256[]", "uint256[]", "uint256[]", "uint256[]"];
        // var res = abiCoder.decode(riftDataTypes, data);

        // console.log(JSON.stringify(res));


        const random = BigNumber.from("28517335110703578903358621183203276271010878109463348626581942463523485668861");
        const tokenId = 25268;
        // keccak256(abi.encode(_randomness, _tokenId))
        const res2 = BigNumber.from(hre.ethers.utils.keccak256(abiCoder.encode(["uint256", "uint256"], [ random, tokenId ])));
        console.log();
        console.log(res2.toString());

        //output random
        const outputRandom = BigNumber.from("52166578010952396531942328189364269451213761236209342575365079806622221020131");
        const res3 = BigNumber.from(hre.ethers.utils.keccak256(abiCoder.encode(["uint256", "uint256"], [ outputRandom, outputRandom ])));
        console.log();
        console.log(res3.toString());

        if(!isTestNet) {
            return;
        }

        const bufferList = await fsPromises.readFile("./data/whitelist.json");
        const addrs: string[] = JSON.parse(bufferList.toString());

        console.log(`Number of addresses to set up: ${addrs.length}`);

        if(network.name === 'goerli') {
            for (let i = 0; i < addrs.length; i++) {
                const addr = addrs[i];
                console.log("minting NFTs for " + addr);
                await mintNFTs(addr, 0, 5);

                console.log("\n\nminting " + addr + " done. Current tokenId = " + tokenId + "\n\n");
            }
        }
        else {
            // const disperse = await deployContractNonUpgradeable('Disperse');
            // const consumables = await getOrNull('Consumables');
            // const gp = await getOrNull('GP');
            // if(consumables == null || gp == null) {
            //     return;
            // }
            // await setAdminsIfNeeded('GP', disperse.address);
            // await setAdminsIfNeeded('Consumables', disperse.address);

            // const recipients = addrs;
            // const ids = [1,2,4];
            // const values = [100,10,10];
            // const gpAmt = hre.ethers.utils.parseEther("1000000");
            // while (recipients.length > 0) {
            //     let chunk = recipients.splice(0, Math.min(50, recipients.length));
            //     if(chunk.length == 0) break;
            //     console.log(`starting airdrop for ${chunk.length} addressess...`);
            //     await airdrop(consumables.address, gp.address, chunk, ids, values, gpAmt);
            //     console.log("airdrop complete");
            //     console.log("");
            //     console.log(`Chunk starting addr: ${chunk[0]}, ending addr: ${chunk[chunk.length - 1]}`);
            //     console.log("");
            // }

            for (let i = 0; i < addrs.length; i++) {
                const addr = addrs[i];

                console.log("minting NFTs for " + addr);
                await mintNFTs(addr, 0, 5);
                console.log("\n\nminting " + addr + " done. Current tokenId = " + tokenId + "\n\n");
            }
        }
    }

    async function deployContractNonUpgradeable(name: string, ...args: any[]) : Promise<any> {
        const deploymentInfo = await getOrNull(name);
        if(deploymentInfo != null) {
            return deploymentInfo;
        }
        return await deploy(name, {
            from: deployer.address,
            log: true,
            args: args
        });
    }

    async function verifyContracts() {
        if(isUnitTests) {
            return;
        }

        try {
            await hre.run("etherscan-verify");
        } catch(error) {
            console.log(`Error verifying: ${error}`);
        }
    }

    async function setAdminsIfNeeded(contract: string, ...args: any[]) {
        var addressesToAdd = new Array<string>();

        for(var i = 0; i < args.length; i++) {
            let address = args[i];

            if(!(await read(contract, `isAdmin`, address))) {
                addressesToAdd.push(address);
            }
        }

        if(addressesToAdd.length > 0) {
            await execute(
                contract,
                { from: deployer.address, log: true },
                `addAdmins`,
                addressesToAdd
            );
        }
    }

    async function airdrop(...args: any[]) {
        const contract = 'Disperse';
        await execute(
            contract,
            { from: deployer.address, log: true, gasLimit: 15000000  },
            `airdropConsumablesAndGP`,
            ...args,
        );
    }

    async function deployContract(name: string) : Promise<any> {
        return await deploy(name, {
            from: deployer.address,
            log: true,
            proxy: {
                owner: deployer.address,
                proxyContract: 'OpenZeppelinTransparentProxy',
                execute: {
                    init: {
                        methodName: "initialize",
                        args: []
                    }
                }
            },
        });
    }

    async function mintGP(to: string, amt: BigNumber) : Promise<any> {
        await execute(
            'GP',
            { from: deployer.address, log: true },
            `mint`,
            to,
            amt
        );
    }

    async function mintConsumables(to: string, tokenIds: number[], amts: number[]) : Promise<any> {
        await execute(
            'Consumables',
            { from: deployer.address, log: true },
            `mintBatch`,
            to,
            tokenIds,
            amts
        );
    }

    async function mintNFTs(to: string, numWizards: number, numDragons: number) {
        const baseTraitIds = 
        [
        0,1,2,3,4
        ];
    
        const headTraitIds = 
        [
        0,1,2,3,4,5,6,7,8
        ];
    
        const spellTraitIds = 
        [
        0,1,2,3,4,5,6,7,8,9,10
        ];
    
        const eyeTraitIds =
        [
        0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16
        ];
    
        const neckTraitIds =
        [
        0,1,2,3,4,5,6,7,8,9,10,11
        ];
        
        const mouthTraitids =
        [
        0,1,2,3,4,5,6,7,8,9,10,11
        ];
    
        const wandTraitIds = 
        [
        0,1,2,4,3,5,6,7,8,9,10,11
        ];
        //Dragons traits 
        const dragBaseTrait = BigNumber.from("9");
        const dragEyesTrait = BigNumber.from("12");
        const dragMouthTrait = BigNumber.from("14");
        const dragHeadTrait = BigNumber.from("10");
        const dragTailTrait = BigNumber.from("15");
        const dragBaseIds =
        [
        0,1,2,3,4,5,6,7,8,9,10,11,12,13
        ];
        const dragEyesIds = 
        [
        0,1,2,3,4,5,6,7,8,9
        ];
        const dragMouthIds = 
        [
        0,1,2,3,4,5,6,7,8,9,10,11,12,13
        ];
        const dragHeadIds = 
        [
        0,1,2,3//,4,5,6,7,8,9
        ];
        const dragTailIds = 
        [
        0,1,2,3,4,5,6
        ];

        let traitsList= [];
        let tokenIds = [];

        for (let i = 0; i < numWizards; i++) {
            tokenIds.push(tokenId++);
            traitsList.push({
                isWizard:true,
                body:baseTraitIds[Math.floor(Math.random()*baseTraitIds.length)],
                head:headTraitIds[Math.floor(Math.random()*headTraitIds.length)],
                spell:spellTraitIds[Math.floor(Math.random()*spellTraitIds.length)],
                eyes:eyeTraitIds[Math.floor(Math.random()*eyeTraitIds.length)],
                neck:neckTraitIds[Math.floor(Math.random()*neckTraitIds.length)],
                mouth:mouthTraitids[Math.floor(Math.random()*mouthTraitids.length)],
                wand:wandTraitIds[Math.floor(Math.random()*wandTraitIds.length)],
                tail:1,
                rankIndex:1
            });
        }
        for (let i = 0; i < numDragons; i++) {
            tokenIds.push(tokenId++);
            traitsList.push({
                isWizard:false,
                body:dragBaseIds[Math.floor(Math.random()*dragBaseIds.length)],
                head:1,
                spell:1,
                eyes:dragEyesIds[Math.floor(Math.random()*dragEyesIds.length)],
                neck:1,
                mouth:dragMouthIds[Math.floor(Math.random()*dragMouthIds.length)],
                wand:1,
                tail:dragTailIds[Math.floor(Math.random()*dragTailIds.length)],
                rankIndex:Math.floor(Math.random()*3)
            });
        }

        await execute(
            'WnD',
            { from: deployer.address, log: true },
            `mintBatch`,
            to,
            tokenIds,
            traitsList
        );
    }
};

export default func;
func.tags = ['wnd-beta-user-setup'];

function getChildTunnelABI() {
    return [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_fxChild",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "bytes",
              "name": "message",
              "type": "bytes"
            }
          ],
          "name": "MessageSent",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            }
          ],
          "name": "addAdmin",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_addresses",
              "type": "address[]"
            }
          ],
          "name": "addAdmins",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "fxChild",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "fxRootTunnel",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            }
          ],
          "name": "isAdmin",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "messageHandler",
          "outputs": [
            {
              "internalType": "contract IMessageHandler",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "stateId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "rootMessageSender",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "processMessageFromRoot",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_address",
              "type": "address"
            }
          ],
          "name": "removeAdmin",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "_addresses",
              "type": "address[]"
            }
          ],
          "name": "removeAdmins",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_message",
              "type": "bytes"
            }
          ],
          "name": "sendMessageToRoot",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_fxRootTunnel",
              "type": "address"
            }
          ],
          "name": "setFxRootTunnel",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_messageHandlerAddress",
              "type": "address"
            }
          ],
          "name": "setMessageHandler",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bool",
              "name": "_shouldPause",
              "type": "bool"
            }
          ],
          "name": "setPause",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ];
}